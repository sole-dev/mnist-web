/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var e,t,n,s,r,a,i={13:(e,t,n)=>{"use strict";n.d(t,{YL:()=>ze,gJ:()=>Ue});var s={};n.r(s),n.d(s,{json:()=>O});var r={};n.r(r),n.d(r,{json:()=>M});var a={};n.r(a),n.d(a,{json:()=>L});var i={};n.r(i),n.d(i,{json:()=>B});var o={};n.r(o),n.d(o,{json:()=>z});var u={};n.r(u),n.d(u,{json:()=>U});var l={};n.r(l),n.d(l,{json:()=>W});var c={};n.r(c),n.d(c,{json:()=>P});var h={};n.r(h),n.d(h,{json:()=>V});var p={};n.r(p),n.d(p,{json:()=>G});var d={};n.r(d),n.d(d,{json:()=>H});var f={};n.r(f),n.d(f,{json:()=>j});var m={};n.r(m),n.d(m,{json:()=>X});var g={};n.r(g),n.d(g,{json:()=>q});var y={};n.r(y),n.d(y,{json:()=>K});var b={};n.r(b),n.d(b,{json:()=>Y});var x={};n.r(x),n.d(x,{json:()=>Q});var w={};n.r(w),n.d(w,{json:()=>Z});var v={};n.r(v),n.d(v,{json:()=>J});var k={};n.r(k),n.d(k,{OP_SCOPE_SUFFIX:()=>ge.zvA,abs:()=>ge.WnP,acos:()=>ge.Khb,acosh:()=>ge.__u,add:()=>ge.IHx,addN:()=>ge.QBD,all:()=>ge.$6P,any:()=>ge.YjB,argMax:()=>ge.NqF,argMin:()=>ge.vHJ,asin:()=>ge.ZRM,asinh:()=>ge.VfV,atan:()=>ge.z4N,atan2:()=>ge.fvJ,atanh:()=>ge.C80,avgPool:()=>ge.wS1,avgPool3d:()=>ge.uR5,basicLSTMCell:()=>ge.zEQ,batchNorm:()=>ge.tgs,batchNorm2d:()=>ge.Dxk,batchNorm3d:()=>ge.JY5,batchNorm4d:()=>ge.p3b,batchToSpaceND:()=>ge.E4h,bincount:()=>ge.yE8,booleanMaskAsync:()=>ge.anm,broadcastArgs:()=>ge.XsQ,broadcastTo:()=>ge.UFq,buffer:()=>ge.f3b,cast:()=>ge.pju,ceil:()=>ge.mDi,clipByValue:()=>ge.iUl,clone:()=>ge.d9v,complex:()=>ge.PYB,concat:()=>ge.zoF,concat1d:()=>ge.gME,concat2d:()=>ge.Izb,concat3d:()=>ge.MNy,concat4d:()=>ge.ZaL,conv1d:()=>ge.PAt,conv2d:()=>ge.Tek,conv2dTranspose:()=>ge.bc,conv3d:()=>ge.pdZ,conv3dTranspose:()=>ge.$QV,cos:()=>ge.mCk,cosh:()=>ge.f9Y,cosineWindow:()=>ge.mew,cumprod:()=>ge.$Gn,cumsum:()=>ge.zbp,denseBincount:()=>ge.ppE,depthToSpace:()=>ge.nTT,depthwiseConv2d:()=>ge.B10,diag:()=>ge.Ka3,dilation2d:()=>ge.WmZ,div:()=>ge.hiC,divNoNan:()=>ge.NTj,dot:()=>ge.AKD,dropout:()=>ge.rvX,einsum:()=>ge.WYO,elu:()=>ge.pyx,enclosingPowerOfTwo:()=>ge.GRh,equal:()=>ge.DgJ,erf:()=>ge.qNN,euclideanNorm:()=>ge.d2q,exp:()=>ge.Qqt,expandDims:()=>ge.dt4,expm1:()=>ge.t$B,eye:()=>ge.iyy,fft:()=>ge.kp_,fill:()=>ge.hlL,floor:()=>ge.GWj,floorDiv:()=>ge.qPi,fused:()=>ge.imm,gather:()=>ge.Iqj,gatherND:()=>ge.dbB,greater:()=>ge.pjt,greaterEqual:()=>ge.brS,ifft:()=>ge.Sxn,imag:()=>ge.asL,image:()=>ge.BHj,inTopKAsync:()=>ge.V3u,irfft:()=>ge.wx0,isFinite:()=>ge.xVT,isInf:()=>ge.UWc,isNaN:()=>ge.i2d,leakyRelu:()=>ge.hi7,less:()=>ge.d9m,lessEqual:()=>ge.zN1,linalg:()=>ge.$r2,linspace:()=>ge.SX3,localResponseNormalization:()=>ge.G9k,log:()=>ge.cM7,log1p:()=>ge.Krr,logSigmoid:()=>ge.e_t,logSoftmax:()=>ge.CmS,logSumExp:()=>ge.l_t,logicalAnd:()=>ge.HvI,logicalNot:()=>ge.hJK,logicalOr:()=>ge.K5V,logicalXor:()=>ge.egP,losses:()=>ge.MB5,lowerBound:()=>ge.eab,matMul:()=>ge.OI3,max:()=>ge.Fp7,maxPool:()=>ge._sB,maxPool3d:()=>ge.YQQ,maxPoolWithArgmax:()=>ge.Ip$,maximum:()=>ge.gWQ,mean:()=>ge.J69,meshgrid:()=>ge.ry_,min:()=>ge.VV$,minimum:()=>ge.LTh,mirrorPad:()=>ge.VdP,mod:()=>ge.wQq,moments:()=>ge.Gi7,movingAverage:()=>ge.p_,mul:()=>ge.dC7,multiRNNCell:()=>ge.rq4,multinomial:()=>ge.SJ_,neg:()=>ge.W76,norm:()=>ge.KOy,notEqual:()=>ge.Quu,oneHot:()=>ge.lfX,ones:()=>ge.iUs,onesLike:()=>ge.JpU,op:()=>ge.op,outerProduct:()=>ge.N2O,pad:()=>ge.vku,pad1d:()=>ge.pNR,pad2d:()=>ge.koy,pad3d:()=>ge.t1L,pad4d:()=>ge.lGY,pool:()=>ge.d_R,pow:()=>ge.sQ3,prelu:()=>ge.AL3,print:()=>ge.S0v,prod:()=>ge.WVs,raggedGather:()=>ge.$gW,raggedRange:()=>ge.VT$,raggedTensorToTensor:()=>ge.N89,rand:()=>ge.TN_,randomGamma:()=>ge.wzB,randomNormal:()=>ge.nGf,randomStandardNormal:()=>ge.ruB,randomUniform:()=>ge.LGj,range:()=>ge.w6H,real:()=>ge.kwC,reciprocal:()=>ge.M25,relu:()=>ge.UYe,relu6:()=>ge.btT,reshape:()=>ge.XLQ,reverse:()=>ge.GYS,reverse1d:()=>ge.SDf,reverse2d:()=>ge.diP,reverse3d:()=>ge.sx7,reverse4d:()=>ge.mG2,rfft:()=>ge.QEs,round:()=>ge.NMM,rsqrt:()=>ge.bp0,scalar:()=>ge.iD$,scatterND:()=>ge.snQ,searchSorted:()=>ge.zcT,selu:()=>ge.U8D,separableConv2d:()=>ge.U_I,setdiff1dAsync:()=>ge.ODp,sigmoid:()=>ge.XD2,sign:()=>ge.Xxe,signal:()=>ge.tdS,sin:()=>ge.O$l,sinh:()=>ge.R_K,slice:()=>ge.tPi,slice1d:()=>ge.jZU,slice2d:()=>ge.SmN,slice3d:()=>ge.CnO,slice4d:()=>ge.p0P,softmax:()=>ge.XAC,softplus:()=>ge.Wvh,spaceToBatchND:()=>ge.fBT,sparse:()=>ge.rVs,sparseToDense:()=>ge.ers,spectral:()=>ge.uN7,split:()=>ge.Vl2,sqrt:()=>ge._b3,square:()=>ge.h62,squaredDifference:()=>ge.$i,squeeze:()=>ge.L9e,stack:()=>ge.knu,step:()=>ge.Nbs,stridedSlice:()=>ge.NXj,string:()=>ge.Z_8,sub:()=>ge.luU,sum:()=>ge.Smz,tan:()=>ge.ORZ,tanh:()=>ge.AEp,tensor:()=>ge.XeE,tensor1d:()=>ge.RRF,tensor2d:()=>ge.odF,tensor3d:()=>ge.wOQ,tensor4d:()=>ge.yXz,tensor5d:()=>ge.Bfx,tensor6d:()=>ge.xZs,tile:()=>ge.Gg6,topk:()=>ge.hg7,transpose:()=>ge.p4s,truncatedNormal:()=>ge.Xu6,unique:()=>ge.Two,unsortedSegmentSum:()=>ge.pUJ,unstack:()=>ge.HHK,upperBound:()=>ge.GaM,variable:()=>ge.VD$,where:()=>ge.arb,whereAsync:()=>ge.itS,zeros:()=>ge.lls,zerosLike:()=>ge.P84});var I,S,N=n(8763);(0,N.OBj)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(I||(I={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(S||(S={}));const T={};function C(e){return T[e]}function $(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return E(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type)return t.inputNames.slice(e,i).map((e=>E(e,n,s,r)));const o=E(t.inputNames.slice(e)[0],n,s,r),u=o.dataSync();return"number"===a.type?u[0]:N.D5U.toNestedArray(o.shape,u)}const i=t.attrParams[e];return i&&i.value}function E(e,t,n,s){const[r,a]=R(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[D(r,e)]));return void 0!==i?t[D(r,i)][a]:void 0}function A(e,t){const[n,s,r]=R(e);return[D(n,t&&t.currentContextId),s,r]}function D(e,t){return t?`${e}-${t}`:e}function R(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],s=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),s]}function _(e,t,n){let s=$("pad",e,t,n);if("explicit"===s){s=$("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function F(e){return e.kept?e:(0,N.d9v)(e)}const O=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],M=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],L=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],B=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],z=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],U=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],W=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],P=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],V=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],G=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],H=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],j=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],X=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],q=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],K=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Y=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Q=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Z=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],J=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class ee{constructor(){const e=[].concat(...[s,r,a,i,o,u,l,c,h,p,d,f,m,g,y,b,x,w,v].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}static get Instance(){return this._instance||(this._instance=new this)}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=A(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=A(e),n=i[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=A(e),n=i[t];n&&(n.signatureKey=l[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:u,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=C(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=ne(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ne(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=pe(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=re(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=he(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=se(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=fe(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=ce(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=de(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=oe(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=ue(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ue(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=ie(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=A(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ae(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=A(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=A(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function te(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,N.OBj)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function ne(e,t,n,s=!1){const r=e[t];return null!=r?te(r.s,s):n}function se(e,t,n){const s=e[t];return s?s.b:n}function re(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function ae(e){switch("string"==typeof e&&(e=I[e]),e){case I.DT_FLOAT:case I.DT_HALF:return"float32";case I.DT_INT32:case I.DT_INT64:case I.DT_INT8:case I.DT_UINT8:return"int32";case I.DT_BOOL:return"bool";case I.DT_DOUBLE:return"float32";case I.DT_STRING:return"string";default:return null}}function ie(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function oe(e,t,n){const s=e[t];return s&&s.type?ae(s.type):n}function ue(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>ae(e))):n}function le(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function ce(e,t,n){const s=e[t];return s&&s.shape?le(s.shape):n}function he(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function pe(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>te(e,s))):n}function de(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>le(e))):n}function fe(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class me{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return E(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return E(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return re(this.node.rawAttrs,e,t);if(null!=n.s)return ne(this.node.rawAttrs,e,t);if(null!=n.b)return se(this.node.rawAttrs,e,t);if(null!=n.shape)return ce(this.node.rawAttrs,e,t);if(null!=n.type)return oe(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return he(this.node.rawAttrs,e,t);if(null!=n.list.s)return pe(this.node.rawAttrs,e,t);if(null!=n.list.shape)return de(this.node.rawAttrs,e,t);if(null!=n.list.b)return fe(this.node.rawAttrs,e,t);if(null!=n.list.type)return ue(this.node.rawAttrs,e,t)}return t}}var ge=n(1710);function ye(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){N.D5U.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];N.D5U.assert(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function be(e){return"number"!=typeof e&&!e.some((e=>e<0))}function xe(e,t,n){let s=we(e,n);const r=!be(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=we(e.shape,s)})),!be(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function we(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class ve{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=(0,N.iD$)(0),(0,N.CnY)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),ye(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,N.CnY)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,N.XeE)([],[0].concat(this.elementShape));const n=this.readMany(e);return ye(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,N.knu)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,N.XeE)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return ye(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,N.zoF)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,N.HHK)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];(0,N.lub)((()=>{t=(0,N.XLQ)(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=(0,N.XLQ)((0,N.tPi)(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class ke{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);ye(t,e.shape,"TensorList shape mismatch: "),(0,N.CnY)(e)})),this.idTensor=(0,N.iD$)(0),this.maxNumElements=s,(0,N.CnY)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ke([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);ye(e,this.elementShape,"TensorList shape mismatch: ");const s=xe(this.elementShape,this.tensors,e);return(0,N.lub)((()=>{const e=this.tensors.map((e=>(0,N.XLQ)(e,s)));return(0,N.knu)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=xe(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,ye(s.shape,e,"TensorList shape mismatch: "),(0,N.XLQ)(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(ye(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,N.CnY)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new ke([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);ye(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=xe(this.elementShape,this.tensors,t);return(0,N.XLQ)(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);ye(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,N.CnY)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);ye(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=xe(this.elementShape,this.tensors,n);return 0===e.length?(0,N.XeE)([],[0].concat(s)):(0,N.lub)((()=>{const t=e.map((e=>(0,N.XLQ)(this.tensors[e],s)));return(0,N.knu)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);ye(this.elementShape,t,"TensorList shape mismatch: ");const n=xe(this.elementShape,this.tensors,t);return 0===this.size()?(0,N.XeE)([],[0].concat(n)):(0,N.lub)((()=>{const e=this.tensors.map((e=>(0,N.XLQ)(e,n)));return(0,N.zoF)(e,0)}))}}function Ie(e,t,n){const[s,r]=$("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,u="fusedbatchnorm"===s,l=$("numArgs",e,t,n);if(a){if(o&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=$("strides",e,t,n),h=_(e,t,n),p=$("dataFormat",e,t,n).toUpperCase(),d=$("dilations",e,t,n);let[f,m]=$("args",e,t,n);return i&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:$("leakyreluAlpha",e,t,n)}}function Se(e,t,n){return{boxes:$("boxes",e,t,n),scores:$("scores",e,t,n),maxOutputSize:$("maxOutputSize",e,t,n),iouThreshold:$("iouThreshold",e,t,n),scoreThreshold:$("scoreThreshold",e,t,n),softNmsSigma:$("softNmsSigma",e,t,n)}}var Ne=n(9494);class Te{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,N.iD$)(0),this.tensorMap=new Map,(0,N.CnY)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ne.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,N.lub)((()=>{const e=(0,N.HHK)(t),s=n.length,r=e.length;N.D5U.assert(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];(0,N.CnY)(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,N.lub)((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return(0,N.knu)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function Ce(e,t,n,s,r=N.lub){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add($("a",e,t,n),$("b",e,t,n))];case"AddN":return[s.addN($("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod($("a",e,t,n),$("b",e,t,n))];case"Mul":return[s.mul($("a",e,t,n),$("b",e,t,n))];case"RealDiv":case"Div":return[s.div($("a",e,t,n),$("b",e,t,n))];case"DivNoNan":return[s.divNoNan($("a",e,t,n),$("b",e,t,n))];case"FloorDiv":return[s.floorDiv($("a",e,t,n),$("b",e,t,n))];case"Sub":return[s.sub($("a",e,t,n),$("b",e,t,n))];case"Minimum":return[s.minimum($("a",e,t,n),$("b",e,t,n))];case"Maximum":return[s.maximum($("a",e,t,n),$("b",e,t,n))];case"Pow":return[s.pow($("a",e,t,n),$("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference($("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Abs":case"ComplexAbs":return[s.abs($("x",e,t,n))];case"Acos":return[s.acos($("x",e,t,n))];case"Acosh":return[s.acosh($("x",e,t,n))];case"Asin":return[s.asin($("x",e,t,n))];case"Asinh":return[s.asinh($("x",e,t,n))];case"Atan":return[s.atan($("x",e,t,n))];case"Atan2":return[s.atan2($("x",e,t,n),$("y",e,t,n))];case"Atanh":return[s.atanh($("x",e,t,n))];case"Ceil":return[s.ceil($("x",e,t,n))];case"Complex":return[s.complex($("real",e,t,n),$("imag",e,t,n))];case"Cos":return[s.cos($("x",e,t,n))];case"Cosh":return[s.cosh($("x",e,t,n))];case"Elu":return[s.elu($("x",e,t,n))];case"Erf":return[s.erf($("x",e,t,n))];case"Exp":return[s.exp($("x",e,t,n))];case"Expm1":return[s.expm1($("x",e,t,n))];case"Floor":return[s.floor($("x",e,t,n))];case"Log":return[s.log($("x",e,t,n))];case"Log1p":return[s.log1p($("x",e,t,n))];case"Imag":return[s.imag($("x",e,t,n))];case"Neg":return[s.neg($("x",e,t,n))];case"Reciprocal":return[s.reciprocal($("x",e,t,n))];case"Real":return[s.real($("x",e,t,n))];case"Relu":return[s.relu($("x",e,t,n))];case"Round":return[s.round($("x",e,t,n))];case"Selu":return[s.selu($("x",e,t,n))];case"Sigmoid":return[s.sigmoid($("x",e,t,n))];case"Sin":return[s.sin($("x",e,t,n))];case"Sign":return[s.sign($("x",e,t,n))];case"Sinh":return[s.sinh($("x",e,t,n))];case"Softplus":return[s.softplus($("x",e,t,n))];case"Sqrt":return[s.sqrt($("x",e,t,n))];case"Square":return[s.square($("x",e,t,n))];case"Tanh":return[s.tanh($("x",e,t,n))];case"Tan":return[s.tan($("x",e,t,n))];case"ClipByValue":return[s.clipByValue($("x",e,t,n),$("clipValueMin",e,t,n),$("clipValueMax",e,t,n))];case"Relu6":return[s.relu6($("x",e,t,n))];case"Rsqrt":return[s.rsqrt(E(e.inputNames[0],t,n))];case"Prod":return[s.prod($("x",e,t,n),$("axes",e,t,n))];case"LeakyRelu":return[s.leakyRelu($("x",e,t,n),$("alpha",e,t,n))];case"Prelu":return[s.prelu($("x",e,t,n),$("alpha",e,t,n))];case"IsNan":return[s.isNaN(E(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=$("thenBranch",e,t,n),r=$("elseBranch",e,t,n),a=$("cond",e,t,n),i=$("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=$("body",e,t,n),r=$("cond",e,t,n),a=$("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let u=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[F($("pred",e,t,n))];case"Switch":{const s=$("pred",e,t,n);let r=$("data",e,t,n);return r.kept||(r=F(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==E(e,t,n)));return s?[F(E(s,t,n))]:void 0}case"Enter":{const s=$("frameName",e,t,n),r=$("tensor",e,t,n);return n.enterFrame(s),[F(r)]}case"Exit":{const s=$("tensor",e,t,n);return n.exitFrame(),[F(s)]}case"NextIteration":{const s=$("tensor",e,t,n);return n.nextIteration(),[F(s)]}case"TensorArrayV3":{const s=$("size",e,t,n),r=$("dtype",e,t,n),a=$("elementShape",e,t,n),i=$("dynamicSize",e,t,n),o=$("clearAfterRead",e,t,n),u=$("identicalElementShapes",e,t,n),l=$("name",e,t,n),c=new ve(l,r,s,a,u,i,o);return n.addTensorArray(c),[c.idTensor,(0,N.iD$)(1)]}case"TensorArrayWriteV3":{const s=$("tensorArrayId",e,t,n),r=$("index",e,t,n),a=$("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=$("tensorArrayId",e,t,n),r=$("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=$("tensorArrayId",e,t,n),r=$("indices",e,t,n),a=$("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=$("tensorArrayId",e,t,n),r=$("indices",e,t,n),a=$("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=$("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=$("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=$("tensorArrayId",e,t,n),r=$("tensor",e,t,n),a=$("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=$("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return[(0,N.iD$)(r.size(),"int32")]}case"TensorArrayCloseV3":{const s=$("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=$("tensorListId",e,t,n),r=$("index",e,t,n),a=$("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=$("tensorListId",e,t,n),r=$("index",e,t,n),a=$("elementShape",e,t,n),i=$("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=$("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new ke([],n,e.dtype,s),i=(0,N.HHK)(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}($("tensor",e,t,n),s,$("elementShape",e,t,n),$("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=$("elementShape",e,t,n),r=$("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=$(a,e,t,n),o=function(e,t,n,s){return new ke([],e,t,s)}(s,r,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const s=$("tensorListId",e,t,n),r=$("indices",e,t,n),a=$("elementShape",e,t,n),i=$("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=$("tensorListId",e,t,n),r=$("elementShape",e,t,n),a=$("elementDType",e,t,n),i=$("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);ye(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=(0,N.HHK)(e);return new ke(r,t,s)}($("tensor",e,t,n),$("elementShape",e,t,n),$("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=$("tensorListId",e,t,n),r=n.getTensorList(s.id),a=$("dtype",e,t,n),i=$("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=$("tensorListId",e,t,n),r=$("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=$("tensorListId",e,t,n),r=$("elementShape",e,t,n),a=$("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=$("tensor",e,t,n),r=$("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=we(e.shape.slice(1),n),i=0===s?0:e.size/s,o=(0,N.lub)((()=>{const n=[];e=(0,N.XLQ)(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],u=[1,t[s],i];n[s]=(0,N.XLQ)((0,N.tPi)(e,o,u),a)}return e.dispose(),n})),u=new ke([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)u.setItem(e,o[e]);return u}(s,$("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const s=$("tensorListId",e,t,n),r=n.getTensorList(s.id);return[(0,N.iD$)(r.size(),"int32")]}case"TensorListResize":{const s=$("tensorListId",e,t,n),r=$("size",e,t,n),a=n.getTensorList(s.id).resize(r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Conv1D":{const r=$("stride",e,t,n),a=$("pad",e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilation",e,t,n);return[s.conv1d($("x",e,t,n),$("filter",e,t,n),r,a,i,o)]}case"Conv2D":{const r=$("strides",e,t,n),a=_(e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilations",e,t,n);return[s.conv2d($("x",e,t,n),$("filter",e,t,n),[r[1],r[2]],a,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:h}=Ie(e,t,n);return[s.fused.conv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:h}=Ie(e,t,n);return[s.fused.depthwiseConv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=$("outputShape",e,t,n),a=$("strides",e,t,n),i=_(e,t,n);return[s.conv2dTranspose($("x",e,t,n),$("filter",e,t,n),r,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=$("strides",e,t,n),a=_(e,t,n),i=$("dilations",e,t,n),o=$("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d($("input",e,t,n),$("filter",e,t,n),[r[1],r[2]],a,o,[i[1],i[2]])]}case"Conv3D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilations",e,t,n);return[s.conv3d($("x",e,t,n),$("filter",e,t,n),[r[1],r[2],r[3]],a,i,[o[1],o[2],o[3]])]}case"AvgPool":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.avgPool($("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.maxPool($("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n),o=$("includeBatchInIndex",e,t,n),{result:u,indexes:l}=s.maxPoolWithArgmax($("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a,o);return[u,l]}case"AvgPool3D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.avgPool3d($("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.maxPool3d($("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("dilations",e,t,n),o=r[1],u=r[2],l=i[1],c=i[2];return[s.dilation2d($("x",e,t,n),$("filter",e,t,n),[o,u],a,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Fill":{const r=$("shape",e,t,n),a=$("dtype",e,t,n),i=$("value",e,t,n);return[s.fill(r,i,a)]}case"LinSpace":{const r=$("start",e,t,n),a=$("stop",e,t,n),i=$("num",e,t,n);return[s.linspace(r,a,i)]}case"Multinomial":{const r=$("logits",e,t,n),a=$("numSamples",e,t,n),i=$("seed",e,t,n);return[s.multinomial(r,a,i)]}case"OneHot":{const r=$("indices",e,t,n),a=$("depth",e,t,n),i=$("onValue",e,t,n),o=$("offValue",e,t,n),u=$("dtype",e,t,n);return[s.oneHot(r,a,i,o,u)]}case"Ones":return[s.ones($("shape",e,t,n),$("dtype",e,t,n))];case"OnesLike":return[s.onesLike($("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal($("shape",e,t,n),$("dtype",e,t,n),$("seed",e,t,n))];case"RandomUniform":return[s.randomUniform($("shape",e,t,n),$("minval",e,t,n),$("maxval",e,t,n),$("dtype",e,t,n))];case"Range":{const r=$("start",e,t,n),a=$("stop",e,t,n),i=$("step",e,t,n);return[s.range(r,a,i,$("dtype",e,t,n))]}case"TruncatedNormal":{const r=$("shape",e,t,n),a=$("mean",e,t,n),i=$("stdDev",e,t,n),o=$("seed",e,t,n);return[s.truncatedNormal(r,a,i,$("dtype",e,t,n),o)]}case"Zeros":return[s.zeros($("shape",e,t,n),$("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,s,r=k)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=Se(e,t,n),c=await r.image.nonMaxSuppressionWithScoreAsync(s,a,i,o,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=Se(e,t,n),l=$("padToMaxOutputSize",e,t,n),c=await r.image.nonMaxSuppressionPaddedAsync(s,a,i,o,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=Se(e,t,n);return[await r.image.nonMaxSuppressionAsync(s,a,i,o,u)]}case"Where":{const s=r.cast($("condition",e,t,n),"bool"),a=[await r.whereAsync(s)];return s.dispose(),a}case"ListDiff":return r.setdiff1dAsync($("x",e,t,n),$("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"LowerBound":{const r=$("sortedSequence",e,t,n),a=$("values",e,t,n);return[s.lowerBound(r,a)]}case"TopKV2":{const r=$("x",e,t,n),a=$("k",e,t,n),i=$("sorted",e,t,n),o=s.topk(r,a,i);return[o.values,o.indices]}case"UpperBound":{const r=$("sortedSequence",e,t,n),a=$("values",e,t,n);return[s.upperBound(r,a)]}case"Unique":{const r=$("x",e,t,n),a=s.unique(r);return[a.values,a.indices]}case"UniqueV2":{const r=$("x",e,t,n),a=$("axis",e,t,n),i=s.unique(r,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"ResizeBilinear":{const r=$("images",e,t,n),a=$("size",e,t,n),i=$("alignCorners",e,t,n),o=$("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(r,[a[0],a[1]],i,o)]}case"ResizeNearestNeighbor":{const r=$("images",e,t,n),a=$("size",e,t,n),i=$("alignCorners",e,t,n),o=$("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(r,[a[0],a[1]],i,o)]}case"CropAndResize":{const r=$("image",e,t,n),a=$("boxes",e,t,n),i=$("boxInd",e,t,n),o=$("cropSize",e,t,n),u=$("method",e,t,n),l=$("extrapolationValue",e,t,n);return[s.image.cropAndResize(r,a,i,o,u,l)]}case"ImageProjectiveTransformV3":{const r=$("images",e,t,n),a=$("transforms",e,t,n),i=$("outputShape",e,t,n),o=$("fillValue",e,t,n),u=$("interpolation",e,t,n),l=$("fillMode",e,t,n);return[s.image.transform(r,a,u.toLowerCase(),l.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=$("default",e,t,n);return[E(e.name,t,n)||r];case"Placeholder":return[E(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[F($("x",e,t,n))];case"IdentityN":return $("x",e,t,n).map((e=>F(e)));case"Shape":return[s.tensor1d($("x",e,t,n).shape,"int32")];case"ShapeN":return $("x",e,t,n).map((e=>s.tensor1d(e.shape)));case"Size":return[s.scalar($("x",e,t,n).size,"int32")];case"Rank":return[s.scalar($("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=$("x",e,t,n),i=$("data",e,t,n),o=$("message",e,t,n),u=$("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Equal":return[s.equal($("a",e,t,n),$("b",e,t,n))];case"NotEqual":return[s.notEqual($("a",e,t,n),$("b",e,t,n))];case"Greater":return[s.greater($("a",e,t,n),$("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual($("a",e,t,n),$("b",e,t,n))];case"Less":return[s.less($("a",e,t,n),$("b",e,t,n))];case"LessEqual":return[s.lessEqual($("a",e,t,n),$("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd($("a",e,t,n),$("b",e,t,n))];case"LogicalNot":return[s.logicalNot($("a",e,t,n))];case"LogicalOr":return[s.logicalOr($("a",e,t,n),$("b",e,t,n))];case"Select":case"SelectV2":return[s.where($("condition",e,t,n),$("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul($("a",e,t,n),$("b",e,t,n),$("transposeA",e,t,n),$("transposeB",e,t,n))];case"Einsum":return[s.einsum($("equation",e,t,n),...$("tensors",e,t,n))];case"Transpose":return[s.transpose($("x",e,t,n),$("perm",e,t,n))];case"_FusedMatMul":const[r,a]=$("fusedOps",e,t,n),i="biasadd"===r,o="prelu"===a,u=$("numArgs",e,t,n),l=$("leakyreluAlpha",e,t,n);if(i){if(o&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=$("args",e,t,n);return[s.fused.matMul({a:$("a",e,t,n),b:$("b",e,t,n),transposeA:$("transposeA",e,t,n),transposeB:$("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:h,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"EuclideanNorm":return[s.euclideanNorm($("x",e,t,n),$("axis",e,t,n),$("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm($("x",e,t,n),$("mean",e,t,n),$("variance",e,t,n),$("offset",e,t,n),$("scale",e,t,n),$("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization($("x",e,t,n),$("radius",e,t,n),$("bias",e,t,n),$("alpha",e,t,n),$("beta",e,t,n))];case"Softmax":return[s.softmax($("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax($("x",e,t,n))];case"SparseToDense":return[s.sparseToDense($("sparseIndices",e,t,n),$("outputShape",e,t,n),$("sparseValues",e,t,n),$("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:a}=s.raggedGather($("paramsNestedSplits",e,t,n),$("paramsDenseValues",e,t,n),$("indices",e,t,n),$("outputRaggedRank",e,t,n));return r.concat(a)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:a}=s.raggedRange($("starts",e,t,n),$("limits",e,t,n),$("splits",e,t,n));return[r,a]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor($("shape",e,t,n),$("values",e,t,n),$("defaultValue",e,t,n),$("rowPartitionTensors",e,t,n),$("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Max":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.max($("x",e,t,n),r,a)]}case"Mean":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.mean($("x",e,t,n),r,a)]}case"Min":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.min($("x",e,t,n),r,a)]}case"Sum":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.sum($("x",e,t,n),r,a)]}case"All":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.all($("x",e,t,n),r,a)]}case"Any":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.any($("x",e,t,n),r,a)]}case"ArgMax":{const r=$("axis",e,t,n);return[s.argMax($("x",e,t,n),r)]}case"ArgMin":{const r=$("axis",e,t,n);return[s.argMin($("x",e,t,n),r)]}case"Prod":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.prod($("x",e,t,n),r,a)]}case"Cumprod":{const r=$("axis",e,t,n),a=$("exclusive",e,t,n),i=$("reverse",e,t,n);return[s.cumprod($("x",e,t,n),r,a,i)]}case"Cumsum":{const r=$("axis",e,t,n),a=$("exclusive",e,t,n),i=$("reverse",e,t,n);return[s.cumsum($("x",e,t,n),r,a,i)]}case"Bincount":const r=$("x",e,t,n),a=$("weights",e,t,n),i=$("size",e,t,n);return[s.bincount(r,a,i)];case"DenseBincount":{const r=$("x",e,t,n),a=$("weights",e,t,n),i=$("size",e,t,n),o=$("binaryOutput",e,t,n);return[s.denseBincount(r,a,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=$("n",e,t,n),a=$("axis",e,t,n);let i=$("tensors",e,t,n);return i=i.slice(0,r),[s.concat(i,a)]}case"Gather":{const r=$("x",e,t,n),a=$("indices",e,t,n);return[s.gather(r,s.cast(a,"int32"),0)]}case"GatherV2":{const r=$("axis",e,t,n),a=$("batchDims",e,t,n),i=$("x",e,t,n),o=$("indices",e,t,n);return[s.gather(i,s.cast(o,"int32"),r,a)]}case"Reverse":{const r=$("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const i=$("x",e,t,n);return[s.reverse(i,a)]}case"ReverseV2":{const r=$("axis",e,t,n),a=$("x",e,t,n);return[s.reverse(a,r)]}case"Slice":{const r=$("begin",e,t,n),a=$("size",e,t,n);return[s.slice($("x",e,t,n),r,a)]}case"StridedSlice":{const r=$("begin",e,t,n),a=$("end",e,t,n),i=$("strides",e,t,n),o=$("beginMask",e,t,n),u=$("endMask",e,t,n),l=$("ellipsisMask",e,t,n),c=$("newAxisMask",e,t,n),h=$("shrinkAxisMask",e,t,n),p=$("x",e,t,n);return[s.stridedSlice(p,r,a,i,o,u,l,c,h)]}case"Pack":return(0,N.lub)((()=>{const r=$("axis",e,t,n),a=$("tensors",e,t,n),i=a[0].shape,o=s.squeeze(a[0]).shape,u=a.map((e=>{const t=N.D5U.arraysEqual(e.shape,i);if(!t&&!N.D5U.arraysEqual(s.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,i)}));return[s.stack(u,r)]}));case"Unpack":{const r=$("axis",e,t,n),a=$("tensor",e,t,n);return s.unstack(a,r)}case"Tile":{const r=$("reps",e,t,n);return[s.tile($("x",e,t,n),r)]}case"Split":case"SplitV":{const r=$("axis",e,t,n),a=$("numOrSizeSplits",e,t,n),i=$("x",e,t,n);return s.split(i,a,r)}case"ScatterNd":{const r=$("indices",e,t,n),a=$("values",e,t,n),i=$("shape",e,t,n);return[s.scatterND(r,a,i)]}case"GatherNd":{const r=$("x",e,t,n),a=$("indices",e,t,n);return[s.gatherND(r,a)]}case"SparseToDense":{const r=$("sparseIndices",e,t,n),a=$("outputShape",e,t,n),i=$("sparseValues",e,t,n),o=$("defaultValue",e,t,n);return[s.sparseToDense(r,i,a,i.dtype===o.dtype?o:s.cast(o,i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:i,reverseIndexMap:o}=s.sparse.sparseFillEmptyRows($("indices",e,t,n),$("values",e,t,n),$("denseShape",e,t,n),$("defaultValue",e,t,n));return[r,a,i,o]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=s.sparse.sparseReshape($("inputIndices",e,t,n),$("inputShape",e,t,n),$("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"FFT":return[s.fft($("x",e,t,n))];case"IFFT":return[s.ifft($("x",e,t,n))];case"RFFT":return[s.rfft($("x",e,t,n))];case"IRFFT":return[s.irfft($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=s.string.stringNGrams($("data",e,t,n),$("dataSplits",e,t,n),$("separator",e,t,n),$("nGramWidths",e,t,n),$("leftPad",e,t,n),$("rightPad",e,t,n),$("padWidth",e,t,n),$("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:i}=s.string.stringSplit($("input",e,t,n),$("delimiter",e,t,n),$("skipEmpty",e,t,n));return[r,a,i]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast($("input",e,t,n),$("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return r((()=>((e,t,n,s=k)=>{switch(e.op){case"Cast":return[s.cast($("x",e,t,n),$("dtype",e,t,n))];case"ExpandDims":{const r=$("axis",e,t,n);return[s.expandDims($("x",e,t,n),r)]}case"Squeeze":{const r=$("axis",e,t,n);return[s.squeeze($("x",e,t,n),r)]}case"Reshape":return[s.reshape($("x",e,t,n),$("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad($("x",e,t,n),$("padding",e,t,n),$("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad($("x",e,t,n),$("padding",e,t,n),$("constantValue",e,t,n))];case"SpaceToBatchND":{const r=$("blockShape",e,t,n),a=$("paddings",e,t,n);return[s.spaceToBatchND($("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=$("blockShape",e,t,n),a=$("crops",e,t,n);return[s.batchToSpaceND($("x",e,t,n),r,a)]}case"DepthToSpace":{const r=$("blockSize",e,t,n),a=$("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace($("x",e,t,n),r,a)]}case"BroadcastTo":return[s.broadcastTo($("x",e,t,n),$("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs($("s0",e,t,n),$("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=s.getHashTableHandleByName(e.name);if(null!=r)return[r];{const r=$("keyDType",e,t,n),a=$("valueDType",e,t,n),i=new Te(r,a);return s.addHashTable(e.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const r=$("tableHandle",e,t,n,s),a=$("keys",e,t,n),i=$("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=$("tableHandle",e,t,n,s),a=$("keys",e,t,n),i=$("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=$("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=C(e.op);if(a&&a.customExecutor)return a.customExecutor(new me(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return N.D5U.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class $e{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Ee(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const u=new Set,l=Object.keys(e).map((e=>R(e)[0]));let c=[];null!=s&&(c=s.map((e=>R(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(_e(e)||Fe(e)||Oe(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),h.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const Ae=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],De=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Re=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function _e(e){return Ae.indexOf(e.op)>=0}function Fe(e){return De.indexOf(e.op)>=0}function Oe(e){return Re.indexOf(e.op)>=0}class Me{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Me(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=Ee(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>R(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}(this.graph,this.weightMap,n)}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return(0,N.CnY)(t),t}cloneTensorList(e){return e?e.map((e=>this.cloneAndKeepTensor(e))):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[R(e)[0]])),r=t.map((e=>R(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));try{this.keepIntermediateTensors=(0,N.OBj)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},l={};return(0,N.lub)((()=>{const n=new $e(this.weightMap,u,l,this.functionExecutorMap),s=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[n,r]=R(t),a=[];a[r]=e[t],s[n]=a,this.keepIntermediateTensors&&(this.clonedTensorsMap[n]=this.cloneTensorList(a))}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=Ce(t,s,n,this._resourceManager);if(N.D5U.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.keepIntermediateTensors&&(this.clonedTensorsMap[t.name]=this.cloneTensorList(e)),this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>E(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[D(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,s={},r={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=(0,N.OBj)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const a=new $e(this.weightMap,s,r,this.functionExecutorMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>E(e,i,a))),u=o.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.values(i).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[R(e)[0]])),i=n.map((e=>R(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=Ee(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=R(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,u);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!_e(e)&&!E(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&$("isConstant",e.node,s,n)&&([c]=A(e.node.name,n)),null==s[e.node.name]){const h=Ce(e.node,s,n,this._resourceManager);c||([c]=A(e.node.name,n));const p=n.currentContext;N.D5U.isPromise(h)?l.push(h.then((l=>(s[c]=l,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(l)),n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,u),l)))):(s[c]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(h)),this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,u))}else this.processChildNodes(e.node,t,n,s,r,u)}return l}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=A(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!E(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!E(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=R(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));N.D5U.assert(t,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&N.D5U.assert(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const s={};for(const r in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[r];null!=a?s[a.name]=e[r]:s[r]=e[r]}return s}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=R(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=s?s.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=R(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Le{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Be{constructor(e,t={},n=N.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Le}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return N.D5U.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Me(ee.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=ee.Instance.transformGraph(e.modelInitializer);this.initializer=new Me(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t=e instanceof N.esB?[e]:e,n={};return t.forEach(((e,t)=>n[this.structuredOutputKeys[t]]=e)),n}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof N.esB||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const s=n[t];null!=s.resourceId&&(e[t]=this.resourceIdToCapturedInput[s.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce(((t,n)=>{var r,a,i;const o=null===(i=null===(a=null===(r=this.signature)||void 0===r?void 0:r.inputs)||void 0===a?void 0:a[n])||void 0===i?void 0:i.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[s++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let s=0;s<n.length;s++){const r=t[n[s]];this.resourceIdToCapturedInput[r.resourceId]=e[s]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&(0,N.B90)(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function ze(e,t={},n=N.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(e));const s=new Be(e,t,n);return await s.load(),s}const Ue="4.1.0"},8713:(e,t,n)=>{"use strict";n.d(t,{JL:()=>s,Zu:()=>r});class s{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class r{refCount(e){return a("refCount")}incRef(e){return a("incRef")}timerAvailable(){return!0}time(e){return a("time")}read(e){return a("read")}readSync(e){return a("readSync")}readToGPU(e,t){return a("readToGPU")}numDataIds(){return a("numDataIds")}disposeData(e,t){return a("disposeData")}write(e,t,n){return a("write")}move(e,t,n,s,r){return a("move")}createTensorFromTexture(e,t,n){return a("createTensorFromTexture")}memory(){return a("memory")}floatPrecision(){return a("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return a("dispose")}}function a(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3337:(e,t,n)=>{"use strict";function s(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||r)}(e,t,n),a=s<0?-(s+1):s;e.splice(a,0,t)}function r(e,t){return e>t?1:e<t?-1:0}function a(e,t,n,s,r){return u(e,t,n,s,r,0)}function i(e,t,n,s,r,a){return u(e,t,n,s,r,0,!1,a,!0)}function o(e,t,n,s,r,a){return u(e,t,n,s,r,a,!0)}function u(e,t,n,r,a,i,o=!1,u=!1,p=!1){const d=[];for(let e=0;e<t.length;e++)t[e]>a&&d.push({score:t[e],boxIndex:e,suppressBeginIndex:0});d.sort(h);const f=i>0?-.5/i:0,m=[],g=[];for(;m.length<n&&d.length>0;){const t=d.pop(),{score:n,boxIndex:i,suppressBeginIndex:o}=t;if(n<a)break;let u=!1;for(let n=m.length-1;n>=o;--n){const s=l(e,i,m[n]);if(s>=r){u=!0;break}if(t.score=t.score*c(r,f,s),t.score<=a)break}t.suppressBeginIndex=m.length,u||(t.score===n?(m.push(i),g.push(t.score)):t.score>a&&s(d,t,h))}const y=m.length,b=n-y;u&&b>0&&(m.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const x={selectedIndices:m};return o&&(x.selectedScores=g),p&&(x.validOutputs=y),x}function l(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),u=Math.max(s[1],s[3]),l=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function c(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function h(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>a,qP:()=>i,pA:()=>o})},8333:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var s=n(2657);function r(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=(0,s.f)(e,"int32"),a=(0,s.f)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),i=t*e.length;a.values.set(s,i)}return a.toTensor()}},7097:(e,t,n)=>{"use strict";n.d(t,{BV:()=>w,wv:()=>x});var s=n(8713),r=n(2885),a=n(5938),i=n(9121),o=n(6151),u=n(4706),l=n(9122),c=n(569);class h{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new d)}profileKernel(e,t,n){let s;const a=()=>{s=n()};let i;const o=l.now();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(a);else{a();for(const e of s)e.dataSync();i=Promise.resolve({kernelMs:l.now()-o})}if((0,r.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{p(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:i.then((e=>e.kernelMs)),extraInfo:i.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function p(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class d{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?c.oj(`${s}ms`,9):s.error,o=c.oj(e,25),u=t.rank,l=t.size,h=c.oj(t.shape.toString(),14);let p="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;p+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${h}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var f=n(4077),m=n(747);function g(e){return null!=e.kernelName}class y{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class b{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new y}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(u.Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new h(this.backendInstance),!0}setupRegisteredKernels(){(0,o.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,o.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof s.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,u.Z(`Initialization of backend ${e} failed`),u.Z(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return u.Z(`Initialization of backend ${e} failed`),u.Z(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return b.nextTensorId++}nextVariableId(){return b.nextVariableId++}clone(e){const t=w.runKernel(i.iJz,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return w.runKernel(i.RFZ,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==(0,o.pI)(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=g(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(g(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=(0,o.pI)(t,this.backendName);c.hu(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();u=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:h,attrs:p}=e,d=g(e)?null:e.backwardsFunc;let f;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(l,h,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=i()})),s&&this.addTapeNode(l,h,t,d,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map((e=>null!=h[e]?h[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const s=(0,o.uk)(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(c.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&c.HD(e[0])&&(r=e.map((e=>l.encodeString(e))));const a=s.write(r,t,n),i=new f.es(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=(0,c.Ub)(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new f.es(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new f._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*c.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof f._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*c.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},u=(0,o.uk)(e);null!=u&&(s=u.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=c.wT(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,m.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(c.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));c.hu(r instanceof f.es,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=(0,c.p8)((0,c.NA)(e),"float32");return w.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!c.cO(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),v);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return c.hu(c.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;c.hu(t.every((e=>e instanceof f.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),c.hu(n.value instanceof f.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),c.hu(c.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];c.hu(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),c.hu(a.every((e=>e instanceof f.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,l.now)(),n=await this.backend.time(e);return n.wallMs=(0,l.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new y;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function x(){const e=(0,a.D)();if(null==e._tfengine){const t=new r.qA(e);e._tfengine=new b(t)}return(0,r.iG)(e._tfengine.ENV),(0,f.Vi)((()=>e._tfengine)),e._tfengine}b.nextTensorId=0,b.nextVariableId=0;const w=x();function v(e,t){const n={a:e,b:t};return w.runKernel(i.mm_,n)}},2885:(e,t,n)=>{"use strict";n.d(t,{OB:()=>o,iG:()=>l,qA:()=>a});var s=n(569);const r="tfjsflags";class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=i,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,s.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);r in e&&e[r].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function i(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function o(){return u}let u=null;function l(e){u=e}},5938:(e,t,n)=>{"use strict";let s;function r(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function a(e,t){const n=function(){const e=r();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}n.d(t,{D:()=>r,R:()=>a})},4368:(e,t,n)=>{"use strict";n.d(t,{B9:()=>c,Cn:()=>h,SR:()=>o,jq:()=>p,lu:()=>l,sq:()=>u,y3:()=>d});var s=n(7097),r=n(2885),a=n(4077),i=n(747);function o(){return s.BV}function u(){return s.BV.memory()}function l(e,t){return s.BV.tidy(e,t)}function c(e){(0,i.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function h(e){return s.BV.keep(e)}function p(e,t,n=1){return s.BV.registerBackend(e,t,n)}function d(){return s.BV.backend}(0,a.FZ)((function(e){(0,r.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}))},633:(e,t,n)=>{"use strict";n.d(t,{cb:()=>o,pn:()=>i});var s=n(7097),r=n(4077),a=n(569);function i(e,t){a.hu(a.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),a.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof r._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in s.BV.registeredVariables)t.push(s.BV.registeredVariables[e])}const i=n?t.filter((e=>!e.trainable)):null,o=t.length;t=t.filter((e=>e.trainable)),a.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`));const{value:u,grads:l}=s.BV.gradients(e,t,null,!0);a.hu(l.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),a.hu(0===u.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=l[t]&&(c[e.name]=l[t])})),null!=i&&i.forEach((e=>c[e.name]=null)),{value:u,grads:c}}function o(e){return s.BV.customGrad(e)}},8763:(e,t,n)=>{"use strict";n.d(t,{SYM:()=>Mn.SYM,VGw:()=>Mn.VGw,SpW:()=>Mn.SpW,mm_:()=>Mn.mm_,Xze:()=>Mn.Xze,oT6:()=>Mn.oT6,IKK:()=>Mn.IKK,sJF:()=>Mn.sJF,aJk:()=>Mn.aJk,M2y:()=>Mn.M2y,qw7:()=>Mn.qw7,jMg:()=>Mn.jMg,QCc:()=>Mn.QCc,Oyi:()=>Mn.Oyi,JhU:()=>Mn.JhU,_k9:()=>Mn._k9,IMb:()=>Mn.IMb,ROF:()=>Mn.ROF,XLW:()=>Mn.XLW,zws:()=>Mn.zws,zvY:()=>Mn.zvY,eEB:()=>Mn.eEB,RFZ:()=>Mn.RFZ,gJX:()=>Mn.gJX,xnO:()=>Mn.xnO,Zz9:()=>Mn.Zz9,yj2:()=>Mn.yj2,Eh3:()=>Mn.Eh3,mhS:()=>Mn.mhS,wUP:()=>Mn.wUP,wm:()=>Mn.wm,x12:()=>Mn.x12,o2y:()=>Mn.o2y,ik2:()=>Mn.ik2,mc4:()=>Mn.mc4,TR1:()=>Mn.TR1,VcC:()=>Mn.VcC,Byc:()=>Mn.Byc,iHb:()=>Mn.iHb,JLz:()=>On.JL,QRR:()=>Mn.QRR,T0n:()=>Mn.T0n,cie:()=>Mn.cie,sL$:()=>Mn.sL$,y7R:()=>Mn.y7R,$w:()=>Mn.$w,p4S:()=>Mn.p4S,Vn9:()=>Mn.Vn9,ekb:()=>Mn.ekb,$g6:()=>Mn.$g6,SX0:()=>Mn.SX0,HEU:()=>Mn.HEU,hdR:()=>Mn.hdR,Omj:()=>Mn.Omj,NEP:()=>Mn.NEP,YFo:()=>Mn.YFo,Y0y:()=>Mn.Y0y,vwp:()=>Mn.vwp,deh:()=>Mn.deh,Uyb:()=>Mn.Uyb,OR:()=>Mn.OR,jeX:()=>Mn.jeX,eBW:()=>Mn.eBW,sHE:()=>Mn.sHE,_V0:()=>Mn._V0,luS:()=>Mn.luS,q1x:()=>Mn.q1x,qi_:()=>Mn.qi_,iZT:()=>Mn.iZT,Acj:()=>Mn.Acj,Qg5:()=>Mn.Qg5,iJz:()=>Mn.iJz,J_u:()=>Mn.J_u,avt:()=>Mn.avt,iWB:()=>Mn.iWB,r7n:()=>Mn.r7n,Zuw:()=>On.Zu,eZ0:()=>Mn.eZ0,Hhh:()=>Mn.Hhh,J$2:()=>Mn.J$2,vtC:()=>Mn.vtC,CAk:()=>Mn.CAk,e7N:()=>Mn.e7N,ZbH:()=>Mn.ZbH,kU:()=>Mn.kU,PYm:()=>Mn.PYm,VfG:()=>Mn.VfG,MZg:()=>Mn.MZg,YoZ:()=>Mn.YoZ,mTV:()=>Mn.mTV,OAf:()=>Mn.OAf,OU7:()=>Mn.OU7,OV7:()=>Mn.OV7,vFR:()=>Mn.vFR,BMI:()=>Mn.BMI,q2K:()=>Mn.q2K,c17:()=>Mn.c17,q8u:()=>Mn.q8u,jQs:()=>Mn.jQs,Vbg:()=>Mn.Vbg,NZg:()=>Mn.NZg,wYn:()=>Mn.wYn,kuV:()=>Mn.kuV,uv1:()=>Mn.uv1,cye:()=>Mn.cye,W0H:()=>Mn.W0H,yQU:()=>Mn.yQU,we_:()=>Mn.we_,qWM:()=>Mn.qWM,gaJ:()=>Ze,QiL:()=>Mn.QiL,lyA:()=>Mn.lyA,pe_:()=>Mn.pe_,o0g:()=>Mn.o0g,DlI:()=>Mn.DlI,dDz:()=>Mn.dDz,CQl:()=>Mn.CQl,BiW:()=>Mn.BiW,e6w:()=>Mn.e6w,xJR:()=>Mn.xJR,oHH:()=>Mn.oHH,$HU:()=>Mn.$HU,qkr:()=>Mn.qkr,SbG:()=>Mn.SbG,HZH:()=>Mn.HZH,_Yw:()=>Mn._Yw,zbQ:()=>Mn.zbQ,dpD:()=>Mn.dpD,Hmb:()=>Mn.Hmb,mKl:()=>Mn.mKl,b9H:()=>Mn.b9H,e07:()=>Mn.e07,bV0:()=>Mn.bV0,xQA:()=>Mn.xQA,nr8:()=>Mn.nr8,PhF:()=>Mn.PhF,oFR:()=>Mn.oFR,a5O:()=>Mn.a5O,i5y:()=>Mn.i5y,RQH:()=>Mn.RQH,wYB:()=>Mn.wYB,p2w:()=>Mn.p2w,Gcp:()=>Mn.Gcp,MRv:()=>Mn.MRv,TQc:()=>Mn.TQc,O3z:()=>Mn.O3z,nhH:()=>Mn.nhH,w3H:()=>Mn.w3H,ZjV:()=>Mn.ZjV,D2d:()=>Mn.D2d,L8s:()=>Mn.L8s,FKq:()=>Mn.FKq,bK0:()=>Mn.bK0,_tC:()=>Mn._tC,h8e:()=>Mn.h8e,jQk:()=>Mn.jQk,_JP:()=>Mn._JP,s1s:()=>Mn.s1s,XkS:()=>Mn.XkS,Tr8:()=>Mn.Tr8,GBy:()=>Mn.GBy,sEM:()=>Mn.sEM,MIZ:()=>Mn.MIZ,esB:()=>xe.es,YDk:()=>xe.YD,n9L:()=>Mn.n9L,cWu:()=>Mn.cWu,wx7:()=>Mn.wx7,G3Y:()=>Mn.G3Y,kpP:()=>Mn.kpP,ToN:()=>Mn.ToN,Qvg:()=>Mn.Qvg,RuY:()=>Mn.RuY,usg:()=>Mn.usg,WnP:()=>et.WnP,IHx:()=>et.IHx,$6P:()=>et.$6P,YjB:()=>et.YjB,NqF:()=>et.NqF,wS1:()=>et.wS1,uR5:()=>et.uR5,y3$:()=>Ke.y3,Wap:()=>o,Dxk:()=>et.Dxk,JY5:()=>et.JY5,p3b:()=>et.p3b,UFq:()=>et.UFq,Jyw:()=>We,f3b:()=>et.f3b,pju:()=>et.pju,iUl:()=>et.iUl,d9v:()=>et.d9v,zoF:()=>et.zoF,gME:()=>et.gME,Izb:()=>et.Izb,MNy:()=>et.MNy,ZaL:()=>et.ZaL,PAt:()=>et.PAt,Tek:()=>et.Tek,bc:()=>et.bc,pdZ:()=>et.pdZ,$QV:()=>et.$QV,ppE:()=>et.ppE,B10:()=>et.B10,C2$:()=>s,B90:()=>Ke.B9,hiC:()=>et.hiC,rvX:()=>et.rvX,pyx:()=>et.pyx,SRH:()=>Ke.SR,OBj:()=>f.OB,DgJ:()=>et.DgJ,Qqt:()=>et.Qqt,dt4:()=>et.dt4,iyy:()=>et.iyy,hlL:()=>et.hlL,GWj:()=>et.GWj,imm:()=>et.imm,Iqj:()=>et.Iqj,pjt:()=>et.pjt,brS:()=>et.brS,BHj:()=>et.BHj,io:()=>r,CnY:()=>Ke.Cn,GDt:()=>u,hi7:()=>et.hi7,$r2:()=>et.$r2,cM7:()=>et.cM7,Krr:()=>et.Krr,CmS:()=>et.CmS,HvI:()=>et.HvI,OI3:()=>et.OI3,Fp7:()=>et.Fp7,_sB:()=>et._sB,YQQ:()=>et.YQQ,gWQ:()=>et.gWQ,J69:()=>et.J69,sq6:()=>Ke.sq,VV$:()=>et.VV$,LTh:()=>et.LTh,Gi7:()=>et.Gi7,dC7:()=>et.dC7,W76:()=>et.W76,glt:()=>It,Quu:()=>et.Quu,lfX:()=>et.lfX,iUs:()=>et.iUs,JpU:()=>et.JpU,vku:()=>et.vku,AL3:()=>et.AL3,nGf:()=>et.nGf,LGj:()=>et.LGj,w6H:()=>et.w6H,jqO:()=>Ke.jq,wCN:()=>vt.wC,UYe:()=>et.UYe,XLQ:()=>et.XLQ,GYS:()=>et.GYS,iD$:()=>et.iD$,U8D:()=>et.U8D,U_I:()=>et.U_I,m7h:()=>a,XD2:()=>et.XD2,tPi:()=>et.tPi,jZU:()=>et.jZU,SmN:()=>et.SmN,CnO:()=>et.CnO,p0P:()=>et.p0P,kuN:()=>Pe,XAC:()=>et.XAC,Wvh:()=>et.Wvh,Vl2:()=>et.Vl2,_b3:()=>et._b3,L9e:()=>et.L9e,knu:()=>et.knu,luU:()=>et.luU,Smz:()=>et.Smz,z4k:()=>Je.z4,AEp:()=>et.AEp,XeE:()=>et.XeE,RRF:()=>et.RRF,piX:()=>je,lub:()=>Ke.lu,Gg6:()=>et.Gg6,p_j:()=>wt,p4s:()=>et.p4s,Xu6:()=>et.Xu6,HHK:()=>et.HHK,x8V:()=>Je.x8,D5U:()=>Xe,VD$:()=>et.VD$,jTM:()=>qe,arb:()=>et.arb,lls:()=>et.lls,P84:()=>et.P84});var s={};n.r(s),n.d(s,{isBrowser:()=>d,isMobile:()=>p,mockIsMobile:()=>h});var r={};n.r(r),n.d(r,{browserFiles:()=>Se,browserHTTPRequest:()=>_e,concatenateArrayBuffers:()=>N,copyModel:()=>he,decodeWeights:()=>v,encodeWeights:()=>w,fromMemory:()=>Le,fromMemorySync:()=>Be,getLoadHandlers:()=>L,getModelArtifactsForJSON:()=>E,getModelArtifactsForJSONSync:()=>$,getModelArtifactsInfoForJSON:()=>A,getSaveHandlers:()=>M,getWeightSpecs:()=>D,http:()=>Re,isHTTPScheme:()=>Ae,listModels:()=>le,loadWeights:()=>Ce,moveModel:()=>pe,registerLoadRouter:()=>O,registerSaveRouter:()=>F,removeModel:()=>ce,weightsLoaderFactory:()=>$e,withSaveHandler:()=>ze,withSaveHandlerSync:()=>Ue});var a={};n.r(a),n.d(a,{Serializable:()=>Ve,SerializationMap:()=>Ge,registerClass:()=>He});var i={};n.r(i),n.d(i,{collectGatherOpShapeInfo:()=>An,computeOutShape:()=>En,segOpComputeOptimalWindowSize:()=>$n});var o={};n.r(o),n.d(o,{ERF_A1:()=>jt,ERF_A2:()=>Xt,ERF_A3:()=>qt,ERF_A4:()=>Kt,ERF_A5:()=>Yt,ERF_P:()=>Ht,PARALLELIZE_THRESHOLD:()=>Ft,RowPartitionType:()=>Ct,SELU_SCALE:()=>Gt.$,SELU_SCALEALPHA:()=>Gt.y,applyActivation:()=>Et.QH,assertAndGetBroadcastShape:()=>We.assertAndGetBroadcastShape,assertAxesAreInnerMostDims:()=>St.lB,assertParamsConsistent:()=>Nt,assignToTypedArray:()=>sn,axesAreInnerMostDims:()=>St.YB,calculateShapes:()=>Vt.SU,checkEinsumDimSizes:()=>hn,checkPadOnDimRoundingMode:()=>$t.m,combineLocations:()=>St.Vh,combineRaggedTensorToTensorShapes:()=>At,complexWithEvenIndex:()=>en,complexWithOddIndex:()=>tn,computeConv2DInfo:()=>$t.Ix,computeConv3DInfo:()=>$t.jw,computeDefaultPad:()=>$t.aO,computeDilation2DInfo:()=>$t.Rf,computeOptimalWindowSize:()=>Ot,computeOutAndReduceShapes:()=>St.kz,computeOutShape:()=>Tt,computePool2DInfo:()=>$t.Xw,computePool3DInfo:()=>$t.pl,convertConv2DDataFormat:()=>$t.sl,decodeEinsumEquation:()=>ln,eitherStridesOrDilationsAreOne:()=>$t.jT,expandShapeToKeepDim:()=>St.rv,exponent:()=>an,exponents:()=>rn,fromStringArrayToUint8:()=>Rn,fromUint8ToStringArray:()=>Dn,getAxesPermutation:()=>St.Q3,getBroadcastDims:()=>We.getBroadcastDims,getComplexWithIndex:()=>nn,getEinsumComputePath:()=>pn,getEinsumPermutation:()=>cn,getFusedBiasGradient:()=>Et.pf,getFusedDyActivation:()=>Et.Fr,getImageCenter:()=>Mt,getInnerMostAxes:()=>St.sY,getPermuted:()=>Bt,getRaggedRank:()=>Rt,getReductionAxes:()=>We.getReductionAxes,getReshaped:()=>Lt,getReshapedPermuted:()=>zt,getRowPartitionTypesHelper:()=>Dt,getSliceBeginCoords:()=>Ut,getSliceSize:()=>Wt,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>gn,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>yn,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>bn,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>vn,getSparseReshapeInputOutputMismatchErrorMessage:()=>In,getSparseReshapeInputOutputMultipleErrorMessage:()=>kn,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>xn,getSparseReshapeNegativeOutputDimErrorMessage:()=>wn,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Cn,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Sn,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Nn,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Tn,getUndoAxesPermutation:()=>St.LJ,isIdentityPermutation:()=>dn,log:()=>Qt.c,mergeRealAndImagArrays:()=>Zt,prepareAndValidate:()=>Pt,prepareSplitSize:()=>mn,segment_util:()=>i,shouldFuse:()=>Et.uy,slice_util:()=>Pe,splitRealAndImagArrays:()=>Jt,tupleValuesAreOne:()=>$t.I0,upcastType:()=>Je.x8,validateDefaultValueShape:()=>_t,validateInput:()=>Vt.b0,validateUpdateShape:()=>Vt.l5,warn:()=>Qt.Z});var u={};n.r(u),n.d(u,{GP:()=>_n.GP,qP:()=>_n.qP,pA:()=>_n.pA,ZA:()=>Fn.Z});var l=n(7097);let c;function h(e){c=e}function p(e){if(void 0!==c)return c;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function d(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var f=n(2885);const m=(0,f.OB)();m.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),m.registerFlag("IS_BROWSER",(()=>d())),m.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),m.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),m.registerFlag("PROD",(()=>!1)),m.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>m.getBool("DEBUG"))),m.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),m.registerFlag("IS_TEST",(()=>!1)),m.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),m.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),m.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),m.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));var g=n(1661),y=n(701),b=n(569);const x={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function w(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:k(await Promise.all(s)),specs:n}}function v(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,u=(0,b.NA)(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=x[n.dtype],c=e.slice(r,r+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=R()),l=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=Math.round(t*n.scale+n.min)}}r+=u*o}else if("string"===i){const t=(0,b.NA)(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));l.push(n),r+=t}}else{const s=x[i],a=e.slice(r,r+u*s);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),s=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],s[t]=l[2*t+1];const r=(0,y.X)(e,o,"float32"),i=(0,y.X)(s,o,"float32");n[t]=(0,g.P)(r,i),r.dispose(),i.dispose()}}r+=u*s}"complex64"!==i&&(n[t]=(0,y.X)(l,o,i))}return n}function k(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const I="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function S(e){return I?Buffer.byteLength(e):new Blob([e]).size}function N(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function T(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function C(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function $(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function E(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),$(e,n,s)}function A(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:S(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:S(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function D(e){const t=[];for(const n of e)t.push(...n.weights);return t}function R(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class _{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==_.instance&&(_.instance=new _),_.instance}static registerSaveRouter(e){_.getInstance().saveRouters.push(e)}static registerLoadRouter(e){_.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return _.getHandlers(e,"save")}static getLoadHandlers(e,t){return _.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?_.getInstance().loadRouters:_.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const F=e=>_.registerSaveRouter(e),O=e=>_.registerLoadRouter(e),M=e=>_.getSaveHandlers(e),L=(e,t)=>_.getLoadHandlers(e,t),B="tensorflowjs",z="models_store",U="model_info_store";function W(){if(!(0,f.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function P(e){const t=e.result;t.createObjectStore(z,{keyPath:"modelPath"}),t.createObjectStore(U,{keyPath:"modelPath"})}class V{constructor(e){if(this.indexedDB=W(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(B,1);s.onupgradeneeded=()=>P(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(z,"readonly"),s=t.objectStore(z).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=A(t),a=r.transaction(U,"readwrite");let i=a.objectStore(U);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let u;o.onsuccess=()=>{u=r.transaction(z,"readwrite");const o=u.objectStore(z).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(U);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==u?r.close():u.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}V.URL_SCHEME="indexeddb://";const G=e=>{return(0,f.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(V.URL_SCHEME)?(t=e.slice(V.URL_SCHEME.length),new V(t)):null;var t};_.registerSaveRouter(G),_.registerLoadRouter(G);class H{constructor(){this.indexedDB=W()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(B,1);n.onupgradeneeded=()=>P(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(U,"readonly"),a=r.objectStore(U).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(V.URL_SCHEME)?t.slice(V.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(B,1);s.onupgradeneeded=()=>P(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(U,"readwrite"),i=a.objectStore(U),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{u=r.transaction(z,"readwrite");const s=u.objectStore(z).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==u?r.close():u.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const j="/",X="tensorflowjs_models",q="info",K="model_topology",Y="weight_specs",Q="weight_data",Z="model_metadata";function J(e){return{info:[X,e,q].join(j),topology:[X,e,K].join(j),weightSpecs:[X,e,Y].join(j),weightData:[X,e,Q].join(j),modelMetadata:[X,e,Z].join(j)}}function ee(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function te(e){const t=e.split(j);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(j)}class ne{constructor(e){if(!(0,f.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=J(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=A(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(I)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw ee(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(I){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}ne.URL_SCHEME="localstorage://";const se=e=>{return(0,f.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ne.URL_SCHEME)?(t=e.slice(ne.URL_SCHEME.length),new ne(t)):null;var t};_.registerSaveRouter(se),_.registerLoadRouter(se);class re{constructor(){(0,b.hu)((0,f.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,b.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=X+j,n=j+q;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[te(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=J(e=(t=e).startsWith(ne.URL_SCHEME)?t.slice(ne.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return ee(n),s}}const ae="://";class ie{constructor(){this.managers={}}static getInstance(){return null==ie.instance&&(ie.instance=new ie),ie.instance}static registerManager(e,t){(0,b.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ae)&&(e=e.slice(0,e.indexOf(ae))),(0,b.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=ie.getInstance();(0,b.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=ie.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(ie.getInstance().managers)}}function oe(e){if(-1===e.indexOf(ae))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ie.getSchemes().join(",")}`);return{scheme:e.split(ae)[0],path:e.split(ae)[1]}}async function ue(e,t,n=!1){(0,b.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=_.getLoadHandlers(e);(0,b.hu)(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,b.hu)(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=_.getSaveHandlers(t);(0,b.hu)(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,b.hu)(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=oe(e).scheme,u=oe(e).path,l=o===oe(e).scheme,c=await r.load();n&&l&&await ie.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await ie.getManager(o).removeModel(u),h.modelArtifactsInfo}async function le(){const e=ie.getSchemes(),t={};for(const n of e){const e=await ie.getManager(n).listModels();for(const s in e)t[n+ae+s]=e[s]}return t}async function ce(e){const t=oe(e);return ie.getManager(t.scheme).removeModel(t.path)}async function he(e,t){return ue(e,t,!1)}async function pe(e,t){return ue(e,t,!0)}class de{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&(0,f.OB)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}}if((0,f.OB)().get("IS_BROWSER")){(0,f.OB)().setPlatform("browser",new de);try{ie.registerManager(ne.URL_SCHEME,new re)}catch(e){}try{ie.registerManager(V.URL_SCHEME,new H)}catch(e){}}let fe;(0,f.OB)().get("IS_NODE")&&!(0,f.OB)().get("IS_BROWSER")&&(0,f.OB)().setPlatform("node",new class{constructor(){this.util=n(8628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,f.OB)().global.fetch?(0,f.OB)().global.fetch(e,t):(null==fe&&(fe=n(5410)),fe(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});var me=n(2657),ge=n(2271),ye=n(8723),be=n(9798),xe=n(4077);(0,l.wv)();const we={buffer:me.f,cast:ge.p,clone:ye.d,print:be.S};function ve(e){return new Promise((e=>setTimeout(e))).then(e)}(0,xe.Vp)(we);class ke{constructor(e){if(!(0,f.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ke.URL_SCHEME)&&(e=e.slice(ke.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=C(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await ve((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await ve((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:A(e)}}}}ke.URL_SCHEME="downloads://";class Ie{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=E(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,N(e)]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>T(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=T(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function Se(e){return new Ie(e)}function Ne(e,t,n,s){!function(e){(0,b.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,b.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,b.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,b.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function Te(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,f.OB)().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Ne(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Ne(r,t.onProgress,.5,1)}async function Ce(e,t="",n,s){return $e((e=>Te(e,{requestInit:s})))(e,t,n)}function $e(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=x[u]*b.NA(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=l}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const u=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),h={};let p=0;return u.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=v(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}_.registerSaveRouter((e=>(0,f.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ke.URL_SCHEME)?function(e="model"){return new ke(e)}(e.slice(ke.URL_SCHEME.length)):null));class Ee{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,b.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,f.OB)().platform.fetch,(0,b.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,b.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=C(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:A(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return E(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=D(e),i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,N(await Te(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ae(e){return null!=e.match(Ee.URL_SCHEME_REGEX)}Ee.URL_SCHEME_REGEX=/^https?:\/\//;const De=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ae(e))):Ae(e),n)return Re(e,t)}return null};function Re(e,t){return new Ee(e,t)}function _e(e,t){return Re(e,t)}_.registerSaveRouter(De),_.registerLoadRouter(De);class Fe{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Oe{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Me{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Le(e,t,n,s){const r=arguments;return new Me(Be(...r))}function Be(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Fe(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Fe({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Fe({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function ze(e){return new Oe(e)}function Ue(e){return new Oe(e)}var We=n(2200),Pe=n(7650);class Ve{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ge{constructor(){this.classNameMap={}}static getMap(){return null==Ge.instance&&(Ge.instance=new Ge),Ge.instance}static register(e){Ge.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function He(e){(0,b.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,b.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,b.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ge.register(e)}var je=n(747),Xe=n(9122);const qe="4.1.0";var Ke=n(4368),Ye=n(633),Qe=n(9494);class Ze extends Ve{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return(0,Ke.B9)(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,Ye.pn)(e,t)}dispose(){null!=this.iterations_&&(0,Ke.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Qe.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ze,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});var Je=n(1221),et=n(1710),tt=n(6407),nt=n(1274),st=n(4841),rt=n(3261),at=n(248),it=n(6577);class ot extends Ze{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=l.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=l.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,Ke.lu)((()=>(0,it.P)(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,Ke.lu)((()=>(0,it.P)(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;(0,Ke.lu)((()=>{const e=(0,tt.I)((0,st.d)(a,this.rho),(0,st.d)((0,at.h)(r),1-this.rho)),t=(0,st.d)((0,nt.h)((0,rt._)((0,tt.I)(i,this.epsilon)),(0,rt._)((0,tt.I)(a,this.epsilon))),r),n=(0,tt.I)((0,st.d)(i,this.rho),(0,st.d)((0,at.h)(t),1-this.rho));a.assign(e),i.assign(n);const o=(0,tt.I)((0,st.d)(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,Ke.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,Ke.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}ot.className="Adadelta",He(ot);var ut=n(4006);class lt extends Ze{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=l.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,Ke.lu)((()=>(0,ut.h)(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;(0,Ke.lu)((()=>{const e=(0,tt.I)(a,(0,at.h)(r));a.assign(e);const t=(0,tt.I)((0,st.d)((0,nt.h)(r,(0,rt._)((0,tt.I)(e,l.BV.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,Ke.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}lt.className="Adagrad",He(lt);var ct=n(3453),ht=n(827);class pt extends Ze{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,Ke.lu)((()=>{this.accBeta1=(0,Qe.i)(t).variable(),this.accBeta2=(0,Qe.i)(n).variable()})),null==s&&(this.epsilon=l.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Ke.lu)((()=>{const n=(0,ht.l)(1,this.accBeta1),s=(0,ht.l)(1,this.accBeta2);t.forEach(((t,r)=>{const a=l.BV.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:(0,Ke.lu)((()=>(0,it.P)(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:(0,Ke.lu)((()=>(0,it.P)(a).variable(!1)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,u=this.accumulatedSecondMoment[r].variable,c=(0,tt.I)((0,st.d)(o,this.beta1),(0,st.d)(i,1-this.beta1)),h=(0,tt.I)((0,st.d)(u,this.beta2),(0,st.d)((0,at.h)(i),1-this.beta2)),p=(0,nt.h)(c,n),d=(0,nt.h)(h,s);o.assign(c),u.assign(h);const f=(0,tt.I)((0,st.d)((0,nt.h)(p,(0,tt.I)((0,rt._)(d),this.epsilon)),-this.learningRate),a);a.assign(f)})),this.accBeta1.assign((0,st.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,st.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,Ke.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,Ke.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,Ke.lu)((()=>{this.accBeta1.assign((0,ct.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,ct.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}pt.className="Adam",He(pt);var dt=n(6235),ft=n(632);class mt extends Ze{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,Ke.lu)((()=>{this.iteration=(0,Qe.i)(0).variable(),this.accBeta1=(0,Qe.i)(t).variable()})),null==s&&(this.epsilon=l.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Ke.lu)((()=>{const n=(0,ht.l)(1,this.accBeta1),s=(0,nt.h)(-this.learningRate,(0,tt.I)((0,st.d)(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=l.BV.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:(0,it.P)(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:(0,it.P)(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,u=this.accumulatedWeightedInfNorm[r].variable,c=(0,tt.I)((0,st.d)(o,this.beta1),(0,st.d)(i,1-this.beta1)),h=(0,st.d)(u,this.beta2),p=(0,dt.W)(i),d=(0,ft.g)(h,p);o.assign(c),u.assign(d);const f=(0,tt.I)((0,st.d)((0,nt.h)(s,n),(0,nt.h)(c,(0,tt.I)(d,this.epsilon))),a);a.assign(f)})),this.iteration.assign((0,tt.I)(this.iteration,1)),this.accBeta1.assign((0,st.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,Ke.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,Ke.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}mt.className="Adamax",He(mt);class gt extends Ze{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=l.BV.registeredVariables[t];(0,Ke.lu)((()=>{const e=(0,tt.I)((0,st.d)(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,Ke.Cn)((0,Qe.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}gt.className="SGD",He(gt);class yt extends gt{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Qe.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=l.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,Ke.lu)((()=>(0,it.P)(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&(0,Ke.lu)((()=>{let e;const t=(0,tt.I)((0,st.d)(this.m,r),a);e=this.useNesterov?(0,tt.I)((0,st.d)(this.c,(0,tt.I)(a,(0,st.d)(t,this.m))),s):(0,tt.I)((0,st.d)(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,Ke.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}yt.className="Momentum",He(yt);class bt extends Ze{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=l.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=l.BV.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,Ke.lu)((()=>(0,it.P)(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,Ke.lu)((()=>(0,it.P)(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,Ke.lu)((()=>(0,it.P)(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;(0,Ke.lu)((()=>{const e=(0,tt.I)((0,st.d)(i,this.decay),(0,st.d)((0,at.h)(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=(0,tt.I)((0,st.d)(t,this.decay),(0,st.d)(a,1-this.decay)),u=(0,nt.h)((0,st.d)(a,this.learningRate),(0,rt._)((0,ht.l)(e,(0,tt.I)((0,at.h)(r),this.epsilon)))),l=(0,tt.I)((0,st.d)(o,this.momentum),u);i.assign(e),t.assign(r),o.assign(l);const c=(0,ht.l)(s,l);s.assign(c)}else{const e=(0,tt.I)((0,st.d)(i,this.decay),(0,st.d)((0,at.h)(a),1-this.decay)),t=(0,tt.I)((0,st.d)(o,this.momentum),(0,nt.h)((0,st.d)(a,this.learningRate),(0,rt._)((0,tt.I)(e,this.epsilon))));i.assign(e),o.assign(t);const n=(0,ht.l)(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,Ke.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,Ke.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,Ke.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}bt.className="RMSProp",He(bt);class xt{static sgd(e){return new gt(e)}static momentum(e,t,n=!1){return new yt(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new bt(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new pt(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new ot(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new mt(e,t,n,s,r)}static adagrad(e,t=.1){return new lt(e,t)}}const wt={sgd:xt.sgd,momentum:xt.momentum,adadelta:xt.adadelta,adagrad:xt.adagrad,rmsprop:xt.rmsprop,adamax:xt.adamax,adam:xt.adam};var vt=n(6151);const kt="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function It(){return new Promise((e=>kt((()=>e()))))}var St=n(3591);function Nt(e,t){const n=e[0].length;e.forEach(((e,t)=>{b.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),b.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)b.hu(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Tt(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var Ct,$t=n(2582),Et=n(9323);function At(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],i=s[s.length-n.length+r],o=s[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${o}`)}else s[i]=a}return s}function Dt(e){const t={FIRST_DIM_SIZE:Ct.FIRST_DIM_SIZE,VALUE_ROWIDS:Ct.VALUE_ROWIDS,ROW_LENGTHS:Ct.ROW_LENGTHS,ROW_SPLITS:Ct.ROW_SPLITS,ROW_LIMITS:Ct.ROW_LIMITS,ROW_STARTS:Ct.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function Rt(e){return 0===e.length?0:e[0]===Ct.FIRST_DIM_SIZE?e.length-1:e.length}function _t(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Ct||(Ct={}));const Ft=30;function Ot(e){return e<=Ft?e:(0,b.jP)(e,Math.floor(Math.sqrt(e)))}function Mt(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Lt(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Bt(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function zt(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Ut(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Wt(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}function Pt(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===(0,b.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,u=r.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=o[e],u.push(o[e]);const c=[...(0,b.e3)(e.shape).map((e=>e/l)),1].slice(0,a);return[u,i,l,c]}var Vt=n(3028),Gt=n(3179);const Ht=.3275911,jt=.254829592,Xt=-.284496736,qt=1.421413741,Kt=-1.453152027,Yt=1.061405429;var Qt=n(4706);function Zt(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Jt(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function en(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function tn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function nn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function sn(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function rn(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function an(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const on="->",un=/->/g;function ln(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(un,"").length)/on.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${on}").`);const[s,r]=e.split(on);(0,b.hu)(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const u=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(o.indexOf(a[e][t]))}const l=o.length,c=[];for(let e=r.length;e<l;++e)c.push(e);return{allDims:o,summedDims:c,idDims:u}}function cn(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function hn(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:(0,b.hu)(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function pn(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=fn(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function dn(e){return e.every(((e,t)=>e===t))}function fn(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function mn(e,t,n=0){let s=[];if("number"==typeof t)(0,b.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,b.hu)(r<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}(0,b.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function gn(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function yn(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function bn(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function xn(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function wn(e,t){return`size ${e} must be non-negative, not ${t}`}function vn(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function kn(e,t){return`Input to reshape is a SparseTensor with ${(0,b.NA)(e)}\n  dense values, but the requested shape requires a multiple of ${(0,b.NA)(t)}. inputShape=${e} outputShape= ${t}`}function In(e,t){return`Input to reshape is a tensor with ${(0,b.NA)(e)} dense values, but the requested shape has ${(0,b.NA)(t)}. inputShape=${e} outputShape=${t}`}function Sn(){return"segment ids must be >= 0"}function Nn(){return"segment ids are not increasing"}function Tn(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Cn(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function $n(e,t){let n,s=!1;for(e<=Ft?(n=e,s=!0):n=(0,b.jP)(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=(0,b.jP)(e,n+1);return n}function En(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function An(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),u*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),l*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function Dn(e){try{return e.map((e=>(0,Xe.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Rn(e){return e.map((e=>(0,Xe.encodeString)(e)))}var _n=n(3337),Fn=n(8333),On=n(8713),Mn=n(9121)},9121:(e,t,n)=>{"use strict";n.d(t,{$HU:()=>pt,$g6:()=>J,$w:()=>q,Acj:()=>ge,BMI:()=>Me,BiW:()=>lt,Byc:()=>U,CAk:()=>Ne,CQl:()=>ut,D2d:()=>Pt,DlI:()=>it,Eh3:()=>D,FKq:()=>_t,G3Y:()=>tn,GBy:()=>Ft,Gcp:()=>Lt,HEU:()=>te,HZH:()=>ft,Hhh:()=>Fe,Hmb:()=>gt,IKK:()=>l,IMb:()=>w,J$2:()=>Ie,J_u:()=>xe,JhU:()=>y,L8s:()=>Mt,Ly9:()=>S,M2y:()=>p,MIZ:()=>Qt,MRv:()=>Rt,MZg:()=>De,NEP:()=>re,NZg:()=>Xe,O3z:()=>Bt,OAf:()=>ze,OR:()=>ce,OU7:()=>Ue,OV7:()=>Be,Omj:()=>ne,Oyi:()=>m,PYm:()=>Ee,PhF:()=>Nt,QCc:()=>g,QRR:()=>V,Qg5:()=>be,QiL:()=>nt,Qvg:()=>rn,RFZ:()=>T,ROF:()=>b,RQH:()=>$t,RuY:()=>an,SX0:()=>ee,SYM:()=>s,SbG:()=>xt,SpW:()=>a,T0n:()=>G,TQc:()=>Ot,TR1:()=>z,ToN:()=>sn,Tr8:()=>Kt,Uyb:()=>le,VGw:()=>r,Vbg:()=>je,VcC:()=>P,VfG:()=>Ae,Vn9:()=>Q,W0H:()=>Je,XLW:()=>v,XkS:()=>qt,Xze:()=>o,Y0y:()=>ie,YFo:()=>ae,YoZ:()=>Oe,ZbH:()=>Ce,ZjV:()=>Wt,Zz9:()=>E,_JP:()=>jt,_V0:()=>hn,_Yw:()=>yt,_k9:()=>x,_tC:()=>Vt,a5O:()=>Dt,aJk:()=>h,avt:()=>we,b9H:()=>ln,bK0:()=>Gt,bV0:()=>kt,c17:()=>Ve,cWu:()=>Jt,cie:()=>H,cye:()=>Ze,dDz:()=>ot,deh:()=>ue,dpD:()=>mt,e07:()=>vt,e6w:()=>ct,e7N:()=>Te,eBW:()=>un,eEB:()=>N,eZ0:()=>_e,ekb:()=>Y,gJX:()=>C,h8e:()=>on,hdR:()=>se,i5y:()=>At,iHb:()=>W,iJz:()=>ye,iWB:()=>ve,iZT:()=>me,ik2:()=>L,jMg:()=>f,jQk:()=>Ht,jQs:()=>He,jeX:()=>he,kU:()=>$e,kpP:()=>nn,kuV:()=>Ke,luS:()=>pn,lyA:()=>st,mKl:()=>wt,mTV:()=>Le,mc4:()=>B,mhS:()=>R,mm_:()=>i,n9L:()=>Zt,nhH:()=>zt,nr8:()=>St,o0g:()=>at,o2y:()=>M,oFR:()=>Tt,oHH:()=>Z,oT6:()=>u,p2w:()=>Ct,p4S:()=>K,pe_:()=>rt,q1x:()=>fe,q2K:()=>Pe,q8u:()=>Ge,qCd:()=>Re,qWM:()=>et,qi_:()=>de,qkr:()=>dt,qw7:()=>d,r7n:()=>ke,s1s:()=>Xt,sEM:()=>Yt,sHE:()=>pe,sJF:()=>c,sL$:()=>j,usg:()=>cn,uv1:()=>Qe,vFR:()=>We,vtC:()=>Se,vwp:()=>oe,w3H:()=>Ut,wUP:()=>_,wYB:()=>Et,wYn:()=>qe,we_:()=>tt,wm:()=>F,wx7:()=>en,x12:()=>O,xJR:()=>ht,xQA:()=>It,xnO:()=>$,y7R:()=>X,yQU:()=>Ye,yj2:()=>A,zbQ:()=>bt,zvY:()=>I,zws:()=>k});const s="Abs",r="Acos",a="Acosh",i="Add",o="AddN",u="All",l="Any",c="ArgMax",h="ArgMin",p="Asin",d="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",x="AvgPool3D",w="AvgPool3DGrad",v="BatchMatMul",k="BatchToSpaceND",I="Bincount",S="BroadcastTo",N="BroadcastArgs",T="Cast",C="Ceil",$="ClipByValue",E="Complex",A="ComplexAbs",D="Concat",R="Conv2D",_="Conv2DBackpropFilter",F="Conv2DBackpropInput",O="Conv3D",M="Conv3DBackpropFilterV2",L="Conv3DBackpropInputV2",B="Cos",z="Cosh",U="Cumprod",W="Cumsum",P="CropAndResize",V="DenseBincount",G="DepthToSpace",H="DepthwiseConv2dNative",j="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",q="Diag",K="Dilation2D",Y="Dilation2DBackpropInput",Q="Dilation2DBackpropFilter",Z="RealDiv",J="Einsum",ee="Elu",te="EluGrad",ne="Erf",se="Equal",re="Exp",ae="ExpandDims",ie="Expm1",oe="FFT",ue="Fill",le="FlipLeftRight",ce="Floor",he="FloorDiv",pe="FusedBatchNorm",de="GatherV2",fe="GatherNd",me="Greater",ge="GreaterEqual",ye="Identity",be="IFFT",xe="Imag",we="IsFinite",ve="IsInf",ke="IsNan",Ie="LeakyRelu",Se="Less",Ne="LessEqual",Te="LinSpace",Ce="Log",$e="Log1p",Ee="LogicalAnd",Ae="LogicalNot",De="LogicalOr",Re="LogSoftmax",_e="LRN",Fe="LRNGrad",Oe="Max",Me="Maximum",Le="MaxPool",Be="MaxPoolGrad",ze="MaxPool3D",Ue="MaxPool3DGrad",We="MaxPoolWithArgmax",Pe="Mean",Ve="Min",Ge="Minimum",He="MirrorPad",je="Mod",Xe="Multinomial",qe="Multiply",Ke="Neg",Ye="NotEqual",Qe="NonMaxSuppressionV3",Ze="NonMaxSuppressionV4",Je="NonMaxSuppressionV5",et="OnesLike",tt="OneHot",nt="Pack",st="PadV2",rt="Pow",at="Prelu",it="Prod",ot="RaggedGather",ut="RaggedRange",lt="RaggedTensorToTensor",ct="Range",ht="Real",pt="Reciprocal",dt="Relu",ft="Reshape",mt="ResizeNearestNeighbor",gt="ResizeNearestNeighborGrad",yt="ResizeBilinear",bt="ResizeBilinearGrad",xt="Relu6",wt="Reverse",vt="Round",kt="Rsqrt",It="ScatterNd",St="SearchSorted",Nt="Select",Tt="Selu",Ct="Slice",$t="Sin",Et="Sinh",At="Sign",Dt="Sigmoid",Rt="Softplus",_t="Sqrt",Ft="Sum",Ot="SpaceToBatchND",Mt="SplitV",Lt="Softmax",Bt="SparseFillEmptyRows",zt="SparseReshape",Ut="SparseSegmentMean",Wt="SparseSegmentSum",Pt="SparseToDense",Vt="SquaredDifference",Gt="Square",Ht="StridedSlice",jt="StringNGrams",Xt="StringSplit",qt="StringToHashBucketFast",Kt="Sub",Yt="Tan",Qt="Tanh",Zt="Tile",Jt="TopK",en="Transform",tn="Transpose",nn="Unique",sn="Unpack",rn="UnsortedSegmentSum",an="ZerosLike",on="Step",un="FromPixels",ln="RotateWithOffset",cn="_FusedMatMul",hn="FusedConv2D",pn="FusedDepthwiseConv2D"},6151:(e,t,n)=>{"use strict";n.d(t,{Li:()=>p,pI:()=>u,tr:()=>c,uk:()=>l,wC:()=>h});var s=n(2885),r=n(5938),a=n(4706);const i=(0,r.R)("kernelRegistry",(()=>new Map)),o=(0,r.R)("gradRegistry",(()=>new Map));function u(e,t){const n=d(e,t);return i.get(n)}function l(e){return o.get(e)}function c(e){const t=i.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function h(e){const{kernelName:t,backendName:n}=e,s=d(t,n);i.has(s)&&a.Z(`The kernel '${t}' for backend '${n}' is already registered`),i.set(s,e)}function p(e){const{kernelName:t}=e;o.has(t)&&(0,s.OB)().getBool("DEBUG")&&a.Z(`Overriding the gradient for '${t}'`),o.set(t,e)}function d(e,t){return`${t}_${e}`}},4706:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r,c:()=>a});var s=n(2885);function r(...e){(0,s.OB)().getBool("IS_TEST")||(0,s.OB)().getBool("PROD")||console.warn(...e)}function a(...e){(0,s.OB)().getBool("IS_TEST")||(0,s.OB)().getBool("PROD")||console.log(...e)}},6235:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({abs_:function(e){const t=(0,a._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return s.BV.runKernel(r.yj2,e)}{const e={x:t};return s.BV.runKernel(r.SYM,e)}}})},7839:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({acos_:function(e){const t={x:(0,a._1)(e,"x","acos")};return s.BV.runKernel(r.VGw,t)}})},1470:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({acosh_:function(e){const t={x:(0,a._1)(e,"x","acosh")};return s.BV.runKernel(r.SpW,t)}})},6407:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({add_:function(e,t){let n=(0,i._1)(e,"a","add"),o=(0,i._1)(t,"b","add");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.mm_,u)}})},781:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({all_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","all","bool")},o={axis:t,keepDims:n};return s.BV.runKernel(r.oT6,i,o)}})},2998:(e,t,n)=>{"use strict";n.d(t,{Y:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({any_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","any","bool")},o={axis:t,keepDims:n};return s.BV.runKernel(r.IKK,i,o)}})},47:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({argMax_:function(e,t=0){const n={x:(0,a._1)(e,"x","argMax")},i={axis:t};return s.BV.runKernel(r.sJF,n,i)}})},7394:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({argMin_:function(e,t=0){const n={x:(0,a._1)(e,"x","argMin")},i={axis:t};return s.BV.runKernel(r.aJk,n,i)}})},2421:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({asin_:function(e){const t={x:(0,a._1)(e,"x","asin")};return s.BV.runKernel(r.M2y,t)}})},1891:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({asinh_:function(e){const t={x:(0,a._1)(e,"x","asinh")};return s.BV.runKernel(r.qw7,t)}})},7037:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({atan_:function(e){const t={x:(0,a._1)(e,"x","atan")};return s.BV.runKernel(r.jMg,t)}})},9812:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({atan2_:function(e,t){let n=(0,i._1)(e,"a","atan2"),o=(0,i._1)(t,"b","atan2");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.QCc,u)}})},369:(e,t,n)=>{"use strict";n.d(t,{C:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({atanh_:function(e){const t={x:(0,a._1)(e,"x","atanh")};return s.BV.runKernel(r.Oyi,t)}})},5176:(e,t,n)=>{"use strict";n.d(t,{w:()=>h});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2271),u=n(2582),l=n(2668),c=n(4968);const h=(0,l.op)({avgPool_:function(e,t,n,l,h){const p=(0,a._1)(e,"x","avgPool","float32");i.hu(u.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let d=p,f=!1;3===p.rank&&(f=!0,d=(0,c.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.hu(4===d.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${d.rank}.`)),u.m("avgPool",l,h);const m={x:d},g={filterSize:t,strides:n,pad:l,dimRoundingMode:h};let y=s.BV.runKernel(r.JhU,m,g);return y=(0,o.p)(y,p.dtype),f?(0,c.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},3591:(e,t,n)=>{"use strict";n.d(t,{LJ:()=>c,Q3:()=>l,Vh:()=>a,YB:()=>r,kz:()=>i,lB:()=>u,rv:()=>o,sY:()=>h});var s=n(569);function r(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function a(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function i(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function o(e,t){return a(e,t.map((e=>1)),t)}function u(e,t,n){s.hu(r(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function l(e,t){if(r(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function h(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}},8441:(e,t,n)=>{"use strict";n.d(t,{E:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({batchToSpaceND_:function(e,t,n){const o=(0,a._1)(e,"x","batchToSpaceND"),u=t.reduce(((e,t)=>e*t));i.hu(o.rank>=1+t.length,(()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`)),i.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i.hu(o.shape[0]%u==0,(()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${u}`));const l={x:o},c={blockShape:t,crops:n};return s.BV.runKernel(r.zws,l,c)}})},7505:(e,t,n)=>{"use strict";n.d(t,{t:()=>u});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(4968);const u=(0,n(2668).op)({batchNorm_:function(e,t,n,u,l,c){null==c&&(c=.001);const h=(0,a._1)(e,"x","batchNorm"),p=(0,a._1)(t,"mean","batchNorm"),d=(0,a._1)(n,"variance","batchNorm");let f,m;null!=l&&(f=(0,a._1)(l,"scale","batchNorm")),null!=u&&(m=(0,a._1)(u,"offset","batchNorm")),i.hu(p.rank===d.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i.hu(null==m||p.rank===m.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i.hu(null==f||p.rank===f.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g={x:function(e){let t;return t=0===e.rank||1===e.rank?(0,o.X)(e,[1,1,1,e.size]):2===e.rank?(0,o.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(h),scale:f,offset:m,mean:p,variance:d},y={varianceEpsilon:c},b=s.BV.runKernel(r.sHE,g,y);return(0,o.X)(b,h.shape)}})},8247:(e,t,n)=>{"use strict";n.d(t,{U:()=>c});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(8723),u=n(2668),l=n(4968);const c=(0,u.op)({broadcastTo_:function(e,t){let n=(0,a._1)(e,"broadcastTo","x");const u=n.shape;if((0,i.Mu)(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,l.X)(n,e)}const c=n.shape,h=Array.from(t);for(let e=t.length-1;e>=0;e--)if(c[e]===t[e])h[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${u}] cannot be broadcast to [${t}].`);if(0===h.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,o.d)(n);const p={x:n},d={reps:h};return s.BV.runKernel(r.n9L,p,d)}})},2200:(e,t,n)=>{"use strict";function s(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function r(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function a(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}n.r(t),n.d(t,{assertAndGetBroadcastShape:()=>a,getBroadcastDims:()=>s,getReductionAxes:()=>r})},2657:(e,t,n)=>{"use strict";n.d(t,{f:()=>a});var s=n(4077),r=n(569);function a(e,t="float32",n){return t=t||"float32",r.Mu(e),new s.YD(e,t,n)}},2271:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({cast_:function(e,t){const n=(0,a._1)(e,"x","cast");if(!i.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const o={x:n},u={dtype:t};return s.BV.runKernel(r.RFZ,o,u)}})},6825:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({ceil_:function(e){const t={x:(0,a._1)(e,"x","ceil","float32")};return s.BV.runKernel(r.gJX,t)}})},2279:(e,t,n)=>{"use strict";n.d(t,{i:()=>u});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(4006);const u=(0,n(2668).op)({clipByValue_:function(e,t,n){const u=(0,a._1)(e,"x","clipByValue");if(i.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return(0,o.h)(u.shape,t,u.dtype);const l={x:u},c={clipValueMin:t,clipValueMax:n};return s.BV.runKernel(r.xnO,l,c)}})},8723:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({clone_:function(e){const t={x:(0,a._1)(e,"x","clone","string_or_numeric")};return s.BV.runKernel(r.iJz,t)}})},1661:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({complex_:function(e,t){const n=(0,a._1)(e,"real","complex"),o=(0,a._1)(t,"imag","complex");i.k5(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const u={real:n,imag:o};return s.BV.runKernel(r.Zz9,u)}})},6884:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(8723);const u=(0,n(2668).op)({concat_:function(e,t=0){(0,i.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,a.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,o.d)(n[0]);const u=n,l={axis:t};return s.BV.runKernel(r.Eh3,u,l)}})},1355:(e,t,n)=>{"use strict";n.d(t,{P:()=>l});var s=n(3740),r=n(569),a=n(4794),i=n(2582),o=n(2668),u=n(4968);const l=(0,o.op)({conv1d_:function(e,t,n,o,l="NWC",c=1,h){const p=(0,s._1)(e,"x","conv1d"),d=(0,s._1)(t,"filter","conv1d");let f=p,m=!1;2===p.rank&&(m=!0,f=(0,u.X)(p,[1,p.shape[0],p.shape[1]])),r.hu(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),r.hu(3===d.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${d.rank}.`)),i.m("conv1d",o,h),r.hu(f.shape[2]===d.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${d.shape[1]}.`)),r.hu(i.jT(n,c),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`)),r.hu("NWC"===l,(()=>`Error in conv1d: got dataFormat of ${l} but only NWC is currently supported.`));const g=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]]),y=(0,u.X)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,n],x=[1,c],w=(0,a.T)(y,g,b,o,"NHWC",x,h);return m?(0,u.X)(w,[w.shape[2],w.shape[3]]):(0,u.X)(w,[w.shape[0],w.shape[2],w.shape[3]])}})},4794:(e,t,n)=>{"use strict";n.d(t,{T:()=>c});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({conv2d_:function(e,t,n,u,c="NHWC",h=[1,1],p){const d=(0,a._1)(e,"x","conv2d","float32"),f=(0,a._1)(t,"filter","conv2d","float32");let m=d,g=!1;3===d.rank&&(g=!0,m=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.hu(4===m.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`)),o.m("conv2d",u,p);const y="NHWC"===c?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`)),i.hu(o.jT(n,h),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${h}'`));const b={x:m,filter:f},x={strides:n,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p},w=s.BV.runKernel(r.mhS,b,x);return g?(0,l.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},6013:(e,t,n)=>{"use strict";n.d(t,{p:()=>l});var s=n(7097),r=n(9121),a=n(569),i=n(2582),o=n(2668),u=n(4968);const l=(0,o.op)({conv2DBackpropFilter_:function(e,t,n,o,l,c="NHWC",h){let p=e;3===e.rank&&(p=(0,u.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=t;3===d.rank&&(d=(0,u.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),a.hu(4===p.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${p.shape}.`)),a.hu(4===d.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${d.shape}.`)),a.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const f="NHWC"===c?p.shape[3]:p.shape[1],m="NHWC"===c?d.shape[3]:d.shape[1];a.hu(f===n[2],(()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${n[2]}.`)),a.hu(m===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${n[3]}).`)),i.m("conv2dDerFilter",l,h);const g={x:p,dy:d},y={strides:o,pad:l,dataFormat:c,dimRoundingMode:h,filterShape:n};return s.BV.runKernel(r.wUP,g,y)}})},9832:(e,t,n)=>{"use strict";n.d(t,{_:()=>l});var s=n(7097),r=n(9121),a=n(569),i=n(2582),o=n(2668),u=n(4968);const l=(0,o.op)({conv2DBackpropInput_:function(e,t,n,o,l,c="NHWC",h){a.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let p=e,d=t,f=!1;3===t.rank&&(f=!0,d=(0,u.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),p=[1,e[0],e[1],e[2]]),a.hu(4===p.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${p.length}.`)),a.hu(4===d.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${d.rank}`)),a.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const m="NHWC"===c?p[3]:p[1],g="NHWC"===c?d.shape[3]:d.shape[1];a.hu(m===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${m}) must match input depth for filter ${n.shape[2]}.`)),a.hu(g===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${n.shape[3]}.`)),i.m("conv2dDerInput",l,h);const y={dy:d,filter:n},b={strides:o,pad:l,dataFormat:c,dimRoundingMode:h,inputShape:p},x=s.BV.runKernel(r.wm,y,b);return f?(0,u.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}})},1405:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var s=n(3740),r=n(9832);const a=(0,n(2668).op)({conv2dTranspose_:function(e,t,n,a,i,o){const u=(0,s._1)(e,"x","conv2dTranspose"),l=(0,s._1)(t,"filter","conv2dTranspose");return(0,r._)(n,u,l,a,i,"NHWC",o)}})},7594:(e,t,n)=>{"use strict";n.d(t,{_:()=>u});var s=n(7097),r=n(9121),a=n(569),i=n(2668),o=n(4968);const u=(0,i.op)({conv3DBackpropInput_:function(e,t,n,i,u){a.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let l=e,c=t,h=!1;4===t.rank&&(h=!0,c=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),l=[1,e[0],e[1],e[2],e[3]]);const p=l[4],d=c.shape[4];a.hu(5===l.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${l.length}.`)),a.hu(5===c.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`)),a.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),a.hu(p===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[3]}.`)),a.hu(d===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[4]}.`));const f={dy:c,filter:n},m={pad:u,strides:i,inputShape:l},g=s.BV.runKernel(r.ik2,f,m);return h?(0,o.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},2582:(e,t,n)=>{"use strict";n.d(t,{I0:()=>f,Ix:()=>o,Rf:()=>r,Xw:()=>a,aO:()=>l,jT:()=>m,jw:()=>u,m:()=>y,pl:()=>i,sl:()=>g});var s=n(569);function r(e,t,n,s,r="NHWC",a){return o(e,[...t,e[3]],n,a,s,null,null,g(r))}function a(e,t,n,s,r,a,i="channelsLast"){const[u,l]=c(t);let h;if("channelsLast"===i)h=[u,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);h=[u,l,e[1],e[1]]}return o(e,h,n,s,r,a,!1,i)}function i(e,t,n,s,r,a,i="NDHWC"){const[o,l,c]=h(t);let p,d;if("NDHWC"===i)d="channelsLast",p=[o,l,c,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);d="channelsFirst",p=[o,l,c,e[1],e[1]]}return u(e,p,n,s,r,!1,d,a)}function o(e,t,n,s,r,a,i=!1,o="channelsLast"){let[u,h,f,m]=[-1,-1,-1,-1];if("channelsLast"===o)[u,h,f,m]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,m,h,f]=e}const[g,y,,b]=t,[x,w]=c(n),[v,k]=c(s),I=p(g,v),S=p(y,k),{padInfo:N,outHeight:T,outWidth:C}=function(e,t,n,s,r,a,i,o,u){let c,h,p;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=l(e,t,n));const a=e[1];return[d((e[0]-t+2*s)/n+1,r),d((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);h=r[0],p=r[1]}else if("same"===e){h=Math.ceil(t/s),p=Math.ceil(n/r);const e=Math.max(0,(h-1)*s+a-t),o=Math.max(0,(p-1)*r+i-n),u=Math.floor(e/2),l=e-u,d=Math.floor(o/2);c={top:u,bottom:l,left:d,right:o-d,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-a+1)/s),p=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const l="channelsLast"===u?e[1][0]:e[2][0],f="channelsLast"===u?e[1][1]:e[2][1],m="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];c={top:l,bottom:f,left:m,right:g,type:0===l&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},h=d((t-a+l+f)/s+1,o),p=d((n-i+m+g)/r+1,o)}}return{padInfo:c,outHeight:h,outWidth:p}}(r,h,f,x,w,I,S,a,o),$=i?b*m:b;let E;return"channelsFirst"===o?E=[u,$,T,C]:"channelsLast"===o&&(E=[u,T,C,$]),{batchSize:u,dataFormat:o,inHeight:h,inWidth:f,inChannels:m,outHeight:T,outWidth:C,outChannels:$,padInfo:N,strideHeight:x,strideWidth:w,filterHeight:g,filterWidth:y,effectiveFilterHeight:I,effectiveFilterWidth:S,dilationHeight:v,dilationWidth:k,inShape:e,outShape:E,filterShape:t}}function u(e,t,n,s,r,a=!1,i="channelsLast",o){let[u,c,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,c,f,m,g]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,g,c,f,m]=e}const[y,b,x,,w]=t,[v,k,I]=h(n),[S,N,T]=h(s),C=p(y,S),$=p(b,N),E=p(x,T),{padInfo:A,outDepth:D,outHeight:R,outWidth:_}=function(e,t,n,s,r,a,i,o,u,c,h){let p,f,m,g;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=l(e,t,s));const i=e[1],o=e[2];return[d((e[0]-t+2*r)/s+1,a),d((i-t+2*r)/s+1,a),d((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,h);f=a[0],m=a[1],g=a[2]}else if("same"===e){f=Math.ceil(t/r),m=Math.ceil(n/a),g=Math.ceil(s/i);const e=(f-1)*r+o-t,l=(m-1)*a+u-n,h=(g-1)*i+c-s,d=Math.floor(e/2),y=e-d,b=Math.floor(l/2),x=l-b,w=Math.floor(h/2);p={top:b,bottom:x,left:w,right:h-w,front:d,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((t-o+1)/r),m=Math.ceil((n-u+1)/a),g=Math.ceil((s-c+1)/i)}return{padInfo:p,outDepth:f,outHeight:m,outWidth:g}}(r,c,f,m,v,k,I,C,$,E,o),F=a?w*g:w;let O;return"channelsFirst"===i?O=[u,F,D,R,_]:"channelsLast"===i&&(O=[u,D,R,_,F]),{batchSize:u,dataFormat:i,inDepth:c,inHeight:f,inWidth:m,inChannels:g,outDepth:D,outHeight:R,outWidth:_,outChannels:F,padInfo:A,strideDepth:v,strideHeight:k,strideWidth:I,filterDepth:y,filterHeight:b,filterWidth:x,effectiveFilterDepth:C,effectiveFilterHeight:$,effectiveFilterWidth:E,dilationDepth:S,dilationHeight:N,dilationWidth:T,inShape:e,outShape:O,filterShape:t}}function l(e,t,n,s=1){const r=p(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function c(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function h(e){return"number"==typeof e?[e,e,e]:e}function p(e,t){return t<=1?e:e+(e-1)*(t-1)}function d(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function f(e){const[t,n,s]=c(e);return 1===t&&1===n&&1===s}function m(e,t){return f(e)||f(t)}function g(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function y(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)s.hu(s.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{s.hu(s.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}},173:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({cos_:function(e){const t={x:(0,a._1)(e,"x","cos","float32")};return s.BV.runKernel(r.mc4,t)}})},2699:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({cosh_:function(e){const t={x:(0,a._1)(e,"x","cosh","float32")};return s.BV.runKernel(r.TR1,t)}})},9640:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({cumprod_:function(e,t=0,n=!1,i=!1){const o={x:(0,a._1)(e,"x","cumprod")},u={axis:t,exclusive:n,reverse:i};return s.BV.runKernel(r.Byc,o,u)}})},7405:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({cumsum_:function(e,t=0,n=!1,i=!1){const o={x:(0,a._1)(e,"x","cumsum")},u={axis:t,exclusive:n,reverse:i};return s.BV.runKernel(r.iHb,o,u)}})},9112:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({depthToSpace_:function(e,t,n="NHWC"){const o=(0,a._1)(e,"x","depthToSpace","float32"),u="NHWC"===n?o.shape[1]:o.shape[2],l="NHWC"===n?o.shape[2]:o.shape[3],c="NHWC"===n?o.shape[3]:o.shape[1];i.hu(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),i.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t}  for depthToSpace with input shape\n    ${o.shape}`)),i.hu(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t} for depthToSpace with input shape\n        ${o.shape}`)),i.hu(c%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${o.shape}`));const h={x:o},p={blockSize:t,dataFormat:n};return s.BV.runKernel(r.T0n,h,p)}})},4718:(e,t,n)=>{"use strict";n.d(t,{B:()=>c});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({depthwiseConv2d_:function(e,t,n,u,c="NHWC",h=[1,1],p){const d=(0,a._1)(e,"x","depthwiseConv2d","float32"),f=(0,a._1)(t,"filter","depthwiseConv2d","float32");let m=d,g=!1;3===d.rank&&(g=!0,m=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.hu(4===m.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`));const y="NHWC"===c?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${y}) must match the inChannels dimension in filter ${f.shape[2]}.`)),o.m("depthwiseConv2d",u,p);const b={x:m,filter:f},x={strides:n,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p},w=s.BV.runKernel(r.cie,b,x);return g?(0,l.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},8098:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var s=n(7097),r=n(9121),a=n(2668),i=n(4968);const o=(0,a.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,o,u=[1,1],l){let c=e;3===e.rank&&(c=(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={x:c,dy:h},d={strides:a,pad:o,dimRoundingMode:l,dilations:u,filterShape:n};return s.BV.runKernel(r.sL$,p,d)}})},4375:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var s=n(7097),r=n(9121),a=n(2668),i=n(4968);const o=(0,a.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,o,u=[1,1],l){let c=t,h=!1;3===t.rank&&(h=!0,c=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={dy:c,filter:n},d={strides:a,pad:o,dimRoundingMode:l,dilations:u,inputShape:e},f=s.BV.runKernel(r.y7R,p,d);return h?(0,i.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},557:(e,t,n)=>{"use strict";n.d(t,{W:()=>l});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const l=(0,o.op)({dilation2d_:function(e,t,n,o,l=[1,1],c="NHWC"){const h=(0,a._1)(e,"x","dilation2d"),p=(0,a._1)(t,"filter","dilation2d");i.hu(3===h.rank||4===h.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${h.rank}.`)),i.hu(3===p.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${p.rank}.`)),i.hu("NHWC"===c,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${c}`));let d=h,f=!1;3===h.rank&&(d=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),f=!0);const m={x:d,filter:p},g={strides:n,pad:o,dilations:l},y=s.BV.runKernel(r.p4S,m,g);return f?(0,u.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1274:(e,t,n)=>{"use strict";n.d(t,{h:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(9165);const u=(0,n(2668).op)({div_:function(e,t){let n=(0,i._1)(e,"a","div"),u=(0,i._1)(t,"b","div");if([n,u]=(0,a.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return(0,o.q)(n,u);const l={a:n,b:u};return s.BV.runKernel(r.oHH,l,{})}})},9322:(e,t,n)=>{"use strict";n.d(t,{N:()=>c});var s=n(747),r=n(3740),a=n(1274),i=n(6477),o=n(2668),u=n(5912),l=n(6577);const c=(0,o.op)({divNoNan_:function(e,t){let n=(0,r._1)(e,"a","div"),o=(0,r._1)(t,"b","div");[n,o]=(0,s.makeTypesMatch)(n,o);const c=(0,a.h)(n,o),h=(0,l.P)(c),p=(0,i.D)(o,h);return(0,u.a)(p,h,c)}})},548:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var s=n(3740),r=n(569),a=n(8687),i=n(2668),o=n(4968);const u=(0,i.op)({dot_:function(e,t){const n=(0,s._1)(e,"t1","dot"),i=(0,s._1)(t,"t2","dot");r.hu(!(1!==n.rank&&2!==n.rank||1!==i.rank&&2!==i.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${i.rank}.`));const u=1===n.rank?n.size:n.shape[1],l=1===i.rank?i.size:i.shape[0];if(r.hu(u===l,(()=>`Error in dot: inner dimensions of inputs must match, but got ${u} and ${l}.`)),1===n.rank&&1===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[-1,1]),s=(0,a.O)(e,t);return(0,o.X)(s,[])}if(1===n.rank&&2===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[i.shape[0],i.shape[1]]),s=(0,a.O)(e,t);return(0,o.X)(s,[s.size])}if(2===n.rank&&1===i.rank){const e=(0,o.X)(i,[-1,1]),t=(0,a.O)(n,e);return(0,o.X)(t,[t.size])}{const e=(0,o.X)(i,[i.shape[0],i.shape[1]]);return(0,a.O)(n,e)}}})},3233:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({elu_:function(e){const t={x:(0,a._1)(e,"x","elu","float32")};return s.BV.runKernel(r.SX0,t)}})},6477:(e,t,n)=>{"use strict";n.d(t,{D:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({equal_:function(e,t){let n=(0,i._1)(e,"a","equal","string_or_numeric"),u=(0,i._1)(t,"b","equal","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r.hdR,l)}})},4650:(e,t,n)=>{"use strict";n.d(t,{q:()=>u});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2271);const u=(0,n(2668).op)({erf_:function(e){let t=(0,a._1)(e,"x","erf");i.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,o.p)(t,"float32"));const n={x:t};return s.BV.runKernel(r.Omj,n)}})},1954:(e,t,n)=>{"use strict";n.d(t,{d:()=>r});var s=n(3561);const r=(0,n(2668).op)({euclideanNorm_:function(e,t=null,n=!1){return(0,s.K)(e,"euclidean",t,n)}})},4842:(e,t,n)=>{"use strict";n.d(t,{Q:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({exp_:function(e){const t={x:(0,a._1)(e,"x","exp")};return s.BV.runKernel(r.NEP,t)}})},1300:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({expandDims_:function(e,t=0){const n=(0,a._1)(e,"x","expandDims","string_or_numeric");i.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const o={input:n},u={dim:t};return s.BV.runKernel(r.YFo,o,u)}})},3426:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({expm1_:function(e){const t={x:(0,a._1)(e,"x","expm1")};return s.BV.runKernel(r.Y0y,t)}})},4006:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),r=n(9121),a=n(569);function i(e,t,n){(0,a.Mu)(e);const i={shape:e,value:t,dtype:n};return s.BV.runKernel(r.deh,{},i)}},6943:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({floor_:function(e){const t={x:(0,a._1)(e,"x","floor","float32")};return s.BV.runKernel(r.OR,t)}})},9165:(e,t,n)=>{"use strict";n.d(t,{q:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({floorDiv_:function(e,t){let n=(0,i._1)(e,"a","floorDiv"),o=(0,i._1)(t,"b","floorDiv");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.jeX,u)}})},9323:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>f,QH:()=>g,pf:()=>m,uy:()=>y});var s=n(2200),r=n(3233),a=n(9133),i=n(4841),o=n(8151),u=n(7409),l=n(3582),c=n(4968),h=n(625),p=n(1901),d=n(5475);function f(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,i.d)(e,(0,p.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function m(e,t){let n=t;const r=s.getReductionAxes(e.shape,t.shape);return r.length>0&&(n=(0,d.S)(n,r)),(0,c.X)(n,e.shape)}function g(e,t,n,s){if("linear"===t)return e;if("relu"===t)return(0,u.U)(e);if("elu"===t)return(0,r.p)(e);if("relu6"===t)return(0,l.b)(e);if("prelu"===t)return(0,o.A)(e,n);if("leakyrelu"===t)return(0,a.h)(e,s);if("sigmoid"===t)return(0,h.X)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},4926:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({gather_:function(e,t,n=0,i=0){const o={x:(0,a._1)(e,"x","gather"),indices:(0,a._1)(t,"indices","gather","int32")},u={axis:n,batchDims:i};return s.BV.runKernel(r.qi_,o,u)}})},636:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({greater_:function(e,t){let n=(0,i._1)(e,"a","greater","string_or_numeric"),u=(0,i._1)(t,"b","greater","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r.iZT,l)}})},7630:(e,t,n)=>{"use strict";n.d(t,{b:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({greaterEqual_:function(e,t){let n=(0,i._1)(e,"a","greaterEqual","string_or_numeric"),u=(0,i._1)(t,"b","greaterEqual","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r.Acj,l)}})},4386:(e,t,n)=>{"use strict";n.d(t,{a:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({imag_:function(e){const t={input:(0,a._1)(e,"input","imag")};return s.BV.runKernel(r.J_u,t)}})},3305:(e,t,n)=>{"use strict";n.d(t,{I:()=>l});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const l=(0,o.op)({resizeBilinear_:function(e,t,n=!1,o=!1){const l=(0,a._1)(e,"images","resizeBilinear");i.hu(3===l.rank||4===l.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${l.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i.hu(!1===o||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let c=l,h=!1;3===l.rank&&(h=!0,c=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const[]=t,p={images:c},d={alignCorners:n,halfPixelCenters:o,size:t},f=s.BV.runKernel(r._Yw,p,d);return h?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},5098:(e,t,n)=>{"use strict";n.d(t,{j:()=>l});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const l=(0,o.op)({resizeNearestNeighbor_:function(e,t,n=!1,o=!1){const l=(0,a._1)(e,"images","resizeNearestNeighbor");i.hu(3===l.rank||4===l.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${l.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i.hu("float32"===l.dtype||"int32"===l.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i.hu(!1===o||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let c=l,h=!1;3===l.rank&&(h=!0,c=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const[]=t,p={images:c},d={alignCorners:n,halfPixelCenters:o,size:t},f=s.BV.runKernel(r.dpD,p,d);return h?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3963:(e,t,n)=>{"use strict";n.d(t,{x:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({isFinite_:function(e){const t={x:(0,a._1)(e,"x","isFinite")};return s.BV.runKernel(r.avt,t)}})},4365:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({isInf_:function(e){const t={x:(0,a._1)(e,"x","isInf")};return s.BV.runKernel(r.iWB,t)}})},6230:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({isNaN_:function(e){const t={x:(0,a._1)(e,"x","isNaN")};return s.BV.runKernel(r.r7n,t)}})},9133:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({leakyRelu_:function(e,t=.2){const n={x:(0,a._1)(e,"x","leakyRelu")},i={alpha:t};return s.BV.runKernel(r.J$2,n,i)}})},6573:(e,t,n)=>{"use strict";n.d(t,{d:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({less_:function(e,t){let n=(0,i._1)(e,"a","less","string_or_numeric"),u=(0,i._1)(t,"b","less","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r.vtC,l)}})},624:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({lessEqual_:function(e,t){let n=(0,i._1)(e,"a","lessEqual","string_or_numeric"),u=(0,i._1)(t,"b","lessEqual","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r.CAk,l)}})},9648:(e,t,n)=>{"use strict";n.d(t,{G:()=>l});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2668),u=n(4968);const l=(0,o.op)({localResponseNormalization_:function(e,t=5,n=1,o=1,l=.5){const c=(0,a._1)(e,"x","localResponseNormalization");i.hu(4===c.rank||3===c.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`)),i.hu(i.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let h=c,p=!1;3===c.rank&&(p=!0,h=(0,u.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const d={x:h},f={depthRadius:t,bias:n,alpha:o,beta:l},m=s.BV.runKernel(r.eZ0,d,f);return p?(0,u.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},2597:(e,t,n)=>{"use strict";n.d(t,{c:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({log_:function(e){const t={x:(0,a._1)(e,"x","log","float32")};return s.BV.runKernel(r.ZbH,t)}})},7474:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({log1p_:function(e){const t={x:(0,a._1)(e,"x","log1p")};return s.BV.runKernel(r.kU,t)}})},3888:(e,t,n)=>{"use strict";n.d(t,{e:()=>c});var s=n(633),r=n(3740),a=n(4841),i=n(7370),o=n(2668),u=n(625),l=n(3694);const c=(0,o.op)({logSigmoid_:function(e){const t=(0,r._1)(e,"x","logSigmoid");return(0,s.cb)((e=>({value:(0,i.W)((0,l.W)((0,i.W)(e))),gradFunc:t=>(0,a.d)(t,(0,u.X)((0,i.W)(e)))})))(t)}})},1510:(e,t,n)=>{"use strict";n.d(t,{C:()=>d});var s=n(633),r=n(3740),a=n(2271),i=n(4842),o=n(2597),u=n(3307),l=n(4841),c=n(2668),h=n(827),p=n(5475);const d=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,r._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return(0,s.cb)(((e,n)=>{const s=(0,u.F)(e,t,!0),r=(0,h.l)(e,s),c=(0,h.l)((0,a.p)(r,"float32"),(0,o.c)((0,p.S)((0,i.Q)(r),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[s]=n,r=(0,i.Q)(s);return(0,h.l)(e,(0,l.d)((0,p.S)(e,t,!0),r))}}}))(n)}})},1391:(e,t,n)=>{"use strict";n.d(t,{l:()=>f});var s=n(3740),r=n(569),a=n(6407),i=n(3591),o=n(4842),u=n(2597),l=n(3307),c=n(2668),h=n(4968),p=n(827),d=n(5475);const f=(0,c.op)({logSumExp_:function(e,t=null,n=!1){const c=(0,s._1)(e,"x","logSumExp"),f=(0,r.EC)(t,c.shape),m=(0,l.F)(c,f,!0),g=(0,p.l)(c,m),y=(0,o.Q)(g),b=(0,d.S)(y,f),x=(0,u.c)(b),w=(0,a.I)((0,h.X)(m,x.shape),x);if(n){const e=(0,i.rv)(w.shape,f);return(0,h.X)(w,e)}return w}})},2856:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(2200);const o=(0,n(2668).op)({logicalAnd_:function(e,t){const n=(0,a._1)(e,"a","logicalAnd","bool"),o=(0,a._1)(t,"b","logicalAnd","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const u={a:n,b:o};return s.BV.runKernel(r.PYm,u)}})},8651:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({logicalNot_:function(e){const t={x:(0,a._1)(e,"x","logicalNot","bool")};return s.BV.runKernel(r.VfG,t)}})},5750:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(2200);const o=(0,n(2668).op)({logicalOr_:function(e,t){const n=(0,a._1)(e,"a","logicalOr","bool"),o=(0,a._1)(t,"b","logicalOr","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const u={a:n,b:o};return s.BV.runKernel(r.MZg,u)}})},596:(e,t,n)=>{"use strict";n.d(t,{e:()=>u});var s=n(3740),r=n(2200),a=n(2856),i=n(8651),o=n(5750);const u=(0,n(2668).op)({logicalXor_:function(e,t){const n=(0,s._1)(e,"a","logicalXor","bool"),u=(0,s._1)(t,"b","logicalXor","bool");return(0,r.assertAndGetBroadcastShape)(n.shape,u.shape),(0,a.H)((0,o.K)(e,t),(0,i.h)((0,a.H)(e,t)))}})},8687:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({matMul_:function(e,t,n=!1,o=!1){let u=(0,i._1)(e,"a","matMul"),l=(0,i._1)(t,"b","matMul");[u,l]=(0,a.makeTypesMatch)(u,l);const c={a:u,b:l},h={transposeA:n,transposeB:o};return s.BV.runKernel(r.XLW,c,h)}})},3307:(e,t,n)=>{"use strict";n.d(t,{F:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({max_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","max")},o={reductionIndices:t,keepDims:n};return s.BV.runKernel(r.YoZ,i,o)}})},1174:(e,t,n)=>{"use strict";n.d(t,{_:()=>c});var s=n(7097),r=n(9121),a=n(3740),i=n(569),o=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({maxPool_:function(e,t,n,u,c){const h=(0,a._1)(e,"x","maxPool");let p=h,d=!1;3===h.rank&&(d=!0,p=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.hu(4===p.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${p.rank}.`)),i.hu(o.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),o.m("maxPool",u,c);const f={x:p},m={filterSize:t,strides:n,pad:u,dimRoundingMode:c},g=s.BV.runKernel(r.mTV,f,m);return d?(0,l.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},632:(e,t,n)=>{"use strict";n.d(t,{g:()=>l});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200),u=n(2271);const l=(0,n(2668).op)({maximum_:function(e,t){let n=(0,i._1)(e,"a","maximum"),l=(0,i._1)(t,"b","maximum");[n,l]=(0,a.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const c={a:n,b:l};return s.BV.runKernel(r.BMI,c)}})},5130:(e,t,n)=>{"use strict";n.d(t,{J:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({mean_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","mean")},o={axis:t,keepDims:n};return s.BV.runKernel(r.q2K,i,o)}})},5735:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({min_:function(e,t=null,n=!1){const i={x:(0,a._1)(e,"x","min")},o={axis:t,keepDims:n};return s.BV.runKernel(r.c17,i,o)}})},4513:(e,t,n)=>{"use strict";n.d(t,{L:()=>l});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200),u=n(2271);const l=(0,n(2668).op)({minimum_:function(e,t){let n=(0,i._1)(e,"a","minimum"),l=(0,i._1)(t,"b","minimum");[n,l]=(0,a.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const c={a:n,b:l};return s.BV.runKernel(r.q8u,c)}})},1483:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({mirrorPad_:function(e,t,n){i.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const o=(0,a._1)(e,"x","mirrorPad");if(0===o.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i.hu(t.length===o.rank,(()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`));const u="reflect"===n?1:0;for(let e=0;e<o.rank;e++)i.hu(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i.hu(t[e][0]>=0&&t[e][0]<=o.shape[e]-u&&t[e][1]>=0&&t[e][1]<=o.shape[e]-u,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${o.shape[e]-u} or less than 0 for input of shape ${o.shape}`));const l={paddings:t,mode:n},c={x:o};return s.BV.runKernel(r.jQs,c,l)}})},5228:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({mod_:function(e,t){let n=(0,i._1)(e,"a","mod"),o=(0,i._1)(t,"b","mod");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.Vbg,u)}})},4841:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({mul_:function(e,t){let n=(0,i._1)(e,"a","mul"),o=(0,i._1)(t,"b","mul");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.wYn,u)}})},7370:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({neg_:function(e){const t={x:(0,a._1)(e,"x","neg")};return s.BV.runKernel(r.kuV,t)}})},3561:(e,t,n)=>{"use strict";n.d(t,{K:()=>y});var s=n(3740),r=n(569),a=n(6235),i=n(3591),o=n(3307),u=n(5735),l=n(2668),c=n(3453),h=n(4968),p=n(9494),d=n(3261),f=n(248),m=n(5475);function g(e,t,n=null){if(0===e.rank)return(0,a.W)(e);if(1!==e.rank&&null===n)return g((0,h.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,m.S)((0,a.W)(e),n);if(t===1/0)return(0,o.F)((0,a.W)(e),n);if(t===-1/0)return(0,u.V)((0,a.W)(e),n);if("euclidean"===t||2===t)return(0,d._)((0,m.S)((0,c.s)((0,a.W)(e),(0,p.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,o.F)((0,m.S)((0,a.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,o.F)((0,m.S)((0,a.W)(e),n[1]),n[0]);if(t===-1/0)return(0,u.V)((0,m.S)((0,a.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,d._)((0,m.S)((0,f.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const y=(0,l.op)({norm_:function(e,t="euclidean",n=null,a=!1){const o=g(e=(0,s._1)(e,"x","norm"),t,n);let u=o.shape;if(a){const t=(0,r.EC)(n,e.shape);u=i.rv(o.shape,t)}return(0,h.X)(o,u)}})},6500:(e,t,n)=>{"use strict";n.d(t,{Q:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({notEqual_:function(e,t){let n=(0,i._1)(e,"a","notEqual","string_or_numeric"),u=(0,i._1)(t,"b","notEqual","string_or_numeric");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r.yQU,l)}})},6708:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({oneHot_:function(e,t,n=1,i=0,o="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const u={indices:(0,a._1)(e,"indices","oneHot","int32")},l={dtype:o,depth:t,onValue:n,offValue:i};return s.BV.runKernel(r.we_,u,l)}})},4917:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var s=n(7097),r=n(569),a=n(1661),i=n(723);function o(e,t="float32"){if((0,r.Mu)(e),"complex64"===t){const t=o(e,"float32"),n=(0,i.l)(e,"float32");return(0,a.P)(t,n)}const n=(0,r.p8)((0,r.NA)(e),t);return s.BV.makeTensor(n,e,t)}},7846:(e,t,n)=>{"use strict";n.d(t,{J:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({onesLike_:function(e){const t={x:(0,a._1)(e,"x","onesLike")};return s.BV.runKernel(r.qWM,t)}})},2668:(e,t,n)=>{"use strict";n.d(t,{op:()=>i,z:()=>a});var s=n(7097),r=n(569);const a="__op";function i(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const i=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=a;const o=(...e)=>{s.BV.startScope(n);try{const t=i(...e);return(0,r.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),s.BV.endScope(t),t}catch(e){throw s.BV.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}},1710:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>p.z,WnP:()=>r.W,Khb:()=>a.K,__u:()=>i._,IHx:()=>o.I,QBD:()=>d,$6P:()=>f.$,YjB:()=>m.Y,NqF:()=>g.N,vHJ:()=>y.v,ZRM:()=>b.Z,VfV:()=>x.V,z4N:()=>w.z,fvJ:()=>v.f,C80:()=>k.C,wS1:()=>I.w,uR5:()=>C,zEQ:()=>F,tgs:()=>M.t,Dxk:()=>L,JY5:()=>B,p3b:()=>z,E4h:()=>O.E,yE8:()=>U,anm:()=>Qn,XsQ:()=>W,UFq:()=>P.U,f3b:()=>V.f,pju:()=>N.p,mDi:()=>G.m,iUl:()=>H.i,d9v:()=>j.d,PYB:()=>X.P,zoF:()=>$.z,gME:()=>q,Izb:()=>K,MNy:()=>Y,ZaL:()=>Q,PAt:()=>Z.P,Tek:()=>J.T,bc:()=>ee.b,pdZ:()=>te,$QV:()=>se,mCk:()=>re.m,f9Y:()=>ae.f,mew:()=>us,$Gn:()=>ie.$,zbp:()=>oe.z,ppE:()=>ue,nTT:()=>le.n,B10:()=>ce.B,Ka3:()=>he,WmZ:()=>pe.W,hiC:()=>de.h,NTj:()=>fe.N,AKD:()=>me.A,rvX:()=>is,WYO:()=>ge,pyx:()=>ye.p,GRh:()=>os,DgJ:()=>be.D,qNN:()=>xe.q,d2q:()=>we.d,Qqt:()=>ve.Q,dt4:()=>ke.d,t$B:()=>Ie.t,iyy:()=>Ne,kp_:()=>bn.k,hlL:()=>Te.h,GWj:()=>Ce.G,qPi:()=>$e.q,imm:()=>s,Iqj:()=>Ee.I,dbB:()=>as,pjt:()=>Ae.p,brS:()=>De.b,Sxn:()=>xn.S,asL:()=>Re.a,BHj:()=>or,V3u:()=>ls,wx0:()=>wn.w,xVT:()=>_e.x,UWc:()=>Fe.U,i2d:()=>Oe.i,hi7:()=>Me.h,d9m:()=>Le.d,zN1:()=>Be.z,$r2:()=>ur,SX3:()=>ze,G9k:()=>Ue.G,cM7:()=>We.c,Krr:()=>Pe.K,e_t:()=>Ve.e,CmS:()=>Ge.C,l_t:()=>He.l,HvI:()=>je.H,hJK:()=>Xe.h,K5V:()=>qe.K,egP:()=>Ke.e,MB5:()=>lr,eab:()=>Ze,OI3:()=>E.O,Fp7:()=>Je.F,_sB:()=>et._,YQQ:()=>tt,Ip$:()=>nt,gWQ:()=>st.g,J69:()=>rt.J,ry_:()=>ot,VV$:()=>ut.V,LTh:()=>lt.L,VdP:()=>ct.V,wQq:()=>ht.w,Gi7:()=>mt,p_:()=>ts,dC7:()=>A.d,rq4:()=>gt,SJ_:()=>yt,W76:()=>bt.W,KOy:()=>Jn.K,Quu:()=>xt.Q,lfX:()=>wt.l,iUs:()=>at.i,JpU:()=>vt.J,op:()=>p.op,N2O:()=>kt,vku:()=>It.v,pNR:()=>St,koy:()=>Nt,t1L:()=>Tt,lGY:()=>Ct,d_R:()=>$t.d,sQ3:()=>Et.s,AL3:()=>At.A,S0v:()=>Dt.S,WVs:()=>Rt.W,$gW:()=>_t,VT$:()=>Ft,N89:()=>Ot,TN_:()=>Mt,wzB:()=>Wt,nGf:()=>Pt,ruB:()=>Vt,LGj:()=>Gt,w6H:()=>Ht,kwC:()=>jt.k,M25:()=>Xt.M,UYe:()=>qt.U,btT:()=>Kt.b,XLQ:()=>T.X,GYS:()=>Yt.G,SDf:()=>Qt,diP:()=>Zt,sx7:()=>Jt,mG2:()=>en,QEs:()=>vn.Q,NMM:()=>tn.N,bp0:()=>nn.b,iD$:()=>sn.i,snQ:()=>ss,zcT:()=>Qe,U8D:()=>rn.U,U_I:()=>an.U,ODp:()=>on,XD2:()=>D.X,Xxe:()=>un.X,tdS:()=>ir,O$l:()=>ln.O,R_K:()=>cn.R,tPi:()=>R.t,jZU:()=>hn,SmN:()=>pn,CnO:()=>dn,p0P:()=>fn,XAC:()=>mn.X,Wvh:()=>gn.W,fBT:()=>yn.f,rVs:()=>cr,ers:()=>rs,uN7:()=>ar,Vl2:()=>kn.V,_b3:()=>In._,h62:()=>dt.h,$i:()=>Sn.$,L9e:()=>Nn.L,knu:()=>Tn.k,Nbs:()=>Cn.N,NXj:()=>$n.N,Z_8:()=>hr,luU:()=>ft.l,Smz:()=>En.S,ORZ:()=>An.O,AEp:()=>_.A,XeE:()=>Dn.X,RRF:()=>_n,odF:()=>Fn,wOQ:()=>On,yXz:()=>Mn,Bfx:()=>Ln,xZs:()=>Bn,Gg6:()=>Se.G,hg7:()=>zn.h,p4s:()=>Zn.p,Xu6:()=>Un,Two:()=>Wn.T,pUJ:()=>Pn.p,HHK:()=>Vn.H,GaM:()=>Gn,VD$:()=>Hn,arb:()=>jn.a,itS:()=>qn,lls:()=>Kn.l,P84:()=>Yn.P});var s={};n.r(s),n.d(s,{conv2d:()=>ms,depthwiseConv2d:()=>bs,matMul:()=>xs});var r=n(6235),a=n(7839),i=n(1470),o=n(6407),u=n(7097),l=n(9121),c=n(3740),h=n(569),p=n(2668);const d=(0,p.op)({addN_:function(e){h.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),h.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!h.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return u.BV.runKernel(l.Xze,s)}});var f=n(781),m=n(2998),g=n(47),y=n(7394),b=n(2421),x=n(1891),w=n(7037),v=n(9812),k=n(369),I=n(5176),S=n(2582),N=n(2271),T=n(4968);const C=(0,p.op)({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=(0,c._1)(e,"x","avgPool3d","float32");let o=i,p=!1;4===i.rank&&(p=!0,o=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h.hu(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),h.hu("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),(0,S.m)("avgPool3d",s,r);const d={x:o},f={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let m=u.BV.runKernel(l._k9,d,f);return m=(0,N.p)(m,o.dtype),p?(0,T.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});var $=n(6884),E=n(8687),A=n(4841),D=n(625),R=n(2676),_=n(1869);const F=(0,p.op)({basicLSTMCell_:function(e,t,n,s,r,a){const i=(0,c._1)(e,"forgetBias","basicLSTMCell"),u=(0,c._1)(t,"lstmKernel","basicLSTMCell"),l=(0,c._1)(n,"lstmBias","basicLSTMCell"),h=(0,c._1)(s,"data","basicLSTMCell"),p=(0,c._1)(r,"c","basicLSTMCell"),d=(0,c._1)(a,"h","basicLSTMCell"),f=(0,$.z)([h,d],1),m=(0,E.O)(f,u),g=(0,o.I)(m,l),y=g.shape[0],b=g.shape[1]/4,x=[y,b],w=(0,R.t)(g,[0,0],x),v=(0,R.t)(g,[0,b],x),k=(0,R.t)(g,[0,2*b],x),I=(0,R.t)(g,[0,3*b],x),S=(0,o.I)((0,A.d)((0,D.X)(w),(0,_.A)(v)),(0,A.d)(p,(0,D.X)((0,o.I)(i,k))));return[S,(0,A.d)((0,_.A)(S),(0,D.X)(I))]}});var O=n(8441),M=n(7505);const L=(0,p.op)({batchNorm2d_:function(e,t,n,s,r,a){const i=(0,c._1)(e,"x","batchNorm"),o=(0,c._1)(t,"mean","batchNorm"),u=(0,c._1)(n,"variance","batchNorm");let l,p;return null!=r&&(l=(0,c._1)(r,"scale","batchNorm")),null!=s&&(p=(0,c._1)(s,"offset","batchNorm")),h.hu(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),h.hu(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),h.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&h.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=p&&h.hu(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,u,p,l,a)}}),B=(0,p.op)({batchNorm3d_:function(e,t,n,s,r,a){const i=(0,c._1)(e,"x","batchNorm"),o=(0,c._1)(t,"mean","batchNorm"),u=(0,c._1)(n,"variance","batchNorm");let l,p;return null!=r&&(l=(0,c._1)(r,"scale","batchNorm")),null!=s&&(p=(0,c._1)(s,"offset","batchNorm")),h.hu(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),h.hu(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),h.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&h.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=p&&h.hu(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,u,p,l,a)}}),z=(0,p.op)({batchNorm4d_:function(e,t,n,s,r,a){const i=(0,c._1)(e,"x","batchNorm"),o=(0,c._1)(t,"mean","batchNorm"),u=(0,c._1)(n,"variance","batchNorm");let l,p;return null!=r&&(l=(0,c._1)(r,"scale","batchNorm")),null!=s&&(p=(0,c._1)(s,"offset","batchNorm")),h.hu(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),h.hu(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),h.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&h.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=p&&h.hu(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`)),(0,M.t)(i,o,u,p,l,a)}}),U=(0,p.op)({bincount_:function(e,t,n){const s=(0,c._1)(e,"x","bincount"),r=(0,c._1)(t,"weights","bincount");h.hu("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),h.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),h.hu(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return u.BV.runKernel(l.zvY,a,i)}}),W=(0,p.op)({broadcastArgs_:function(e,t){const n=(0,c._1)(e,"s0","broadcastArgs","int32"),s=(0,c._1)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return u.BV.runKernel(l.eEB,r)}});var P=n(8247),V=n(2657),G=n(6825),H=n(2279),j=n(8723),X=n(1661);const q=(0,p.op)({concat1d_:function(e){return(0,$.z)(e,0)}}),K=(0,p.op)({concat2d_:function(e,t){return(0,$.z)(e,t)}}),Y=(0,p.op)({concat3d_:function(e,t){return(0,$.z)(e,t)}}),Q=(0,p.op)({concat4d_:function(e,t){return(0,$.z)(e,t)}});var Z=n(1355),J=n(4794),ee=n(1405);const te=(0,p.op)({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=(0,c._1)(e,"x","conv3d"),o=(0,c._1)(t,"filter","conv3d");let p=i,d=!1;4===i.rank&&(d=!0,p=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h.hu(5===p.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${p.rank}.`)),h.hu(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),h.hu(p.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),h.hu((0,S.jT)(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),h.hu("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const f={x:p,filter:o},m={strides:n,pad:s,dataFormat:r,dilations:a},g=u.BV.runKernel(l.x12,f,m);return d?(0,T.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}});var ne=n(7594);const se=(0,p.op)({conv3dTranspose_:function(e,t,n,s,r){const a=(0,c._1)(e,"x","conv3dTranspose"),i=(0,c._1)(t,"filter","conv3dTranspose");return(0,ne._)(n,a,i,s,r)}});var re=n(173),ae=n(2699),ie=n(9640),oe=n(7405);const ue=(0,p.op)({denseBincount_:function(e,t,n,s=!1){const r=(0,c._1)(e,"x","denseBincount"),a=(0,c._1)(t,"weights","denseBincount");h.hu("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),h.hu(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),h.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),h.hu(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return u.BV.runKernel(l.QRR,i,o)}});var le=n(9112),ce=n(4718);const he=(0,p.op)({diag_:function(e){const t={x:(0,c._1)(e,"x","diag")};return u.BV.runKernel(l.$w,t)}});var pe=n(557),de=n(1274),fe=n(9322),me=n(548);const ge=(0,p.op)({einsum_:function(e,...t){const n=t.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"einsum"))),s={equation:e};return u.BV.runKernel(l.$g6,n,s)}});var ye=n(3233),be=n(6477),xe=n(4650),we=n(1954),ve=n(4842),ke=n(1300),Ie=n(3426),Se=n(7501);const Ne=(0,p.op)({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=(0,V.f)([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=(0,T.X)(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return(0,Se.G)((0,ke.d)(i,0),[n[0],1,1]);if(2===n.length)return(0,Se.G)((0,ke.d)((0,ke.d)(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,Se.G)((0,ke.d)((0,ke.d)((0,ke.d)(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Te=n(4006),Ce=n(6943),$e=n(9165),Ee=n(4926),Ae=n(636),De=n(7630),Re=n(4386),_e=n(3963),Fe=n(4365),Oe=n(6230),Me=n(9133),Le=n(6573),Be=n(624);function ze(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return u.BV.runKernel(l.e7N,{},s)}var Ue=n(9648),We=n(2597),Pe=n(7474),Ve=n(3888),Ge=n(1510),He=n(1391),je=n(2856),Xe=n(8651),qe=n(5750),Ke=n(596);const Ye=2147483648,Qe=(0,p.op)({searchSorted_:function(e,t,n="left"){const s=(0,c._1)(e,"sortedSequence","searchSorted"),r=(0,c._1)(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=r.shape[r.shape.length-1],o=(0,T.X)(s,[-1,a]),p=(0,T.X)(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==p.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,h.NA)(p.shape)>=Ye)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=Ye)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const d={sortedSequence:o,values:p},f={side:n};return u.BV.runKernel(l.nr8,d,f)}});function Ze(e,t){return Qe(e,t,"left")}var Je=n(3307),et=n(1174);const tt=(0,p.op)({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=(0,c._1)(e,"x","maxPool3d");let o=i,p=!1;4===i.rank&&(p=!0,o=(0,T.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h.hu(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),h.hu("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),(0,S.m)("maxPool3d",s,r);const d={x:o},f={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},m=u.BV.runKernel(l.OAf,d,f);return p?(0,T.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),nt=(0,p.op)({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:(0,c._1)(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=u.BV.runKernel(l.vFR,a,i);return{result:o[0],indexes:o[1]}}});var st=n(632),rt=n(5130),at=n(4917),it=n(4077);function ot(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=(0,c._1)(e,"x","meshgrid",e instanceof it.es?e.dtype:"float32");if(void 0===t)return[s];let r=(0,c._1)(t,"y","meshgrid",t instanceof it.es?t.dtype:"float32");const a=(0,h.NA)(s.shape),i=(0,h.NA)(r.shape);return"xy"===n?(s=(0,T.X)(s,[1,-1]),r=(0,T.X)(r,[-1,1]),[(0,E.O)((0,at.i)([i,1],s.dtype),s),(0,E.O)(r,(0,at.i)([1,a],r.dtype))]):(s=(0,T.X)(s,[-1,1]),r=(0,T.X)(r,[1,-1]),[(0,E.O)(s,(0,at.i)([1,i],s.dtype)),(0,E.O)((0,at.i)([a,1],r.dtype),r)])}var ut=n(5735),lt=n(4513),ct=n(1483),ht=n(5228),pt=n(3591),dt=n(248),ft=n(827);const mt=(0,p.op)({moments_:function(e,t=null,n=!1){e=(0,c._1)(e,"x","moments");const s=(0,h.EC)(t,e.shape),r=(0,rt.J)(e,s,n);let a=r.shape;n||(a=(0,pt.rv)(r.shape,s));const i=(0,dt.h)((0,ft.l)((0,N.p)(e,"float32"),(0,T.X)(r,a)));return{mean:r,variance:(0,rt.J)(i,s,n)}}}),gt=(0,p.op)({multiRNNCell_:function(e,t,n,s){const r=(0,c._1)(t,"data","multiRNNCell"),a=(0,c.sI)(n,"c","multiRNNCell"),i=(0,c.sI)(s,"h","multiRNNCell");let o=r;const u=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);u.push(n[0]),u.push(n[1]),o=n[1]}const l=[],h=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),h.push(u[e+1]);return[l,h]}}),yt=(0,p.op)({multinomial_:function(e,t,n,s=!1){const r=(0,c._1)(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?(0,T.X)(r,[1,-1]):r},h={numSamples:t,seed:n,normalized:s},p=u.BV.runKernel(l.NZg,o,h);return 1===i?(0,T.X)(p,[p.size]):p}});var bt=n(7370),xt=n(6500),wt=n(6708),vt=n(7846);const kt=(0,p.op)({outerProduct_:function(e,t){const n=(0,c._1)(e,"v1","outerProduct"),s=(0,c._1)(t,"v2","outerProduct");h.hu(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=(0,T.X)(n,[-1,1]),a=(0,T.X)(s,[1,-1]);return(0,E.O)(r,a)}});var It=n(9682);const St=(0,p.op)({pad1d_:function(e,t,n=0){return(0,h.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,It.v)(e,[t],n)}}),Nt=(0,p.op)({pad2d_:function(e,t,n=0){return(0,h.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}}),Tt=(0,p.op)({pad3d_:function(e,t,n=0){return(0,h.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}}),Ct=(0,p.op)({pad4d_:function(e,t,n=0){return(0,h.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,It.v)(e,t,n)}});var $t=n(5860),Et=n(3453),At=n(8151),Dt=n(9798),Rt=n(9451);const _t=(0,p.op)({raggedGather_:function(e,t,n,s){const r={paramsNestedSplits:e.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:(0,c._1)(t,"paramsDenseValues","raggedGather"),indices:(0,c._1)(n,"indices","raggedGather","int32")},a={outputRaggedRank:s},i=u.BV.runKernel(l.dDz,r,a);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}}),Ft=(0,p.op)({raggedRange_:function(e,t,n){const s=(0,c._1)(e,"starts","raggedRange"),r={starts:s,limits:(0,c._1)(t,"limits","raggedRange",s.dtype),deltas:(0,c._1)(n,"deltas","raggedRange",s.dtype)},a=u.BV.runKernel(l.CQl,r);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),Ot=(0,p.op)({raggedTensorToTensor_:function(e,t,n,s,r){const a=(0,c._1)(e,"shape","raggedTensorToTensor","int32"),i=(0,c._1)(t,"values","raggedTensorToTensor"),o={shape:a,values:i,defaultValue:(0,c._1)(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:s.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"raggedTensorToTensor","int32")))},h={rowPartitionTypes:r};return u.BV.runKernel(l.BiW,o,h)}}),Mt=(0,p.op)({rand_:function(e,t,n){(0,h.Mu)(e);const s=(0,h.NA)(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return u.BV.makeTensor(r,e,n)}});var Lt=n(6377);class Bt{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Lt.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class zt{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=Lt.alea(r.toString()),this.randn=new Bt(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Ut{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Lt.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Wt=(0,p.op)({randomGamma_:function(e,t,n=1,s="float32",r){if((0,h.Mu)(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new zt(t,n,s,r),i=(0,V.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Pt=(0,p.op)({randomNormal_:function(e,t=0,n=1,s,r){if((0,h.Mu)(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Bt(t,n,s,!1,r),i=(0,V.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Vt=(0,p.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Pt(e,0,1,t,n)}}),Gt=(0,p.op)({randomUniform_:function(e,t=0,n=1,s="float32",r){(0,h.Mu)(e);const a=(0,V.f)(e,s),i=new Ut(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Ht(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return u.BV.runKernel(l.e6w,{},r)}var jt=n(766),Xt=n(9036),qt=n(7409),Kt=n(3582),Yt=n(7486);const Qt=(0,p.op)({reverse1d_:function(e){const t=(0,c._1)(e,"x","reverse");return h.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,Yt.G)(t,0)}}),Zt=(0,p.op)({reverse2d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return h.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,Yt.G)(n,t)}}),Jt=(0,p.op)({reverse3d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return h.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,Yt.G)(n,t)}}),en=(0,p.op)({reverse4d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return h.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,Yt.G)(n,t)}});var tn=n(7809),nn=n(2634),sn=n(9494),rn=n(5503),an=n(8678);const on=async function(e,t){const n=(0,c._1)(e,"x","setdiff1d"),s=(0,c._1)(t,"y","setdiff1d");h.hu(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),h.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),h.hu(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const u=new it.YD([o],n.dtype),l=new it.YD([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(u.values[t]=r[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};var un=n(4434),ln=n(9331),cn=n(3254);const hn=(0,p.op)({slice1d_:function(e,t,n){const s=(0,c._1)(e,"x","slice1d");return h.hu(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,[t],[n])}}),pn=(0,p.op)({slice2d_:function(e,t,n){const s=(0,c._1)(e,"x","slice2d");return h.hu(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,t,n)}}),dn=(0,p.op)({slice3d_:function(e,t,n){const s=(0,c._1)(e,"x","slice3d");return h.hu(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,t,n)}}),fn=(0,p.op)({slice4d_:function(e,t,n){const s=(0,c._1)(e,"x","slice4d");return h.hu(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),(0,R.t)(s,t,n)}});var mn=n(682),gn=n(3694),yn=n(7918),bn=n(7020),xn=n(8447),wn=n(4415),vn=n(3710),kn=n(8644),In=n(3261),Sn=n(5265),Nn=n(9590),Tn=n(2991),Cn=n(1901),$n=n(5158),En=n(5475),An=n(1173),Dn=n(701),Rn=n(7852);function _n(e,t){(0,h.Cq)(e);const n=(0,c.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,Rn.H)(e,null,n,t)}function Fn(e,t,n){if((0,h.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=(0,c.C)(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,Rn.H)(e,t,s,n)}function On(e,t,n){if((0,h.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=(0,c.C)(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,Rn.H)(e,t,s,n)}function Mn(e,t,n){if((0,h.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=(0,c.C)(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,Rn.H)(e,t,s,n)}function Ln(e,t,n){if((0,h.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=(0,c.C)(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,Rn.H)(e,t,s,n)}function Bn(e,t,n){if((0,h.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=(0,c.C)(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||s,(0,Rn.H)(e,t,s,n)}var zn=n(3243);const Un=(0,p.op)({truncatedNormal_:function(e,t=0,n=1,s,r){if((0,h.Mu)(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Bt(t,n,s,!0,r),i=(0,V.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});var Wn=n(9608),Pn=n(8749),Vn=n(4136);function Gn(e,t){return Qe(e,t,"right")}function Hn(e,t=!0,n,s){return u.BV.makeVariable(e,t,n,s)}var jn=n(5912),Xn=n(8333);const qn=async function(e){const t=(0,c._1)(e,"condition","whereAsync","bool"),n=await t.data(),s=(0,Xn.Z)(t.shape,n);return e!==t&&t.dispose(),s};var Kn=n(723),Yn=n(6577);const Qn=async function(e,t,n){const s=(0,c._1)(e,"tensor","boolMask"),r=(0,c._1)(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;h.hu(i>0,(()=>"mask cannot be scalar")),h.k5(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+i;e++)u*=o[e];const l=o.slice(0,a).concat([u],o.slice(a+i)),p=(0,T.X)(s,l),d=(0,T.X)(r,[-1]),f=await qn(d),m=(0,Nn.L)(f,[1]),g=(0,Ee.I)(p,m,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),m.dispose(),p.dispose(),d.dispose(),f.dispose(),g};var Zn=n(9065),Jn=n(3561),es=n(747);const ts=(0,p.op)({movingAverage_:function(e,t,n,s,r=!0){const a=(0,c._1)(e,"v","movingAverage"),i=(0,c._1)(t,"x","movingAverage"),u=(0,c._1)(n,"decay","movingAverage");(0,es.assertTypesMatch)(a,i),h.hu(h.cO(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=(0,sn.i)(1),p=(0,ft.l)(l,u);let d=(0,A.d)((0,ft.l)(i,a),p);if(r){h.hu(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=(0,c._1)(s,"step","movingAverage");d=(0,de.h)(d,(0,ft.l)(l,(0,Et.s)(u,e)))}return(0,o.I)(a,d)}});var ns=n(3028);const ss=(0,p.op)({scatterND_:function(e,t,n){(0,h.Mu)(n);const s=(0,c._1)(e,"indices","scatterND","int32"),r=(0,c._1)(t,"updates","scatterND");ns.b0(r,s,n);const a={indices:s,updates:r},i={shape:n};return u.BV.runKernel(l.xQA,a,i)}}),rs=(0,p.op)({sparseToDense_:function(e,t,n,s=0){(0,h.Mu)(n);const r=(0,c._1)(e,"sparseIndices","sparseToDense","int32"),a=(0,c._1)(t,"sparseValues","sparseToDense","string_or_numeric"),i=(0,c._1)(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},p={outputShape:n};return u.BV.runKernel(l.D2d,o,p)}}),as=(0,p.op)({gatherND_:function(e,t){const n=(0,c._1)(t,"indices","gatherND","int32"),s={params:(0,c._1)(e,"x","gatherND","string_or_numeric"),indices:n};return u.BV.runKernel(l.q1x,s)}}),is=(0,p.op)({dropout_:function(e,t,n,s){const r=(0,c._1)(e,"x","dropout");if(h.hu("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),h.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof it.es?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(h.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,u=(0,de.h)((0,Ce.G)((0,o.I)(Gt(a,0,1,"float32",s),i)),i);return(0,A.d)(r,u)}});function os(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function us(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return _n(r,"float32")}const ls=async function(e,t,n=1){const s=(0,c._1)(e,"predictions","inTopK"),r=(0,c._1)(t,"targets","inTopK");(0,h.hu)(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),(0,h.hu)(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),(0,h.k5)(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];(0,h.hu)(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[u,l]=[i.length/a,a],p=(0,h.WP)("bool",u);for(let e=0;e<u;e++){const t=e*l,s=i.subarray(t,t+l),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),p[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){p[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),(0,Dn.X)(p,r.shape,"bool")};var cs=n(633),hs=n(2200),ps=n(6013),ds=n(9832),fs=n(9323);const ms=(0,p.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:p,activation:d="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(d=d||"linear",!1===(0,fs.uy)(u.BV.state.gradientDepth,d)){h.hu("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let u=(0,J.T)(e,t,n,s,r,a,i);return null!=p&&(u=(0,o.I)(u,p)),(0,fs.QH)(u,d,f,m)}const g=(0,c._1)(e,"x","conv2d","float32"),y=(0,c._1)(t,"filter","conv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,T.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),h.hu(4===b.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${b.rank}.`)),h.hu(4===y.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${y.rank}.`)),S.m("fused conv2d",s,i);const w="NHWC"===r?b.shape[3]:b.shape[1];h.hu(y.shape[2]===w,(()=>`Error in conv2d: depth of input (${w}) must match input depth for filter ${y.shape[2]}.`)),h.hu(S.jT(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const v=S.Ix(b.shape,y.shape,n,a,s,i);let k,I;if(null!=p&&(k=(0,c._1)(p,"bias","fused conv2d"),[k]=(0,es.makeTypesMatch)(k,g),"NHWC"===r?hs.assertAndGetBroadcastShape(v.outShape,k.shape):(h.hu(k.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${k.shape.length}.`)),h.hu(0===k.shape.length||k.shape[0]===v.outChannels||1===k.shape[0],(()=>`Error in fused conv2d: bias shape (${k.shape}) is not compatible with the number of output channels (${v.outChannels})`)))),null!=f){const e=f.shape;if(h.hu(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)h.hu(1===e[0]||e[0]===v.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${v.outChannels}).`));else if(3===e.length)try{hs.assertAndGetBroadcastShape(e,v.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${v.outShape}).`;throw Error(n)}I=(0,c._1)(f,"prelu weights","fused conv2d")}const N=(e,t)=>{h.hu("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[i,o,u,l]=t,c=(0,fs.Fr)(e,u,d);h.hu(S.I0(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[(0,ds._)(o.shape,c,i,n,s),(0,ps.p)(o,c,i.shape,n,s)];if(null!=l){const e=(0,fs.pf)(l,c);p.push(e)}return p},C={x:b,filter:y,bias:k,preluActivationWeights:I},$={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:d,leakyreluAlpha:m};if(null==p){const e=(0,cs.cb)(((e,t,n)=>{let s=u.BV.runKernel(l._V0,C,$);return n([t,e,s]),x&&(s=(0,T.X)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:N}}));return e(b,y)}{const e=(0,cs.cb)(((e,t,n,s)=>{let r=u.BV.runKernel(l._V0,C,$);return s([t,e,r,n]),x&&(r=(0,T.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:N}}));return e(b,y,k)}}});var gs=n(8098),ys=n(4375);const bs=(0,p.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:p,activation:d="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(!1===(0,fs.uy)(u.BV.state.gradientDepth,d)){let u=(0,ce.B)(e,t,n,s,r,a,i);return null!=p&&(u=(0,o.I)(u,p)),(0,fs.QH)(u,d,f,m)}const g=(0,c._1)(e,"x","depthwiseConv2d","float32"),y=(0,c._1)(t,"filter","depthwiseConv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,T.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),h.hu(4===b.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`)),h.hu(4===y.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`)),h.hu(b.shape[3]===y.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`)),null==a&&(a=[1,1]),h.hu(S.jT(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),S.m("fused depthwiseConv2d",s,i);const w=S.Ix(b.shape,y.shape,n,a,s,i,!0);let v,k;null!=p&&(v=(0,c._1)(p,"bias","fused conv2d"),[v]=(0,es.makeTypesMatch)(v,g),hs.assertAndGetBroadcastShape(w.outShape,v.shape)),null!=f&&(k=(0,c._1)(f,"prelu weights","fused depthwiseConv2d"));const I=(e,t)=>{h.hu(S.I0(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,l]=t,c=(0,fs.Fr)(e,u,d),p=(0,ys.v)(o.shape,c,r,n,s,a,i),f=(0,gs.z)(o,c,r.shape,n,s,a,i);return null!=l?[p,f,(0,fs.pf)(v,c)]:[p,f]},N={x:b,filter:y,bias:v,preluActivationWeights:k},C={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:d,leakyreluAlpha:m};if(null==p){const e=(0,cs.cb)(((e,t,n)=>{let s=u.BV.runKernel(l.luS,N,C);return n([t,e,s]),x&&(s=(0,T.X)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:I}}));return e(b,y)}{const e=(0,cs.cb)(((e,t,n,s)=>{let r=u.BV.runKernel(l.luS,N,C);return s([t,e,r,n]),x&&(r=(0,T.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:I}}));return e(b,y,v)}}}),xs=(0,p.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:p=.2}){if(!1===(0,fs.uy)(u.BV.state.gradientDepth,a)){let u=(0,E.O)(e,t,n,s);return null!=r&&(u=(0,o.I)(u,r)),(0,fs.QH)(u,a,i,p)}let d=(0,c._1)(e,"a","fused matMul"),f=(0,c._1)(t,"b","fused matMul");[d,f]=(0,es.makeTypesMatch)(d,f);const m=n?d.shape[d.rank-2]:d.shape[d.rank-1],g=s?f.shape[f.rank-1]:f.shape[f.rank-2],y=n?d.shape[d.rank-1]:d.shape[d.rank-2],b=s?f.shape[f.rank-2]:f.shape[f.rank-1],x=d.shape.slice(0,-2),w=f.shape.slice(0,-2),v=h.NA(x),k=h.NA(w);h.hu(m===g,(()=>`Error in fused matMul: inner shapes (${m}) and (${g}) of Tensors with shapes ${d.shape} and ${f.shape} and transposeA=${n} and transposeB=${s} must match.`));const I=hs.assertAndGetBroadcastShape(d.shape.slice(0,-2),f.shape.slice(0,-2)).concat([y,b]),S=n?(0,T.X)(d,[v,m,y]):(0,T.X)(d,[v,y,m]),N=s?(0,T.X)(f,[k,b,g]):(0,T.X)(f,[k,g,b]);let C,$;null!=r&&(C=(0,c._1)(r,"bias","fused matMul"),[C]=(0,es.makeTypesMatch)(C,d),hs.assertAndGetBroadcastShape(I,C.shape)),null!=i&&($=(0,c._1)(i,"prelu weights","fused matMul"));const A=(e,t)=>{const[i,o,u,l]=t,c=(0,fs.Fr)((0,T.X)(e,u.shape),u,a);let h,p;return n||s?!n&&s?(h=(0,E.O)(c,o,!1,!1),p=(0,E.O)(c,i,!0,!1)):n&&!s?(h=(0,E.O)(o,c,!1,!0),p=(0,E.O)(i,c,!1,!1)):(h=(0,E.O)(o,c,!0,!0),p=(0,E.O)(c,i,!0,!0)):(h=(0,E.O)(c,o,!1,!0),p=(0,E.O)(i,c,!0,!1)),null!=r?[h,p,(0,fs.pf)(l,c)]:[h,p]},D={a:S,b:N,bias:C,preluActivationWeights:$},R={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:p};if(null==r){const e=(0,cs.cb)(((e,t,n)=>{const s=u.BV.runKernel(l.usg,D,R);return n([e,t,s]),{value:(0,T.X)(s,I),gradFunc:A}}));return e(S,N)}{const e=(0,cs.cb)(((e,t,n,s)=>{const r=u.BV.runKernel(l.usg,D,R);return s([e,t,r,n]),{value:(0,T.X)(r,I),gradFunc:A}}));return e(S,N,C)}}}),ws=(0,p.op)({hammingWindow_:function(e){return us(e,.54,.46)}}),vs=(0,p.op)({hannWindow_:function(e){return us(e,.5,.5)}}),ks=(0,p.op)({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push((0,R.t)(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=(0,$.z)([(0,R.t)(e,a,t-s),(0,Te.h)([s],r)]);i.push(o),a+=n}return 0===i.length?Fn([],[0,t]):(0,T.X)((0,$.z)(i),[i.length,t])}}),Is=(0,p.op)({stft_:function(e,t,n,s,r=vs){null==s&&(s=os(t));const a=ks(e,t,n),i=(0,A.d)(a,r(t));return(0,vn.Q)(i,s)}}),Ss=(0,p.op)({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=(0,c._1)(e,"image","cropAndResize"),o=(0,c._1)(t,"boxes","cropAndResize","float32"),p=(0,c._1)(n,"boxInd","cropAndResize","int32"),d=o.shape[0];h.hu(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),h.hu(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${d},4] but had shape ${o.shape}.`)),h.hu(1===p.rank&&p.shape[0]===d,(()=>`Error in cropAndResize: boxInd must be have size [${d}] but had shape ${o.shape}.`)),h.hu(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),h.hu(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),h.hu("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const f={image:i,boxes:o,boxInd:p},m={method:r,extrapolationValue:a,cropSize:s};return u.BV.runKernel(l.VcC,f,m)}}),Ns=(0,p.op)({flipLeftRight_:function(e){const t=(0,c._1)(e,"image","flipLeftRight","float32");h.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return u.BV.runKernel(l.Uyb,n,{})}}),Ts=(0,p.op)({grayscaleToRGB_:function(e){const t=(0,c._1)(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];h.hu(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),h.hu(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,(0,Se.G)(t,r)}}),Cs=(0,p.op)({rotateWithOffset_:function(e,t,n=0,s=.5){const r=(0,c._1)(e,"image","rotateWithOffset","float32");h.hu(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return u.BV.runKernel(l.b9H,a,i)}});function $s(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),h.hu(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),h.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),h.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),h.hu(1===t.rank,(()=>"scores must be a 1D tensor")),h.hu(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),h.hu(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Es=(0,p.op)({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=(0,c._1)(e,"boxes","nonMaxSuppression","float32"),i=(0,c._1)(t,"scores","nonMaxSuppression","float32"),o=$s(a,i,n,s,r),h={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return u.BV.runKernel(l.uv1,{boxes:a,scores:i},h)}});var As=n(3337);const Ds=(0,p.op)({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=(0,c._1)(e,"boxes","nonMaxSuppression"),o=(0,c._1)(t,"scores","nonMaxSuppression"),h=$s(i,o,n,s,r,a),p={boxes:i,scores:o},d={maxOutputSize:n=h.maxOutputSize,iouThreshold:s=h.iouThreshold,scoreThreshold:r=h.scoreThreshold,softNmsSigma:a=h.softNmsSigma},f=u.BV.runKernel(l.W0H,p,d);return{selectedIndices:f[0],selectedScores:f[1]}}}),Rs=(0,p.op)({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=(0,c._1)(e,"boxes","nonMaxSuppression"),o=(0,c._1)(t,"scores","nonMaxSuppression"),h=$s(i,o,n,s,r,null),p={boxes:i,scores:o},d={maxOutputSize:h.maxOutputSize,iouThreshold:h.iouThreshold,scoreThreshold:h.scoreThreshold,padToMaxOutputSize:a},f=u.BV.runKernel(l.cye,p,d);return{selectedIndices:f[0],validOutputs:f[1]}}});var _s=n(3305),Fs=n(5098);const Os=(0,p.op)({threshold_:function(e,t="binary",n=!1,s=.5){const r=(0,c._1)(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,u,l,p,d=(0,A.d)(_n([s]),255);if(h.hu(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),h.hu(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),h.hu("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),h.hu("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,u,l]=(0,kn.V)(r,[1,1,1],-1);const e=(0,A.d)(i,.2989),t=(0,A.d)(u,.587),n=(0,A.d)(l,.114);p=(0,o.I)((0,o.I)(e,t),n)}else p=e;"otsu"===t&&(d=function(e,t){let n,s,r,a,i,u,l=_n([-1]),c=_n([0]),h=_n([0]);for(let p=0;p<e.size-1;p++){n=(0,R.t)(e,0,p+1),s=(0,R.t)(e,p+1),i=(0,de.h)((0,En.S)(n),t),u=(0,de.h)((0,En.S)(s),t);const d=(0,En.S)((0,A.d)(n,Ht(0,n.size)));r=(0,de.h)(d,(0,En.S)(n));const f=(0,Te.h)(s.shape,n.size),m=(0,o.I)(Ht(0,s.size),f),g=(0,A.d)(s,m);a=(0,de.h)((0,En.S)(g),(0,En.S)(s));const y=(0,ft.l)(r,a),b=(0,ft.l)(r,a),x=(0,A.d)(i,u);h=(0,A.d)((0,A.d)(x,y),b);const w=(0,Ae.p)(h,c);c=(0,jn.a)(w,h,c),l=(0,jn.a)(w,_n([p]),l)}return l}(U((0,N.p)((0,tn.N)(p),"int32"),(0,Dn.X)([]),256),a));const f=n?(0,Be.z)(p,d):(0,Ae.p)(p,d);return(0,N.p)((0,A.d)(f,255),"int32")}}),Ms=(0,p.op)({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=(0,c._1)(e,"image","transform","float32"),o=(0,c._1)(t,"transforms","transform","float32");h.hu(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),h.hu(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),h.hu(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const p={image:i,transforms:o},d={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return u.BV.runKernel(l.wx7,p,d)}}),Ls=(0,p.op)({bandPart_:function(e,t,n){(0,h.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,h.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=(0,c._1)(e,"a","bandPart");(0,h.hu)(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=(0,T.X)(Ht(0,a,1,"int32"),[-1,1]),u=Ht(0,i,1,"int32"),l=(0,ft.l)(o,u),p=(0,je.H)((0,Be.z)(l,(0,sn.i)(+t,"int32")),(0,De.b)(l,(0,sn.i)(-n,"int32"))),d=(0,Kn.l)([a,i],s.dtype);return(0,T.X)((0,Tn.k)((0,Vn.H)((0,T.X)(s,[-1,a,i])).map((e=>(0,jn.a)(p,e,d)))),r)}}),Bs=(0,p.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,h.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,h.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,kn.V)(e,e.shape[0],0).map((e=>(0,Nn.L)(e,[0])));(0,h.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(u.BV.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=(0,A.d)((0,En.S)((0,A.d)(n[s],e)),n[s]);e=(0,ft.l)(e,t)}return(0,de.h)(e,(0,Jn.K)(e,"euclidean"))})));return t?(0,Tn.k)(n,0):n}});var zs=n(4368);function Us(e,t=!1){return u.BV.tidy((()=>{(0,h.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Ne(n),a=(0,j.d)(e);const i=Fn([[1]],[1,1]);let o=(0,j.d)(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,c=r;[o,a,r]=u.BV.tidy((()=>{const t=(0,R.t)(a,[e,e],[n-e,1]),u=(0,Jn.K)(t),l=(0,R.t)(a,[e,e],[1,1]),c=(0,jn.a)((0,Ae.p)(l,0),Fn([[-1]]),Fn([[1]])),h=(0,ft.l)(l,(0,A.d)(c,u)),p=(0,de.h)(t,h);o=1===p.shape[0]?(0,j.d)(i):(0,$.z)([i,(0,R.t)(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=(0,bt.W)((0,de.h)((0,E.O)(c,h),u)),f=(0,R.t)(a,[e,0],[n-e,s]),m=(0,A.d)(d,o),g=(0,Zn.p)(o);if(0===e)a=(0,ft.l)(f,(0,E.O)(m,(0,E.O)(g,f)));else{const t=(0,ft.l)(f,(0,E.O)(m,(0,E.O)(g,f)));a=(0,$.z)([(0,R.t)(a,[0,0],[e,s]),t],0)}const y=(0,Zn.p)(m),b=(0,R.t)(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=(0,ft.l)(b,(0,E.O)((0,E.O)(b,o),y));else{const t=(0,ft.l)(b,(0,E.O)((0,E.O)(b,o),y));r=(0,$.z)([(0,R.t)(r,[0,0],[n,e]),t],1)}return[o,a,r]})),(0,zs.B9)([t,l,c])}return!t&&n>s&&(r=(0,R.t)(r,[0,0],[n,s]),a=(0,R.t)(a,[0,0],[s,s])),[r,a]}))}const Ws=(0,p.op)({qr_:function(e,t=!1){if((0,h.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Us(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=(0,Vn.H)((0,T.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=Us(e,t);r.push(n),a.push(s)})),[(0,T.X)((0,Tn.k)(r,0),e.shape),(0,T.X)((0,Tn.k)(a,0),e.shape)]}}});var Ps;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ps||(Ps={}));const Vs=(0,p.op)({computeWeightedLoss_:function(e,t,n=Ps.SUM_BY_NONZERO_WEIGHTS){const s=(0,c._1)(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=(0,c._1)(t,"weights","computeWeightedLoss"));const a=null==r?s:(0,A.d)(s,r);if(n===Ps.NONE)return a;if(n===Ps.SUM)return(0,En.S)(a);if(n===Ps.MEAN){if(null==r)return(0,rt.J)(a);{const e=s.size/r.size,t=(0,de.h)((0,En.S)(a),(0,En.S)(r));return e>1?(0,de.h)(t,(0,sn.i)(e)):t}}if(n===Ps.SUM_BY_NONZERO_WEIGHTS){if(null==r)return(0,de.h)((0,En.S)(a),(0,sn.i)(s.size));{const e=(0,A.d)(r,(0,at.i)(s.shape)),t=(0,N.p)((0,En.S)((0,xt.Q)(e,(0,sn.i)(0))),"float32");return(0,de.h)((0,En.S)(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),Gs=(0,p.op)({absoluteDifference_:function(e,t,n,s=Ps.SUM_BY_NONZERO_WEIGHTS){const a=(0,c._1)(e,"labels","absoluteDifference"),i=(0,c._1)(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=(0,c._1)(n,"weights","absoluteDifference")),(0,h.k5)(a.shape,i.shape,"Error in absoluteDifference: ");const u=(0,r.W)((0,ft.l)(a,i));return Vs(u,o,s)}}),Hs=(0,p.op)({cosineDistance_:function(e,t,n,s,r=Ps.SUM_BY_NONZERO_WEIGHTS){const a=(0,c._1)(e,"labels","cosineDistance"),i=(0,c._1)(t,"predictions","cosineDistance");let o=null;null!=s&&(o=(0,c._1)(s,"weights","cosineDistance")),(0,h.k5)(a.shape,i.shape,"Error in cosineDistance: ");const u=(0,sn.i)(1),l=(0,ft.l)(u,(0,En.S)((0,A.d)(a,i),n,!0));return Vs(l,o,r)}}),js=(0,p.op)({hingeLoss_:function(e,t,n,s=Ps.SUM_BY_NONZERO_WEIGHTS){let r=(0,c._1)(e,"labels","hingeLoss");const a=(0,c._1)(t,"predictions","hingeLoss");let i=null;null!=n&&(i=(0,c._1)(n,"weights","hingeLoss")),(0,h.k5)(r.shape,a.shape,"Error in hingeLoss: ");const o=(0,sn.i)(1);r=(0,ft.l)((0,A.d)((0,sn.i)(2),r),o);const u=(0,qt.U)((0,ft.l)(o,(0,A.d)(r,a)));return Vs(u,i,s)}}),Xs=(0,p.op)({huberLoss_:function(e,t,n,s=1,a=Ps.SUM_BY_NONZERO_WEIGHTS){const i=(0,c._1)(e,"labels","huberLoss"),u=(0,c._1)(t,"predictions","huberLoss");let l=null;null!=n&&(l=(0,c._1)(n,"weights","huberLoss")),(0,h.k5)(i.shape,u.shape,"Error in huberLoss: ");const p=(0,sn.i)(s),d=(0,r.W)((0,ft.l)(u,i)),f=(0,lt.L)(d,p),m=(0,ft.l)(d,f),g=(0,o.I)((0,A.d)((0,sn.i)(.5),(0,dt.h)(f)),(0,A.d)(p,m));return Vs(g,l,a)}}),qs=(0,p.op)({logLoss_:function(e,t,n,s=1e-7,r=Ps.SUM_BY_NONZERO_WEIGHTS){const a=(0,c._1)(e,"labels","logLoss"),i=(0,c._1)(t,"predictions","logLoss");let u=null;null!=n&&(u=(0,c._1)(n,"weights","logLoss")),(0,h.k5)(a.shape,i.shape,"Error in logLoss: ");const l=(0,sn.i)(1),p=(0,sn.i)(s),d=(0,bt.W)((0,A.d)(a,(0,We.c)((0,o.I)(i,p)))),f=(0,A.d)((0,ft.l)(l,a),(0,We.c)((0,o.I)((0,ft.l)(l,i),p))),m=(0,ft.l)(d,f);return Vs(m,u,r)}}),Ks=(0,p.op)({meanSquaredError_:function(e,t,n,s=Ps.SUM_BY_NONZERO_WEIGHTS){const r=(0,c._1)(e,"labels","meanSquaredError"),a=(0,c._1)(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=(0,c._1)(n,"weights","meanSquaredError")),(0,h.k5)(r.shape,a.shape,"Error in meanSquaredError: ");const o=(0,Sn.$)(r,a);return Vs(o,i,s)}}),Ys=(0,p.op)({sigmoidCrossEntropy_:function(e,t,n,s=0,a=Ps.SUM_BY_NONZERO_WEIGHTS){let i=(0,c._1)(e,"multiClassLabels","sigmoidCrossEntropy");const u=(0,c._1)(t,"logits","sigmoidCrossEntropy");let l=null;if(null!=n&&(l=(0,c._1)(n,"weights","sigmoidCrossEntropy")),(0,h.k5)(i.shape,u.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=(0,sn.i)(s),t=(0,sn.i)(1),n=(0,sn.i)(.5);i=(0,o.I)((0,A.d)(i,(0,ft.l)(t,e)),(0,A.d)(n,e))}const p=function(e,t){const n=(0,c._1)(e,"labels","sigmoidCrossEntropyWithLogits"),s=(0,c._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,h.k5)(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=(0,qt.U)(s),i=(0,A.d)(s,n),u=(0,Pe.K)((0,ve.Q)((0,bt.W)((0,r.W)(s))));return(0,o.I)((0,ft.l)(a,i),u)}(i,u);return Vs(p,l,a)}}),Qs=(0,p.op)({softmaxCrossEntropy_:function(e,t,n,s=0,r=Ps.SUM_BY_NONZERO_WEIGHTS){let a=(0,c._1)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,c._1)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=(0,c._1)(n,"weights","softmaxCrossEntropy")),(0,h.k5)(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=(0,sn.i)(s),t=(0,sn.i)(1),n=(0,sn.i)(a.shape[1]);a=(0,o.I)((0,A.d)(a,(0,ft.l)(t,e)),(0,de.h)(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=(0,cs.cb)(((e,t,s)=>{const r=(0,He.l)(t,[n],!0),a=(0,ft.l)((0,N.p)(t,"float32"),r);s([e,a]);const i=(0,bt.W)((0,A.d)(a,e));return{value:(0,En.S)(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=(0,pt.rv)(e.shape,[n]);return[(0,A.d)((0,T.X)(e,a),(0,ft.l)((0,N.p)(s,"float32"),(0,ve.Q)(r))),(0,A.d)((0,T.X)(e,a),(0,ft.l)((0,ve.Q)(r),(0,N.p)(s,"float32")))]}}}));return s(e,t)}(a,i);return Vs(l,u,r)}}),Zs=(0,p.op)({sparseFillEmptyRows_:function(e,t,n,s){const r=(0,c._1)(e,"indices","sparseFillEmptyRows","int32"),a=(0,c._1)(t,"values","sparseFillEmptyRows"),i=(0,c._1)(n,"denseShape","sparseFillEmptyRows","int32"),o=(0,c._1)(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const h={indices:r,values:a,denseShape:i,defaultValue:o},p=u.BV.runKernel(l.O3z,h);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}}),Js=(0,p.op)({sparseReshape_:function(e,t,n){const s=(0,c._1)(e,"inputIndices","sparseReshape","int32"),r=(0,c._1)(t,"inputShape","sparseReshape","int32"),a=(0,c._1)(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=u.BV.runKernel(l.nhH,i);return{outputIndices:o[0],outputShape:o[1]}}}),er=(0,p.op)({sparseSegmentMean_:function(e,t,n){const s=(0,c._1)(e,"data","sparseSegmentMean"),r=(0,c._1)(t,"indices","sparseSegmentMean","int32"),a=(0,c._1)(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return u.BV.runKernel(l.w3H,i)}}),tr=(0,p.op)({sparseSegmentSum_:function(e,t,n){const s=(0,c._1)(e,"data","sparseSegmentSum"),r=(0,c._1)(t,"indices","sparseSegmentSum","int32"),a=(0,c._1)(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return u.BV.runKernel(l.ZjV,i)}}),nr=(0,p.op)({stringNGrams_:function(e,t,n,s,r,a,i,o){const h=(0,c._1)(e,"data","stringNGrams","string");if("string"!==h.dtype)throw new Error("Data must be of datatype string");if(1!==h.shape.length)throw new Error(`Data must be a vector, saw: ${h.shape}`);const p=(0,c._1)(t,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const d={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},f={data:h,dataSplits:p},m=u.BV.runKernel(l._JP,f,d);return{nGrams:m[0],nGramsSplits:m[1]}}}),sr=(0,p.op)({stringSplit_:function(e,t,n=!0){const s=(0,c._1)(e,"input","stringSplit","string"),r=(0,c._1)(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=u.BV.runKernel(l.s1s,i,a);return{indices:o[0],values:o[1],shape:o[2]}}}),rr=(0,p.op)({stringToHashBucketFast_:function(e,t){const n=(0,c._1)(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return u.BV.runKernel(l.XkS,r,s)}}),ar={fft:bn.k,ifft:xn.S,rfft:vn.Q,irfft:wn.w},ir={hammingWindow:ws,hannWindow:vs,frame:ks,stft:Is},or={flipLeftRight:Ns,grayscaleToRGB:Ts,resizeNearestNeighbor:Fs.j,resizeBilinear:_s.I,rotateWithOffset:Cs,cropAndResize:Ss,nonMaxSuppression:Es,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),o=$s(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],h=u[1],{selectedIndices:p}=(0,As.GP)(l,h,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),_n(p,"int32")},nonMaxSuppressionWithScore:Ds,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),u=$s(i,o,n,s,r,a);n=u.maxOutputSize,s=u.iouThreshold,r=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),h=l[0],p=l[1],{selectedIndices:d,selectedScores:f}=(0,As.pA)(h,p,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:_n(d,"int32"),selectedScores:_n(f)}},nonMaxSuppressionPadded:Rs,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),u=$s(i,o,n,s,r,null),l=u.maxOutputSize,h=u.iouThreshold,p=u.scoreThreshold,[d,f]=await Promise.all([i.data(),o.data()]),{selectedIndices:m,validOutputs:g}=(0,As.qP)(d,f,l,h,p,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:_n(m,"int32"),validOutputs:(0,sn.i)(g,"int32")}},threshold:Os,transform:Ms},ur={bandPart:Ls,gramSchmidt:Bs,qr:Ws},lr={absoluteDifference:Gs,computeWeightedLoss:Vs,cosineDistance:Hs,hingeLoss:js,huberLoss:Xs,logLoss:qs,meanSquaredError:Ks,sigmoidCrossEntropy:Ys,softmaxCrossEntropy:Qs},cr={sparseFillEmptyRows:Zs,sparseReshape:Js,sparseSegmentMean:er,sparseSegmentSum:tr},hr={stringNGrams:nr,stringSplit:sr,stringToHashBucketFast:rr}},9682:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({pad_:function(e,t,n=0){const i=(0,a._1)(e,"x","pad");if(0===i.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:t,constantValue:n},u={x:i};return s.BV.runKernel(r.lyA,u,o)}})},5860:(e,t,n)=>{"use strict";n.d(t,{d:()=>p});var s=n(3740),r=n(569),a=n(5176),i=n(8441),o=n(2582),u=n(1174),l=n(2668),c=n(4968),h=n(7918);const p=(0,l.op)({pool_:function(e,t,n,l,p,d,f){null==p&&(p=[1,1]),null==d&&(d=1),0===l&&(l="valid");const m=(0,s._1)(e,"x","maxPool");let g=m,y=!1;3===m.rank&&(y=!0,g=(0,c.X)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),r.hu(o.jT(d,p),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${d} and dilations '${p}'`));const b=o.Xw(g.shape,t,d,p,l),x=[b.dilationHeight,b.dilationWidth];let w;w="same"===l?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([b.filterHeight,b.filterWidth],x):[[0,0],[0,0]];const v=1===x[0]&&1===x[1],[k,I]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([b.inHeight,b.inWidth],x,w),S=v?l:"valid",N=v?g:(0,h.f)(g,x,k),T=("avg"===n?()=>(0,a.w)(N,t,d,S,f):()=>(0,u._)(N,t,d,S,f))(),C=v?T:(0,i.E)(T,x,I);return y?(0,c.X)(C,[C.shape[1],C.shape[2],C.shape[3]]):C}})},3453:(e,t,n)=>{"use strict";n.d(t,{s:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({pow_:function(e,t){let n=(0,i._1)(e,"base","pow"),o=(0,i._1)(t,"exp","pow");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.pe_,u)}})},8151:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({prelu_:function(e,t){const n={x:(0,a._1)(e,"x","prelu"),alpha:(0,a._1)(t,"alpha","prelu")};return s.BV.runKernel(r.o0g,n)}})},9798:(e,t,n)=>{"use strict";function s(e,t=!1){console.log(e.toString(t))}n.d(t,{S:()=>s})},9451:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(2271);const o=(0,n(2668).op)({prod_:function(e,t=null,n=!1){let o=(0,a._1)(e,"x","prod");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const u={x:o},l={axis:t,keepDims:n};return s.BV.runKernel(r.DlI,u,l)}})},766:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({real_:function(e){const t={input:(0,a._1)(e,"input","real")};return s.BV.runKernel(r.xJR,t)}})},9036:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({reciprocal_:function(e){const t={x:(0,a._1)(e,"x","reciprocal")};return s.BV.runKernel(r.$HU,t)}})},7409:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({relu_:function(e){const t={x:(0,a._1)(e,"x","relu")};return s.BV.runKernel(r.qkr,t)}})},3582:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({relu6_:function(e){const t={x:(0,a._1)(e,"x","relu6")};return s.BV.runKernel(r.SbG,t)}})},4968:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({reshape_:function(e,t){const n={x:(0,a._1)(e,"x","reshape","string_or_numeric")},i={shape:t};return s.BV.runKernel(r.HZH,n,i)}})},7486:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({reverse_:function(e,t){const n={x:(0,a._1)(e,"x","reverse")},i={dims:t};return s.BV.runKernel(r.mKl,n,i)}})},7809:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({round_:function(e){const t={x:(0,a._1)(e,"x","round")};return s.BV.runKernel(r.e07,t)}})},2634:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({rsqrt_:function(e){const t={x:(0,a._1)(e,"x","rsqrt","float32")};return s.BV.runKernel(r.bV0,t)}})},9494:(e,t,n)=>{"use strict";n.d(t,{i:()=>a});var s=n(569),r=n(7852);function a(e,t){if(((0,s.fU)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,s.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,r.H)(e,[],[],t)}},3028:(e,t,n)=>{"use strict";n.d(t,{SU:()=>i,b0:()=>a,l5:()=>r});var s=n(569);function r(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function a(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}r(n,t,e)}function i(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,i=n.length;let o=1;for(let e=a;e<i;++e)o*=n[e];const u=a<1?1:a;return{sliceRank:a,numUpdates:(0,s.NA)(t.shape)/u,sliceSize:o,strides:[...(0,s.e3)(n.slice(0,a)),1],outputSize:(0,s.NA)(n)}}},5503:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({selu_:function(e){const t={x:(0,a._1)(e,"x","selu")};return s.BV.runKernel(r.oFR,t)}})},3179:(e,t,n)=>{"use strict";n.d(t,{$:()=>r,y:()=>s});const s=1.7580993408473768,r=1.0507009873554805},8678:(e,t,n)=>{"use strict";n.d(t,{U:()=>l});var s=n(3740),r=n(569),a=n(4794),i=n(4718),o=n(2668),u=n(4968);const l=(0,o.op)({separableConv2d_:function(e,t,n,o,l,c=[1,1],h="NHWC"){const p=(0,s._1)(e,"x","separableConv2d"),d=(0,s._1)(t,"depthwiseFilter","separableConv2d"),f=(0,s._1)(n,"pointwiseFilter","separableConv2d");let m=p,g=!1;if(3===p.rank&&(g=!0,m=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),"NCHW"===h)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");r.hu(4===m.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`)),r.hu(4===d.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${d.rank}.`)),r.hu(4===f.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${d.rank}.`)),r.hu(1===f.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`)),r.hu(1===f.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`));const y=d.shape[2],b=d.shape[3];r.hu(f.shape[2]===y*b,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${y*b}, but got ${f.shape[2]}.`));const x=(0,i.B)(m,d,o,l,h,c),w=(0,a.T)(x,f,1,"valid",h);return g?(0,u.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},625:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({sigmoid_:function(e){const t={x:(0,a._1)(e,"x","sigmoid","float32")};return s.BV.runKernel(r.a5O,t)}})},4434:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({sign_:function(e){const t={x:(0,a._1)(e,"x","sign")};return s.BV.runKernel(r.i5y,t)}})},9331:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({sin_:function(e){const t={x:(0,a._1)(e,"x","sin","float32")};return s.BV.runKernel(r.RQH,t)}})},3254:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({sinh_:function(e){const t={x:(0,a._1)(e,"x","sinh")};return s.BV.runKernel(r.wYB,t)}})},2676:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({slice_:function(e,t,n){const i=(0,a._1)(e,"x","slice","string_or_numeric");if(0===i.rank)throw new Error("Slicing scalar is not possible");const o={x:i},u={begin:t,size:n};return s.BV.runKernel(r.p2w,o,u)}})},7650:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertParamsValid:()=>r,computeFlatOffset:()=>y,computeOutShape:()=>i,getNormalizedAxes:()=>c,isSliceContinous:()=>g,maskToAxes:()=>a,parseSliceParams:()=>b,sliceInfo:()=>x,startForAxis:()=>f,startIndicesWithElidedDims:()=>h,stopForAxis:()=>m,stopIndicesWithElidedDims:()=>p,stridesForAxis:()=>d,stridesWithElidedDims:()=>o});var s=n(569);function r(e,t,n){const r=e.shape.length;s.hu(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),s.hu(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)s.hu(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function a(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function i(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function o(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function u(e,t,n){return n<=e?n:n-(t-1)}function l(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function c(e,t,n,s,r,a,i,u,l){const c=e.length;let g=new Array(c),y=new Array(c),b=new Array(c);if(t.length&&n>0){const l=t[0],c=n+1;g=h(i,l,c,s,e),y=p(u,l,c,r,e),b=o(a,l,c,e)}else for(let t=0;t<c;t++)g[t]=f(i,s,a,e,t,l),y[t]=m(u,r,a,e,t,l),b[t]=d(a,t,l);return{begin:g,end:y,strides:b}}function h(e,t,n,s,r){const a=[...r],i=l(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=u(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function p(e,t,n,r,a){const i=[...a],o=l(n,t);for(let s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{const a=u(t,n,s);let o=r[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[s]=o}for(let e=0;e<i.length;e++){const t=a[e];i[e]<0&&(i[e]+=t),i[e]=s.uZ(0,i[e],a[e])}return i}function d(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function f(e,t,n,r,a,i){let o=t[a];const u=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[a];return o<0&&(o+=l),o=s.uZ(0,o,l-1),o}function m(e,t,n,r,a,i){let o=t[a];const u=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[a];return o<0&&(o+=l),o=u>0?s.uZ(0,o,l):s.uZ(-1,o,l-1),o}function g(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function y(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function b(e,t,n){let r;const a=e.shape.length;let i;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{s.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),i=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,i=i.map(((t,n)=>t>=0?t:(s.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,i]}function x(e,t,n,s,r,a,i,o,u){let l;if(null==s?(l=new Array(t.length),l.fill(1)):l=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[p.beginMask&1<<t,p.endMask&1<<t],a=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=w(p.begin[t],0,p.strides[t],s,r,a),p.end[t]=w(p.end[t],1,p.strides[t],s,r,a);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,u=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],u=!0):n?(o=1,u=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,u=!0),u){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function w(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}},682:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({softmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const i={logits:n},o={dim:t};return s.BV.runKernel(r.Gcp,i,o)}})},3694:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({softplus_:function(e){const t={x:(0,a._1)(e,"x","softplus")};return s.BV.runKernel(r.MRv,t)}})},7918:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({spaceToBatchND_:function(e,t,n){const o=(0,a._1)(e,"x","spaceToBatchND");i.hu(o.rank>=1+t.length,(()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`)),i.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i.hu(o.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const u={x:o},l={blockShape:t,paddings:n};return s.BV.runKernel(r.TQc,u,l)}})},7020:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(7097),r=n(9121),a=n(569);const i=(0,n(2668).op)({fft_:function(e){(0,a.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(r.vwp,t)}})},8447:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var s=n(7097),r=n(9121),a=n(569);const i=(0,n(2668).op)({ifft_:function(e){(0,a.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(r.Qg5,t)}})},4415:(e,t,n)=>{"use strict";n.d(t,{w:()=>f});var s=n(1661),r=n(6884),a=n(4386),i=n(4841),o=n(2668),u=n(766),l=n(4968),c=n(7486),h=n(9494),p=n(2676),d=n(8447);const f=(0,o.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let o;if(t<=2){const s=(0,l.X)(e,[n,t]);o=(0,d.S)(s)}else{const f=[n,2*(t-1)],m=(0,l.X)((0,u.k)(e),[n,t]),g=(0,l.X)((0,a.a)(e),[n,t]),y=(0,c.G)((0,p.t)(m,[0,1],[n,t-2]),1),b=(0,i.d)((0,c.G)((0,p.t)(g,[0,1],[n,t-2]),1),(0,h.i)(-1)),x=(0,r.z)([m,y],1),w=(0,r.z)([g,b],1),v=(0,l.X)((0,s.P)(x,w),[f[0],f[1]]);o=(0,d.S)(v)}if(o=(0,u.k)(o),3===e.rank&&0!==e.shape[0]){const t=o,n=e.shape[0];o=(0,l.X)(o,[n,o.shape[0]/n,o.shape[1]]),t.dispose()}return o}})},3710:(e,t,n)=>{"use strict";n.d(t,{Q:()=>m});var s=n(569),r=n(1661),a=n(6884),i=n(4386),o=n(2668),u=n(766),l=n(4968),c=n(2676),h=n(8644),p=n(723),d=n(6577),f=n(7020);const m=(0,o.op)({rfft_:function(e,t){(0,s.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const o=e.size/n;let m;if(null!=t&&t<n){const s=e.shape.map((e=>0)),r=e.shape.map((e=>e));r[e.shape.length-1]=t,m=(0,c.t)(e,s,r),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,m=(0,a.z)([e,(0,p.l)(s)],e.shape.length-1),n=t}else m=e;const g=(0,d.P)(m),y=(0,l.X)((0,r.P)(m,g),[o,n]),b=(0,f.k)(y),x=Math.floor(n/2)+1,w=(0,u.k)(b),v=(0,i.a)(b),k=(0,h.V)(w,[x,n-x],w.shape.length-1),I=(0,h.V)(v,[x,n-x],v.shape.length-1),S=m.shape.slice();return S[m.shape.length-1]=x,(0,l.X)((0,r.P)(k[0],I[0]),S)}})},8644:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({split_:function(e,t,n=0){const i={x:(0,a._1)(e,"x","split")},o={numOrSizeSplits:t,axis:n};return s.BV.runKernel(r.L8s,i,o)}})},3261:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({sqrt_:function(e){const t={x:(0,a._1)(e,"x","sqrt","float32")};return s.BV.runKernel(r.FKq,t)}})},248:(e,t,n)=>{"use strict";n.d(t,{h:()=>a});var s=n(7097),r=n(3740);const a=(0,n(2668).op)({square_:function(e){const t=(0,r._1)(e,"x","square");return s.BV.runKernel("Square",{x:t},{})}})},5265:(e,t,n)=>{"use strict";n.d(t,{$:()=>u});var s=n(7097),r=n(9121),a=n(747),i=n(3740),o=n(2200);const u=(0,n(2668).op)({squaredDifference_:function(e,t){let n=(0,i._1)(e,"a","squaredDifference"),u=(0,i._1)(t,"b","squaredDifference");[n,u]=(0,a.makeTypesMatch)(n,u),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return s.BV.runKernel(r._tC,l,{})}})},9590:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var s=n(3740),r=n(569),a=n(2668),i=n(4968);const o=(0,a.op)({squeeze_:function(e,t){const n=(0,s._1)(e,"x","squeeze","string_or_numeric");return(0,i.X)(n,(0,r.bp)(n.shape,t).newShape)}})},2991:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({stack_:function(e,t=0){const n=(0,a.sI)(e,"tensors","stack","string_or_numeric");i.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const o=n,u={axis:t};return s.BV.runKernel(r.QiL,o,u)}})},1901:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({step_:function(e,t=0){const n={x:(0,a._1)(e,"x","step")},i={alpha:t};return s.BV.runKernel(r.h8e,n,i)}})},5158:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({stridedSlice_:function(e,t,n,i,o=0,u=0,l=0,c=0,h=0){const p={x:(0,a._1)(e,"x","stridedSlice","string_or_numeric")},d={begin:t,end:n,strides:i,beginMask:o,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:h};return s.BV.runKernel(r.jQk,p,d)}})},827:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var s=n(7097),r=n(9121),a=n(747),i=n(3740);const o=(0,n(2668).op)({sub_:function(e,t){let n=(0,i._1)(e,"a","sub"),o=(0,i._1)(t,"b","sub");[n,o]=(0,a.makeTypesMatch)(n,o);const u={a:n,b:o};return s.BV.runKernel(r.Tr8,u)}})},5475:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(2271);const o=(0,n(2668).op)({sum_:function(e,t=null,n=!1){let o=(0,a._1)(e,"x","sum");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const u={x:o},l={axis:t,keepDims:n};return s.BV.runKernel(r.GBy,u,l)}})},1173:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({tan_:function(e){const t={x:(0,a._1)(e,"x","tan","float32")};return s.BV.runKernel(r.sEM,t)}})},1869:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({tanh_:function(e){const t={x:(0,a._1)(e,"x","tanh","float32")};return s.BV.runKernel(r.MIZ,t)}})},701:(e,t,n)=>{"use strict";n.d(t,{X:()=>a});var s=n(3740),r=n(7852);function a(e,t,n){const a=(0,s.C)(e,n);return(0,r.H)(e,t,a,n)}},7852:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var s=n(7097),r=n(569),a=n(9122);function i(e,t,n,i){if(null==i&&(i=(0,r.D2)(e)),"complex64"===i)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof e&&"texture"in e){if("float32"!==i&&"int32"!==i)throw new Error(`Creating tensor from texture only supports 'float32'|'int32' dtype, while the dtype is ${i}.`);return e.channels=e.channels||"RGBA",s.BV.backend.createTensorFromTexture(e,t||n,i)}if(!(0,r.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,r.Mu)(t);const e=(0,r.NA)(t),s=(0,r.NA)(n);(0,r.hu)(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],a=e!==n.length-1||s!==(0,r.NA)(t.slice(e));(0,r.hu)(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,r.fU)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==i?(0,a.toTypedArray)(e,i):(0,r.xH)(e,[],!0),s.BV.makeTensor(e,t,i)}},7501:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({tile_:function(e,t){const n=(0,a._1)(e,"x","tile","string_or_numeric");i.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const o={x:n},u={reps:t};return s.BV.runKernel(r.n9L,o,u)}})},3243:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({topk_:function(e,t=1,n=!0){const i=(0,a._1)(e,"x","topk");if(0===i.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=i.shape[i.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);const u={x:i},l={k:t,sorted:n},[c,h]=s.BV.runKernel(r.cWu,u,l);return{values:c,indices:h}}})},9065:(e,t,n)=>{"use strict";n.d(t,{p:()=>d});var s=n(7097),r=n(4368),a=n(9121),i=n(3740),o=n(569),u=n(1661),l=n(4386),c=n(7370),h=n(2668),p=n(766);const d=(0,h.op)({transpose_:function(e,t,n){const h=(0,i._1)(e,"x","transpose");if(null==t&&(t=h.shape.map(((e,t)=>t)).reverse()),o.hu(h.rank===t.length,(()=>`Error in transpose: rank of input ${h.rank} must match length of perm ${t}.`)),t.forEach((e=>{o.hu(e>=0&&e<h.rank,(()=>"All entries in 'perm' must be between 0 and "+(h.rank-1)+` but got ${t}`))})),h.rank<=1)return h.clone();const d={x:h},f={perm:t};return"complex64"===h.dtype?(0,r.lu)((()=>{let e=(0,p.k)(h),t=(0,l.a)(h);return e=s.BV.runKernel(a.G3Y,{x:e},f),t=s.BV.runKernel(a.G3Y,{x:t},f),n&&(t=(0,c.W)(t)),(0,u.P)(e,t)})):s.BV.runKernel(a.G3Y,d,f)}})},9608:(e,t,n)=>{"use strict";n.d(t,{T:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({unique_:function(e,t=0){const n=(0,a._1)(e,"x","unique","string_or_numeric");(0,i.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const o={x:n},u={axis:t},[l,c]=s.BV.runKernel(r.kpP,o,u);return{values:l,indices:c}}})},8749:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({unsortedSegmentSum_:function(e,t,n){const o=(0,a._1)(e,"x","unsortedSegmentSum"),u=(0,a._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,i.hu)((0,i.GN)(n),(()=>"numSegments must be of dtype int"));const l={x:o,segmentIds:u},c={numSegments:n};return s.BV.runKernel(r.Qvg,l,c)}})},4136:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var s=n(7097),r=n(9121),a=n(3740),i=n(569);const o=(0,n(2668).op)({unstack_:function(e,t=0){const n=(0,a._1)(e,"x","unstack","string_or_numeric");i.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const o={value:n},u={axis:t};return s.BV.runKernel(r.ToN,o,u)}})},5912:(e,t,n)=>{"use strict";n.d(t,{a:()=>u});var s=n(7097),r=n(9121),a=n(3740),i=n(8247),o=n(2200);const u=(0,n(2668).op)({where_:function(e,t,n){const u=(0,a._1)(t,"a","where"),l=(0,a._1)(n,"b","where"),c=(0,a._1)(e,"condition","where","bool"),h=(0,o.assertAndGetBroadcastShape)((0,o.assertAndGetBroadcastShape)(c.shape,u.shape),l.shape),p={condition:(0,i.U)(c,h),t:(0,i.U)(u,h),e:(0,i.U)(l,h)};return s.BV.runKernel(r.PhF,p)}})},723:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(7097),r=n(569),a=n(1661);function i(e,t="float32"){if((0,r.Mu)(e),"complex64"===t){const t=i(e,"float32"),n=i(e,"float32");return(0,a.P)(t,n)}const n=(0,r.wT)((0,r.NA)(e),t);return s.BV.makeTensor(n,e,t)}},6577:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(7097),r=n(9121),a=n(3740);const i=(0,n(2668).op)({zerosLike_:function(e){const t={x:(0,a._1)(e,"x","zerosLike")};return s.BV.runKernel(r.RuY,t)}})},4077:(e,t,n)=>{"use strict";n.d(t,{es:()=>b,YD:()=>h,_w:()=>w,t3:()=>x,FZ:()=>y,Vp:()=>g,Vi:()=>m});var s=n(5938),r=n(569);function a(e,t,n,s){const a=(0,r.e3)(t),o=function(e,t,n,s){const a=(0,r.NA)(t),o=s[s.length-1],u=new Array(o).fill(0),c=t.length,h="complex64"===n?l(e):e;if(c>1)for(let e=0;e<a/o;e++){const t=e*o;for(let e=0;e<o;e++)u[e]=Math.max(u[e],i(h[t+e],0,n).length)}return u}(e,t,n,a),c=t.length,h=u(e,t,n,a,o),p=["Tensor"];return s&&(p.push(`  dtype: ${n}`),p.push(`  rank: ${c}`),p.push(`  shape: [${t}]`),p.push("  values:")),p.push(h.map((e=>"    "+e)).join("\n")),p.join("\n")}function i(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,r.HD)(e)?`'${e}'`:"bool"===n?o(e):parseFloat(e.toFixed(7)).toString(),(0,r.oj)(s,t)}function o(e){return 0===e?"false":"true"}function u(e,t,n,s,r,a=!0){const c="complex64"===n?2:1,h=t[0],p=t.length;if(0===p)return"complex64"===n?[i(l(e)[0],0,n)]:"bool"===n?[o(e[0])]:[e[0].toString()];if(1===p){if(h>20){const t=3*c;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((h-3)*c,h*c));return"complex64"===n&&(s=l(s),a=l(a)),["["+s.map(((e,t)=>i(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>i(e,r[h-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?l(e):Array.from(e)).map(((e,t)=>i(e,r[t],n))).join(", ")+"]"]}const d=t.slice(1),f=s.slice(1),m=s[0]*c,g=[];if(h>20){for(let t=0;t<3;t++){const s=t*m,a=s+m;g.push(...u(e.slice(s,a),d,n,f,r,!1))}g.push("...");for(let t=h-3;t<h;t++){const s=t*m,a=s+m;g.push(...u(e.slice(s,a),d,n,f,r,t===h-1))}}else for(let t=0;t<h;t++){const s=t*m,a=s+m;g.push(...u(e.slice(s,a),d,n,f,r,t===h-1))}const y=2===p?",":"";g[0]="["+g[0]+y;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<p;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(a?"":b),g}function l(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(9122);class h{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=r.NA(e),null!=n){const e=n.length;r.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||r.rQ(t,this.size),this.strides=(0,r.e3)(e)}set(e,...t){0===t.length&&(t=[0]),r.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return p().makeTensor(this.values,this.shape,this.dtype)}}let p=null,d=null,f=null;function m(e){p=e}function g(e){d=e}function y(e){f=e}class b{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=r.NA(e),this.strides=(0,r.e3)(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return d.buffer(this.shape,this.dtype,e)}bufferSync(){return d.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,r.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,r.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=p().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),p().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=p().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await p().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(p().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return d.print(this,e)}clone(){return this.throwIfDisposed(),d.clone(this)}toString(e=!1){return a(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),d.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),p().makeVariable(this,e,t,n)}}function x(){return(0,s.R)("Tensor",(()=>b))}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),x();class w extends b{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!r.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);p().disposeTensor(this),this.dataId=e.dataId,p().incRef(this,null)}dispose(){p().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(w,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},747:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertTypesMatch:()=>o,getTensorsInContainer:()=>l,isTensorInList:()=>u,makeTypesMatch:()=>i});var s=n(4077),r=n(1221),a=n(569);function i(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,r.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function o(e,t){(0,a.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function u(e,t){return t.some((t=>t.id===e.id))}function l(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof s.es)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const s=a[e];n.has(s)||(n.add(s),c(s,t,n))}}},3740:(e,t,n)=>{"use strict";n.d(t,{C:()=>u,_1:()=>h,sI:()=>p});var s=n(7097),r=n(2885),a=n(4077),i=n(569),o=n(9122);function u(e,t){let n=e;if((0,i.fU)(e))return"string"===t?[]:[e.length];if("object"==typeof e&&"texture"in e){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||(0,i.fU)(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&(0,r.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&l(e,s,[]),s}function l(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,i.fU)(e))return void(0,i.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,i.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,i.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)l(e[t],s,n.concat(t))}function c(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function h(e,t,n,r="numeric"){if(e instanceof a.es)return c(r,e.dtype,t,n),e;let l=(0,i.D2)(e);if("string"!==l&&["bool","int32","float32"].indexOf(r)>=0&&(l=r),c(r,l,t,n),null==e||!(0,i.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const h=u(e,l);(0,i.fU)(e)||Array.isArray(e)||(e=[e]);const p="string"!==l?(0,o.toTypedArray)(e,l):(0,i.xH)(e,[],!0);return s.BV.makeTensor(p,h,l)}function p(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>h(e,`${t}[${r}]`,n,s)))}},1221:(e,t,n)=>{"use strict";var s,r,a,i,o;n.d(t,{x8:()=>l,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(s||(s={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(i||(i={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(o||(o={}));const u={float32:i,int32:r,bool:a,complex64:o};function l(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function c(e){return l(e,"int32")}},9122:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>r.cO,assert:()=>r.hu,assertNonNegativeIntegerDimensions:()=>r.Mu,assertNonNull:()=>r.Cq,assertShapesMatch:()=>r.k5,bytesFromStringArray:()=>r.Ub,bytesPerElement:()=>r.bT,checkConversionForErrors:()=>r.D5,clamp:()=>r.uZ,computeStrides:()=>r.e3,createScalarValue:()=>x,createShuffledIndices:()=>r.U$,decodeString:()=>S,distSquared:()=>r.E7,encodeString:()=>I,fetch:()=>k,fingerPrint64:()=>b,flatten:()=>r.xH,getArrayFromDType:()=>r.rQ,getTypedArrayFromDType:()=>r.WP,hasEncodingLoss:()=>r.QB,hexToLong:()=>o,indexToLoc:()=>r.NE,inferDtype:()=>r.D2,inferFromImplicitShape:()=>r.JZ,isBoolean:()=>r.jn,isFunction:()=>r.mf,isInt:()=>r.GN,isNumber:()=>r.hj,isPromise:()=>r.tI,isScalarShape:()=>r.N9,isString:()=>r.HD,isTypedArray:()=>r.fU,isValidDtype:()=>r.LP,locToIndex:()=>r.qy,makeOnesTypedArray:()=>r.p8,makeZerosNestedTypedArray:()=>r.l6,makeZerosTypedArray:()=>r.wT,nearestDivisor:()=>r.jP,nearestLargerEven:()=>r.nY,now:()=>v,parseAxisParam:()=>r.EC,randUniform:()=>r.bj,repeatedTry:()=>r.WD,rightPad:()=>r.oj,shuffle:()=>r.TV,shuffleCombo:()=>r.d7,sizeFromShape:()=>r.NA,sizeToSquarishShape:()=>r.YP,squeezeShape:()=>r.bp,sum:()=>r.Sm,swap:()=>r.LF,tanh:()=>r.AE,toNestedArray:()=>r.GX,toTypedArray:()=>w});var s=n(2885),r=n(569),a=n(3720);const i=n.n(a)()||a;function o(e){return i.fromString(e,!0,16)}const u=o("c3a5c85c97cb3127"),l=o("b492b66fbe98f273"),c=o("9ae16a3b2f90404f");function h(e){return e.xor(e.shru(47))}function p(e,t,n){const s=e.slice(t,t+n);return i.fromBytes(Array.from(s),!0,!0)}function d(e,t){return p(e,t,8)}function f(e,t){return p(e,t,4)}function m(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function g(e,t,n=o("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function y(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=m(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(m(r,44)),[r.add(s),a.add(i)]}(d(e,t),d(e,t+8),d(e,t+16),d(e,t+24),n,s)}function b(e,t=e.length){const n=i.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=c.add(2*t),s=d(e,0).add(c),r=d(e,t-8);return g(m(r,37).mul(n).add(s),m(s,25).add(r).mul(n),n)}if(t>=4){const n=c.add(2*t);return g(f(e,0).shl(3).add(t),f(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return h(c.mul(n).xor(u.mul(s))).mul(c)}return c}(e,t):function(e,t=e.length){const n=c.add(2*t),s=d(e,0).mul(l),r=d(e,8),a=d(e,t-8).mul(n),i=d(e,t-16).mul(c);return g(m(s.add(r),43).add(m(a,30)).add(i),s.add(m(r.add(c),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=c.add(2*t),s=d(e,0).mul(c),r=d(e,8),a=d(e,t-8).mul(n),i=d(e,t-16).mul(c),o=m(s.add(r),43).add(m(a,30)).add(i),u=g(o,s.add(m(r.add(c),18)).add(a),n),l=d(e,16).mul(n),h=d(e,24),p=o.add(d(e,t-32)).mul(n),f=u.add(d(e,t-24)).mul(n);return g(m(l.add(h),43).add(m(p,30)).add(f),l.add(m(h.add(s),18)).add(p),n)}(e,t);let s=n,r=n.mul(l).add(113),a=h(r.mul(c).add(113)).mul(c),o=[i.UZERO,i.UZERO],p=[i.UZERO,i.UZERO];s=s.mul(c).add(d(e,0));let b=0;const x=64*(t-1>>6),w=x+(t-1&63)-63;do{s=m(s.add(r).add(o[0]).add(d(e,b+8)),37).mul(l),r=m(r.add(o[1]).add(d(e,b+48)),42).mul(l),s=s.xor(p[1]),r=r.add(o[0]).add(d(e,b+40)),a=m(a.add(p[0]),33).mul(l),o=y(e,b,o[1].mul(l),s.add(p[0])),p=y(e,b+32,a.add(p[1]),r.add(d(e,b+16))),[a,s]=[s,a],b+=64}while(b!==x);const v=l.add(a.and(255).shl(1));return b=w,p[0]=p[0].add(t-1&63),o[0]=o[0].add(p[0]),p[0]=p[0].add(o[0]),s=m(s.add(r).add(o[0]).add(d(e,b+8)),37).mul(v),r=m(r.add(o[1]).add(d(e,b+48)),42).mul(v),s=s.xor(p[1].mul(9)),r=r.add(o[0].mul(9).add(d(e,b+40))),a=m(a.add(p[0]),33).mul(v),o=y(e,b,o[1].mul(v),s.add(p[0])),p=y(e,b+32,a.add(p[1]),r.add(d(e,b+16))),[a,s]=[s,a],g(g(o[0],p[0],v).add(h(r).mul(u)).add(a),g(o[1],p[1],v).add(s),v)}function x(e,t){return"string"===t?I(e):w([e],t)}function w(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=r.xH(e)),(0,s.OB)().getBool("DEBUG")&&r.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function v(){return(0,s.OB)().platform.now()}function k(e,t){return(0,s.OB)().platform.fetch(e,t)}function I(e,t="utf-8"){return t=t||"utf-8",(0,s.OB)().platform.encode(e,t)}function S(e,t="utf-8"){return t=t||"utf-8",(0,s.OB)().platform.decode(e,t)}},569:(e,t,n)=>{"use strict";function s(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,o(e,t,n)}function r(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,o(e,n,s),o(t,n,s)}function a(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function u(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function l(e,t){const n=Math.random();return t*n+(1-n)*e}function c(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function h(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function p(e,t,n=""){h(y(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function d(e){h(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function f(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||R(e)&&!n)for(let s=0;s<e.length;++s)f(e[s],t,n);else t.push(e);return t}function m(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e){return 0===e.length}function y(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function b(e){return e%1==0}function x(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function w(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function v(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return s(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function I(e,t=(e=>0),n,s){return new Promise(((r,a)=>{let i=0;const o=()=>{if(e())return void r();i++;const u=t(i);null!=n&&i>=n?a():null!=s?s(o,u):setTimeout(o,u)};o()}))}function S(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function N(e,t){const n=t.length;return h((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),h(e.every((e=>b(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function T(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:N(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function C(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function $(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function A(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function D(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function R(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function _(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function F(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function O(e){return"string"==typeof e||e instanceof String}function M(e){return"boolean"==typeof e}function L(e){return"number"==typeof e}function B(e){return Array.isArray(e)?B(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":L(e)?"float32":O(e)?"string":M(e)?"bool":"float32"}function z(e){return!!(e&&e.constructor&&e.call&&e.apply)}function U(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function W(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function P(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=P(e+t*o,i,n,s)}return r}function V(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return P(0,e,t,n)}function G(e,t){const n=H(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function j(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return V(e,new Float32Array(n));if("int32"===t)return V(e,new Int32Array(n));if("bool"===t)return V(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function X(e){e.forEach((t=>{h(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function q(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function K(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function Y(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{AE:()=>x,Cq:()=>d,D2:()=>B,D5:()=>E,E7:()=>c,EC:()=>N,GN:()=>b,GX:()=>V,HD:()=>O,JZ:()=>S,LF:()=>o,LP:()=>A,Mu:()=>X,N9:()=>g,NA:()=>m,NE:()=>K,QB:()=>D,Sm:()=>u,TV:()=>s,U$:()=>v,Ub:()=>F,WD:()=>I,WP:()=>C,YP:()=>w,bT:()=>_,bj:()=>l,bp:()=>T,cO:()=>y,d7:()=>r,e3:()=>W,fU:()=>R,hj:()=>L,hu:()=>h,jP:()=>U,jn:()=>M,k5:()=>p,l6:()=>j,mf:()=>z,nY:()=>i,oj:()=>k,p8:()=>G,qy:()=>q,rQ:()=>$,tI:()=>Y,uZ:()=>a,wT:()=>H,xH:()=>f})},3720:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=s;var r={},a={};function i(e,t){var n,s,i;return t?(i=0<=(e>>>=0)&&e<256)&&(s=a[e])?s:(n=u(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(s=r[e])?s:(n=u(e,e<0?-1:0,!1),i&&(r[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=d)return k}else{if(e<=-f)return I;if(e+1>=f)return v}return e<0?o(-e,t).neg():u(e%p|0,e/p|0,t)}function u(e,t,s){return new n(e,t,s)}n.fromInt=i,n.fromNumber=o,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return c(e.substring(1),t,n).neg();for(var r=o(l(n,8)),a=g,i=0;i<e.length;i+=8){var u=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+u),n);if(u<8){var p=o(l(n,u));a=a.mul(p).add(o(h))}else a=(a=a.mul(r)).add(o(h))}return a.unsigned=t,a}function h(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var p=4294967296,d=p*p,f=d/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var w=i(-1);n.NEG_ONE=w;var v=u(-1,2147483647,!1);n.MAX_VALUE=v;var k=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var I=u(0,-2147483648,!1);n.MIN_VALUE=I;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=o(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=o(l(e,6),this.unsigned),a=this,i="";;){var u=a.div(r),c=(a.sub(u.mul(r)).toInt()>>>0).toString(e);if((a=u).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(e){return s(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(s(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},S.neg=S.negate,S.add=function(e){s(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,i=e.high>>>16,o=65535&e.high,l=e.low>>>16,c=0,p=0,d=0,f=0;return d+=(f+=a+(65535&e.low))>>>16,p+=(d+=r+l)>>>16,c+=(p+=n+o)>>>16,c+=t+i,u((d&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},S.subtract=function(e){return s(e)||(e=h(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(s(e)||(e=h(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,a=this.low>>>16,i=65535&this.low,l=e.high>>>16,c=65535&e.high,p=e.low>>>16,d=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*d)>>>16,y+=(b+=a*d)>>>16,b&=65535,y+=(b+=i*p)>>>16,f+=(y+=r*d)>>>16,y&=65535,f+=(y+=a*p)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*d+r*p+a*c+i*l,u((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(s(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,r,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;a=y}else{if(this.eq(I))return e.eq(b)||e.eq(w)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(r=this.sub(e.mul(n)),a=n.add(r.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:l(2,i-48),p=o(n),d=p.mul(e);d.isNegative()||d.gt(r);)d=(p=o(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=b),a=a.add(p),r=r.sub(d)}return a},S.div=S.divide,S.modulo=function(e){return s(e)||(e=h(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return u(~this.low,~this.high,this.unsigned)},S.and=function(e){return s(e)||(e=h(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return s(e)||(e=h(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return s(e)||(e=h(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,s){return s?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},6377:(e,t,n)=>{var s=n(4832),r=n(8652),a=n(801),i=n(2030),o=n(3618),u=n(9049),l=n(1971);l.alea=s,l.xor128=r,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},4832:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=u:n.amdD&&n.amdO?void 0===(s=function(){return u}.call(t,n,t,r))||(r.exports=s):this.alea=u}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=u:n.amdD&&n.amdO?void 0===(s=function(){return u}.call(t,n,t,r))||(r.exports=s):this.tychei=u}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=u:n.amdD&&n.amdO?void 0===(s=function(){return u}.call(t,n,t,r))||(r.exports=s):this.xor128=u}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],u=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,u=Math.max(u,t.length)),r=0,a=-32;a<u;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=u:n.amdD&&n.amdO?void 0===(s=function(){return u}.call(t,n,t,r))||(r.exports=s):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=u:n.amdD&&n.amdO?void 0===(s=function(){return u}.call(t,n,t,r))||(r.exports=s):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=u:n.amdD&&n.amdO?void 0===(s=function(){return u}.call(t,n,t,r))||(r.exports=s):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},1971:function(e,t,n){var s;!function(r,a,i){var o,u=256,l=i.pow(u,6),c=i.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(u):(e=new Uint8Array(u),(r.crypto||r.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,b(a)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(i.random=e,t):e})(x,p,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<u;)i[r]=r++;for(r=0;r<u;r++)i[r]=i[a=p&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=p&r+1],n=n*u+i[p&(i[r]=i[a=p&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function y(e,t){for(var n,s=e+"",r=0;r<s.length;)t[p&r]=p&(n^=19*t[p&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),a),e.exports){e.exports=d;try{o=n(5042)}catch(e){}}else void 0===(s=function(){return d}.call(t,n,t,e))||(e.exports=s)}("undefined"!=typeof self?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}},o={};function u(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={id:e,loaded:!1,exports:{}};return i[e].call(n.exports,n,n.exports,u),n.loaded=!0,n.exports}u.m=i,u.amdD=function(){throw new Error("define cannot be used indirect")},u.amdO={},e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",s=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},u.a=(r,a,i)=>{var o;i&&((o=[]).d=1);var u,l,c,h=new Set,p=r.exports,d=new Promise(((e,t)=>{c=t,l=e}));d[t]=p,d[e]=e=>(o&&e(o),h.forEach(e),d.catch((e=>{}))),r.exports=d,a((r=>{var a;u=(r=>r.map((r=>{if(null!==r&&"object"==typeof r){if(r[e])return r;if(r.then){var a=[];a.d=0,r.then((e=>{i[t]=e,s(a)}),(e=>{i[n]=e,s(a)}));var i={};return i[e]=e=>e(a),i}}var o={};return o[e]=e=>{},o[t]=r,o})))(r);var i=()=>u.map((e=>{if(e[n])throw e[n];return e[t]})),l=new Promise((t=>{(a=()=>t(i)).r=0;var n=e=>e!==o&&!h.has(e)&&(h.add(e),e&&!e.d&&(a.r++,e.push(a)));u.map((t=>t[e](n)))}));return a.r?l:i()}),(e=>(e?c(d[n]=e):l(p),s(o)))),o&&(o.d=0)},u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var n in t)u.o(t,n)&&!u.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},u.f={},u.e=e=>Promise.all(Object.keys(u.f).reduce(((t,n)=>(u.f[n](e,t),t)),[])),u.u=e=>"model.bundle.js",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},a="mnist:",u.l=(e,t,n,s)=>{if(r[e])r[e].push(t);else{var i,o;if(void 0!==n)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var h=l[c];if(h.getAttribute("src")==e||h.getAttribute("data-webpack")==a+n){i=h;break}}i||(o=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,u.nc&&i.setAttribute("nonce",u.nc),i.setAttribute("data-webpack",a+n),i.src=e),r[e]=[t];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(d);var s=r[e];if(delete r[e],i.parentNode&&i.parentNode.removeChild(i),s&&s.forEach((e=>e(n))),t)return t(n)},d=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),o&&document.head.appendChild(i)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var t=u.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),(()=>{u.b=document.baseURI||self.location.href;var e={179:0};u.f.j=(t,n)=>{var s=u.o(e,t)?e[t]:void 0;if(0!==s)if(s)n.push(s[2]);else{var r=new Promise(((n,r)=>s=e[t]=[n,r]));n.push(s[2]=r);var a=u.p+u.u(t),i=new Error;u.l(a,(n=>{if(u.o(e,t)&&(0!==(s=e[t])&&(e[t]=void 0),s)){var r=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+a+")",i.name="ChunkLoadError",i.type=r,i.request=a,s[1](i)}}),"chunk-"+t,t)}};var t=(t,n)=>{var s,r,[a,i,o]=n,l=0;if(a.some((t=>0!==e[t]))){for(s in i)u.o(i,s)&&(u.m[s]=i[s]);o&&o(u)}for(t&&t(n);l<a.length;l++)r=a[l],u.o(e,r)&&e[r]&&e[r][0](),e[r]=0},n=self.webpackChunkmnist=self.webpackChunkmnist||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e={};u.r(e),u.d(e,{addImpl:()=>Rc,bincountImpl:()=>Sh,bincountReduceImpl:()=>Nh,castImpl:()=>Cc,ceilImpl:()=>$h,concatImpl:()=>Fh,equalImpl:()=>yp,expImpl:()=>$p,expm1Impl:()=>_p,floorImpl:()=>Yp,gatherNdImpl:()=>rd,gatherV2Impl:()=>id,greaterEqualImpl:()=>hd,greaterImpl:()=>ud,lessEqualImpl:()=>Sd,lessImpl:()=>vd,linSpaceImpl:()=>Cd,logImpl:()=>Ed,maxImpl:()=>Gd,maximumImpl:()=>Xd,minimumImpl:()=>sf,multiplyImpl:()=>lp,negImpl:()=>ff,notEqualImpl:()=>kf,prodImpl:()=>Of,raggedGatherImpl:()=>Bf,raggedRangeImpl:()=>Uf,raggedTensorToTensorImpl:()=>jf,rangeImpl:()=>qf,rsqrtImpl:()=>im,scatterImpl:()=>lm,sigmoidImpl:()=>bc,simpleAbsImpl:()=>Wc,sliceImpl:()=>wh,sparseFillEmptyRowsImpl:()=>Em,sparseReshapeImpl:()=>Dm,sparseSegmentReductionImpl:()=>_m,sqrtImpl:()=>Bm,squaredDifferenceImpl:()=>Pm,stridedSliceImpl:()=>Xm,stringNGramsImpl:()=>Ym,stringSplitImpl:()=>Jm,stringToHashBucketFastImpl:()=>tg,subImpl:()=>zp,tileImpl:()=>og,topKImpl:()=>hg,transposeImpl:()=>qc,uniqueImpl:()=>bg});var t=u(8763),n=u(9121),s=u(2271),r=u(4841),a=u(1901);const i={kernelName:n.SYM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,(0,a.N)((0,s.p)(n,"float32"),-1))}}};var o=u(1274),l=u(7370),c=u(9494),h=u(3261),p=u(248),d=u(827);const f={kernelName:n.VGw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,p.h)((0,s.p)(n,"float32")),r=(0,h._)((0,d.l)((0,c.i)(1),t));return(0,l.W)((0,o.h)(e,r))}}}},m={kernelName:n.SpW,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,h._)((0,d.l)((0,p.h)((0,s.p)(n,"float32")),1));return(0,o.h)(e,t)}}}};var g=u(2200),y=u(4968),b=u(5475);const x={kernelName:n.mm_,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=g.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{let t=e;const s=g.getReductionAxes(n.shape,r);return s.length>0&&(t=(0,b.S)(t,s)),(0,y.X)(t,n.shape)},b:()=>{let t=e;const n=g.getReductionAxes(s.shape,r);return n.length>0&&(t=(0,b.S)(t,n)),(0,y.X)(t,s.shape)}}}},w={kernelName:n.Xze,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}};var v=u(6577);const k={kernelName:n.sJF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,v.P)(n)}}},I={kernelName:n.aJk,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,v.P)(n)}}},S={kernelName:n.M2y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,h._)((0,d.l)((0,c.i)(1),(0,p.h)((0,s.p)(n,"float32")))))}}};var N=u(6407);const T={kernelName:n.qw7,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,h._)((0,N.I)((0,c.i)(1),(0,p.h)((0,s.p)(n,"float32"))));return(0,o.h)(e,t)}}}},C={kernelName:n.QCc,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,g.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,N.I)((0,p.h)(n),(0,p.h)(s));let i=(0,r.d)(e,(0,o.h)(s,t));const u=(0,g.getReductionAxes)(n.shape,a);return u.length>0&&(i=(0,b.S)(i,u)),(0,y.X)(i,n.shape)},b:()=>{const t=(0,N.I)((0,p.h)(n),(0,p.h)(s));let i=(0,l.W)((0,r.d)(e,(0,o.h)(n,t)));const u=(0,g.getReductionAxes)(s.shape,a);return u.length>0&&(i=(0,b.S)(i,u)),(0,y.X)(i,s.shape)}}}},$={kernelName:n.jMg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,N.I)((0,p.h)((0,s.p)(n,"float32")),1))}}},E={kernelName:n.Oyi,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,d.l)((0,c.i)(1),(0,p.h)((0,s.p)(n,"float32"))))}}};var A=u(7097),D=u(3740),R=u(569),_=u(2582),F=u(2668);const O=(0,F.op)({avgPool3dGrad_:function(e,t,s,r,a,i){const o=(0,D._1)(e,"dy","avgPool3dGrad"),u=(0,D._1)(t,"input","avgPool3dGrad");let l=o,c=u,h=!1;4===u.rank&&(h=!0,l=(0,y.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=(0,y.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),R.hu(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),R.hu(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),(0,_.m)("avgPool3dGrad",a,i);const p={dy:l,input:c},d={filterSize:s,strides:r,pad:a,dimRoundingMode:i},f=A.BV.runKernel(n.IMb,p,d);return h?(0,y.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),M={kernelName:n._k9,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>O(e,s,r,a,i,o)}}},L=(0,F.op)({avgPoolGrad_:function(e,t,s,r,a){const i=(0,D._1)(e,"dy","avgPoolGrad"),o=(0,D._1)(t,"input","avgPoolGrad");R.hu(o.rank===i.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${i.rank})`));let u=o,l=i,c=!1;3===o.rank&&(c=!0,u=(0,y.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=(0,y.X)(i,[1,i.shape[0],i.shape[1],i.shape[2]])),R.hu(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),R.hu(4===u.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${u.rank}.`));const h={dy:l,input:u},p={filterSize:s,strides:r,pad:a},d=A.BV.runKernel(n.ROF,h,p);return c?(0,y.X)(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),B={kernelName:n.JhU,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>L(e,s,r,a,i)}}};var z=u(8687);const U={kernelName:n.XLW,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>(0,z.O)(e,r,!1,!1),b:()=>(0,z.O)(e,s,!0,!1)}:a&&!i?{a:()=>(0,z.O)(r,e,!1,!0),b:()=>(0,z.O)(s,e,!1,!1)}:{a:()=>(0,z.O)(r,e,!0,!0),b:()=>(0,z.O)(e,s,!0,!0)}:{a:()=>(0,z.O)(e,r,!1,!0),b:()=>(0,z.O)(s,e,!0,!1)}}};var W=u(7918);const P={kernelName:n.zws,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>(0,W.f)(e,s,r)}}},V={kernelName:n.Ly9,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>(0,b.S)(e,o,!0)}}},G={kernelName:n.RFZ,gradFunc:e=>({x:()=>e.clone()})},H={kernelName:n.gJX,gradFunc:e=>({x:()=>(0,v.P)(e)})};var j=u(7630),X=u(624),q=u(2856),K=u(5912);const Y={kernelName:n.xnO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>(0,K.a)((0,q.H)((0,j.b)(s,r),(0,X.z)(s,a)),e,(0,v.P)(e))}}},Q={kernelName:n.yj2,inputsToSave:["x"],gradFunc:i.gradFunc};var Z=u(8644);const J={kernelName:n.Eh3,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=(0,R.EC)(r,t[0].shape)[0],i=s.map((e=>e[a]));return(0,Z.V)(e,i,a).map((e=>()=>e))}};var ee=u(6013),te=u(9832);const ne={kernelName:n.mhS,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return R.hu(_.I0(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>(0,te._)(s.shape,e,r,i,o,u),filter:()=>(0,ee.p)(s,e,r.shape,i,o,u)}}};var se=u(4794);const re={kernelName:n.wm,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>(0,se.T)(e,r,a,i,o,1,u),filter:()=>(0,ee.p)(e,s,r.shape,a,i,o,u)}}},ae=(0,F.op)({conv3DBackpropFilter_:function(e,t,s,r,a){let i=e;4===e.rank&&(i=(0,y.X)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=(0,y.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),R.hu(5===i.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`)),R.hu(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),R.hu(5===s.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${s}.`)),R.hu(i.shape[4]===s[3],(()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${s[3]}.`)),R.hu(o.shape[4]===s[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${s[4]}).`));const u={x:i,dy:o},l={strides:r,pad:a,filterShape:s};return A.BV.runKernel(n.o2y,u,l)}});var ie=u(7594);const oe={kernelName:n.x12,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;R.hu((0,_.I0)(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>(0,ie._)(i.shape,e,o,r,a),filter:()=>ae(i,e,o.shape,r,a)}}};var ue=u(9331);const le={kernelName:n.mc4,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)((0,l.W)((0,ue.O)((0,s.p)(n,"float32"))),e)}}};var ce=u(3254);const he={kernelName:n.TR1,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)((0,ce.R)((0,s.p)(n,"float32")),e)}}};var pe=u(3591),de=u(7405),fe=u(9065);const me={kernelName:n.iHb,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=(0,pe.Q3)([r],s.rank);let n=(0,de.z)(e,r,a,!i);return null!=t&&(n=(0,fe.p)(n,t)),n}}}};var ge=u(8098),ye=u(4375);const be={kernelName:n.cie,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;R.hu(_.I0(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,l]=t;return R.hu(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),R.hu(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),R.hu(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),R.hu(_.jT(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),_.m("depthwiseConv2d",a,i),{x:()=>(0,ye.v)(u.shape,e,l,r,a,o,i),filter:()=>(0,ge.z)(u,e,l.shape,r,a,o,i)}}},xe={kernelName:n.p4S,inputsToSave:["x","filter"],gradFunc:(e,t,s)=>{const[r,a]=t,i={x:r,filter:a,dy:e},o={x:r,filter:a,dy:e};return{x:()=>A.BV.runKernel(n.ekb,i,s),filter:()=>A.BV.runKernel(n.Vn9,o,s)}}},we={kernelName:n.SX0,outputsToSave:[!0],gradFunc:(e,t)=>{const[s]=t,r={dy:e,y:s};return{x:()=>A.BV.runKernel(n.HEU,r)}}};var ve=u(4842);const ke={kernelName:n.Omj,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,r.d)((0,ve.Q)((0,l.W)((0,p.h)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,r.d)(e,s)}}},Ie={kernelName:n.NEP,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,n)}}},Se={kernelName:n.YFo,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,y.X)(e,n.shape)}}},Ne={kernelName:n.Y0y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,(0,ve.Q)(n))}}},Te={kernelName:n.OR,gradFunc:e=>({x:()=>(0,v.P)(e)})},Ce={kernelName:n.jeX,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,i=(0,g.assertAndGetBroadcastShape)(n.shape,a.shape);return{a:()=>{const t=(0,o.h)(e,(0,s.p)(a,"float32")),r=(0,g.getReductionAxes)(n.shape,i);return r.length>0?(0,y.X)((0,b.S)(t,r),n.shape):t},b:()=>{let t=(0,r.d)(e,(0,s.p)(n,"float32"));const u=(0,g.getReductionAxes)(a.shape,i);u.length>0&&(t=(0,y.X)((0,b.S)(t,u),a.shape));const c=(0,p.h)(a);return(0,l.W)((0,o.h)(t,(0,s.p)(c,"float32")))}}}};var $e=u(2634),Ee=u(7501);const Ae={kernelName:n.sHE,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[a,i,o,u]=t,l=null==u?(0,c.i)(1):u,h=(0,g.getReductionAxes)(i.shape,a.shape),p=[];if(1===i.rank){for(let e=0;e<a.shape.length-1;++e)p.push(a.shape[e]);p.push(1)}const f=(0,d.l)(a,i),m=(0,r.d)(e,l),x=(0,$e.b)((0,N.I)(o,(0,c.i)(s))),w=(0,r.d)((0,r.d)((0,r.d)(x,x),x),(0,c.i)(-.5));return{x:()=>1===i.rank?(0,y.X)((0,r.d)((0,r.d)(e,(0,Ee.G)((0,y.X)(x,[1,1,1,i.shape[0]]),p)),l),a.shape):(0,y.X)((0,r.d)((0,r.d)(e,x),l),a.shape),mean:()=>{let e=(0,r.d)((0,r.d)(x,(0,c.i)(-1)),m);return 1===i.rank&&(e=(0,b.S)(e,h)),(0,y.X)(e,i.shape)},variance:()=>{let e=(0,r.d)((0,r.d)(w,f),m);return 1===i.rank&&(e=(0,b.S)(e,h)),(0,y.X)(e,i.shape)},scale:()=>{const t=(0,r.d)(f,x);let n=(0,r.d)(e,t);return 1===i.rank&&(n=(0,b.S)(n,h)),(0,y.X)(n,i.shape)},offset:()=>{let t=e;return 1===i.rank&&(t=(0,b.S)(t,h)),(0,y.X)(t,i.shape)}}}};var De=u(8749);const Re={kernelName:n.qi_,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=(0,R.EC)(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),u=o.length,l=t.slice(a,t.length).slice(1),c=l.length,h=_e(0,u),p=_e(u+1,u+1+c),d=Fe([o,[n],l]),f=(0,y.X)(e,d),m=(0,y.X)(r,[n]),g=Fe([[u],h,p]),b=(0,fe.p)(f,g);let x=(0,De.p)(b,m,s.shape[i]);const w=(0,pe.LJ)(g);return x=(0,fe.p)(x,w),x},indices:()=>r}}};function _e(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Fe(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Oe={kernelName:n.Acj,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,v.P)(n),b:()=>(0,v.P)(s)}}},Me={kernelName:n.iJz,gradFunc:e=>({x:()=>(0,s.p)(e,"float32")})},Le={kernelName:n.avt,gradFunc:e=>({x:()=>(0,v.P)(e)})},Be={kernelName:n.iWB,gradFunc:e=>({x:()=>(0,v.P)(e)})},ze={kernelName:n.r7n,gradFunc:e=>({x:()=>(0,v.P)(e)})};var Ue=u(636);const We={kernelName:n.J$2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:a}=n,i=(0,Ue.p)(s,0);return{x:()=>(0,K.a)(i,e,(0,r.d)(e,a))}}},Pe={kernelName:n.kU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,N.I)(n,1))}}},Ve={kernelName:n.ZbH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,s.p)(n,"float32"))}}},Ge={kernelName:n.qCd,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;return{logits:()=>{const t=(0,ve.Q)(s);return(0,d.l)(e,(0,r.d)((0,b.S)(e,a,!0),t))}}}},He=(0,F.op)({localResponseNormalizationBackprop_:function(e,t,s,r=5,a=1,i=1,o=.5){const u={x:e,y:t,dy:s},l={depthRadius:r,bias:a,alpha:i,beta:o};return A.BV.runKernel(n.Hhh,u,l)}}),je={kernelName:n.eZ0,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>He(s,r,e,a,i,o,u)}}};var Xe=u(6477);function qe(e,t,n,a){return t.rank<n.rank&&(t=(0,y.X)(t,pe.rv(t.shape,a))),e.rank<n.rank&&(e=(0,y.X)(e,pe.rv(e.shape,a))),{x:()=>(0,r.d)(e,(0,s.p)((0,Xe.D)(n,t),e.dtype))}}const Ke={kernelName:n.YoZ,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=qe(e,t[1],a,R.EC(r,a.shape));return{x:()=>i.x()}}};var Ye=u(6573);const Qe={kernelName:n.BMI,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t;return{a:()=>(0,r.d)(e,(0,s.p)((0,j.b)(n,a),"float32")),b:()=>(0,r.d)(e,(0,s.p)((0,Ye.d)(n,a),"float32"))}}},Ze=(0,F.op)({maxPool3dGrad_:function(e,t,s,r,a,i,o){const u=(0,D._1)(e,"dy","maxPool3dGrad"),l=(0,D._1)(t,"input","maxPool3dGrad"),c=(0,D._1)(s,"output","maxPool3dGrad");let h=u,p=l,d=c,f=!1;4===l.rank&&(f=!0,h=(0,y.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=(0,y.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=(0,y.X)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),R.hu(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),R.hu(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),R.hu(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),(0,_.m)("maxPool3dGrad",i,o);const m={dy:h,input:p,output:d},g={filterSize:r,strides:a,pad:i,dimRoundingMode:o},b=A.BV.runKernel(n.OU7,m,g);return f?(0,y.X)(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}}),Je={kernelName:n.OAf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>Ze(e,s,r,a,i,o,u)}}},et=(0,F.op)({maxPoolGrad_:function(e,t,s,r,a,i,o){const u=(0,D._1)(e,"dy","maxPoolGrad"),l=(0,D._1)(t,"input","maxPoolGrad"),c=(0,D._1)(s,"output","maxPoolGrad");R.hu(l.rank===u.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${u.rank})`)),R.hu(4===u.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),R.hu(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),_.m("maxPoolGrad",i,o);const h={dy:u,input:l,output:c},p={filterSize:r,strides:a,pad:i,dimRoundingMode:o};return A.BV.runKernel(n.OV7,h,p)}}),tt={kernelName:n.mTV,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>et(e,s,r,a,i,o)}}};var nt=u(4917);const st={kernelName:n.q2K,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n,i=R.EC(a,s.shape),u=(0,pe.kz)(s.shape,i)[1],l=R.NA(u);return{x:()=>{const t=s.shape.slice();i.forEach((e=>{t[e]=1}));const n=(0,y.X)(e,t);return(0,o.h)((0,r.d)(n,(0,nt.i)(s.shape,"float32")),l)}}}},rt={kernelName:n.c17,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=qe(e,i,a,R.EC(r,a.shape));return{x:()=>o.x()}}},at={kernelName:n.q8u,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t;return{a:()=>(0,r.d)(e,(0,s.p)((0,X.z)(n,a),"float32")),b:()=>(0,r.d)(e,(0,s.p)((0,Ue.p)(n,a),"float32"))}}};var it=u(2676);const ot={kernelName:n.jQs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>(0,it.t)(e,a,s.shape)}}};var ut=u(6943);const lt={kernelName:n.Vbg,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,g.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,g.getReductionAxes)(n.shape,a);return t.length>0?(0,y.X)((0,b.S)(e,t),n.shape):e},b:()=>{const t=(0,r.d)(e,(0,l.W)((0,ut.G)((0,o.h)(n,s)))),i=(0,g.getReductionAxes)(s.shape,a);return i.length>0?(0,y.X)((0,b.S)(t,i),s.shape):t}}}},ct={kernelName:n.wYn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,i=(0,g.assertAndGetBroadcastShape)(n.shape,a.shape);return{a:()=>{const t=(0,r.d)(e,(0,s.p)(a,"float32")),o=(0,g.getReductionAxes)(n.shape,i);return o.length>0?(0,y.X)((0,b.S)(t,o),n.shape):t},b:()=>{const t=(0,r.d)(e,(0,s.p)(n,"float32")),o=(0,g.getReductionAxes)(a.shape,i);return o.length>0?(0,y.X)((0,b.S)(t,o),a.shape):t}}}},ht={kernelName:n.kuV,gradFunc:e=>({x:()=>(0,l.W)(e)})};var pt=u(723);const dt={kernelName:n.we_,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,pt.l)(n.shape,"float32")}}},ft={kernelName:n.qWM,gradFunc:e=>({x:()=>(0,v.P)(e)})};var mt=u(4136);const gt={kernelName:n.QiL,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return(0,mt.H)(e,s).map((e=>()=>e))}},yt={kernelName:n.lyA,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>(0,it.t)(e,a,s.shape)}}};var bt=u(2597),xt=u(3453);const wt={kernelName:n.pe_,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,a,i]=t,o=n,u=a,l=g.assertAndGetBroadcastShape(o.shape,u.shape);return{a:()=>{const t=(0,s.p)(u,"float32");let n=(0,r.d)(e,(0,r.d)(t,(0,xt.s)(o,(0,d.l)(t,(0,c.i)(1)))));const a=g.getReductionAxes(o.shape,l);return a.length>0&&(n=(0,b.S)(n,a)),(0,y.X)(n,o.shape)},b:()=>{const t=(0,Ue.p)(o,0),n=(0,K.a)(t,(0,bt.c)(o),(0,v.P)(o));let s=(0,r.d)(e,(0,r.d)(i,n));const a=g.getReductionAxes(u.shape,l);return a.length>0&&(s=(0,b.S)(s,a)),(0,y.X)(s,u.shape)}}}},vt={kernelName:n.o0g,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,Ue.p)(n,0);return{x:()=>(0,K.a)(a,e,(0,r.d)(e,s)),alpha:()=>{let t=(0,K.a)(a,(0,v.P)(e),(0,r.d)(e,n));const i=(0,g.getReductionAxes)(s.shape,e.shape);return i.length>0&&(t=(0,b.S)(t,i)),(0,y.X)(t,s.shape)}}}};var kt=u(9640);const It={kernelName:n.DlI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;let i=[];return i=null==a?s.shape.map(((e,t)=>t)):"number"==typeof a?[a]:a,{x:()=>function(e,t,n){const s=e.shape.length,a=s-n.length,i=pe.Q3(n,s);let o=e;null!=i&&(o=(0,fe.p)(e,i));const u=o.shape.slice(),l=u.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);u.push(l);let c=function(e,t,n){const s=e.shape.slice();s[n]=1;const a=(0,y.X)(t,s),i=(0,kt.$)(e,n,!0,!1),o=(0,kt.$)(e,n,!0,!0),u=(0,r.d)(i,o);return(0,r.d)(a,u)}(o.reshape(u),t,a);if(c=c.reshape(o.shape),null!=i){const e=pe.LJ(i);c=(0,fe.p)(c,e)}return c}(s,e,i)}}},St={kernelName:n.oHH,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,i=g.assertAndGetBroadcastShape(n.shape,a.shape);return{a:()=>{const t=(0,o.h)(e,(0,s.p)(a,"float32")),r=g.getReductionAxes(n.shape,i);return r.length>0?(0,y.X)((0,b.S)(t,r),n.shape):t},b:()=>{let t=(0,r.d)(e,(0,s.p)(n,"float32"));const u=g.getReductionAxes(a.shape,i);u.length>0&&(t=(0,y.X)((0,b.S)(t,u),a.shape));const c=(0,p.h)(a);return(0,l.W)((0,o.h)(t,(0,s.p)(c,"float32")))}}}},Nt={kernelName:n.$HU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,l.W)((0,p.h)(n)))}}},Tt={kernelName:n.SbG,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,i=(0,r.d)((0,X.z)(n,6),(0,a.N)(n));return{x:()=>(0,r.d)(e,(0,s.p)(i,"float32"))}}},Ct={kernelName:n.qkr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,(0,s.p)((0,a.N)(n),"float32"))}}},$t={kernelName:n.HZH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,y.X)(e,n.shape)}}},Et={kernelName:n._Yw,inputsToSave:["images"],gradFunc:(e,t,s)=>{const[r]=t,a={dy:e,images:r};return{images:()=>A.BV.runKernel(n.zbQ,a,s)}}},At={kernelName:n.dpD,inputsToSave:["images"],gradFunc:(e,t,s)=>{const[r]=t,a={dy:e,images:r};return{images:()=>A.BV.runKernel(n.Hmb,a,s)}}};var Dt=u(7486);const Rt={kernelName:n.mKl,gradFunc:(e,t,n)=>{const{dims:s}=n,r=(0,R.EC)(s,e.shape);return{x:()=>(0,Dt.G)(e,r)}}},_t={kernelName:n.e07,gradFunc:e=>({x:()=>(0,v.P)(e)})},Ft={kernelName:n.bV0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.W)((0,o.h)(e,(0,r.d)((0,xt.s)(n,1.5),2)))}}};var Ot=u(8651);const Mt={kernelName:n.PhF,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,s.p)((0,v.P)(n),"float32"),t:()=>(0,r.d)(e,(0,s.p)(n,e.dtype)),e:()=>(0,r.d)(e,(0,s.p)((0,Ot.h)(n),e.dtype))}}};var Lt=u(3179);const Bt={kernelName:n.oFR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Ue.p)(n,(0,c.i)(0)),a=(0,c.i)(Lt.y),i=(0,c.i)(Lt.$),o=(0,r.d)(e,i),u=(0,r.d)((0,r.d)(e,a),(0,ve.Q)((0,s.p)(n,"float32")));return(0,K.a)(t,o,u)}}}},zt={kernelName:n.a5O,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,(0,r.d)(n,(0,d.l)((0,c.i)(1),n)))}}},Ut={kernelName:n.i5y,gradFunc:e=>({x:()=>(0,v.P)(e)})};var Wt=u(173);const Pt={kernelName:n.RQH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)((0,Wt.m)((0,s.p)(n,"float32")),e)}}};var Vt=u(2699);const Gt={kernelName:n.wYB,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)((0,Vt.f)((0,s.p)(n,"float32")),e)}}};var Ht=u(9682),jt=u(7650);const Xt={kernelName:n.p2w,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,u]=(0,jt.parseSliceParams)(s,r,a),l=[];for(let t=0;t<e.rank;t++)l.push([o[t],i[t]-o[t]-u[t]]);return{x:()=>(0,Ht.v)(e,l)}}},qt={kernelName:n.Gcp,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:a}=n,i=(0,r.d)(e,s);return{logits:()=>(0,d.l)(i,(0,r.d)((0,b.S)(i,[a],!0),s))}}};var Kt=u(625);const Yt={kernelName:n.MRv,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,(0,Kt.X)(n))}}};var Qt=u(8441);const Zt={kernelName:n.TQc,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>(0,Qt.E)(e,s,r)}}};var Jt=u(6884);const en={kernelName:n.L8s,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>(0,Jt.z)(e,s)}}},tn={kernelName:n.FKq,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,r.d)((0,h._)((0,s.p)(n,"float32")),2))}}},nn={kernelName:n.bK0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)(e,(0,r.d)((0,s.p)(n,"float32"),2))}}},sn={kernelName:n._tC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,c.i)(2);return{a:()=>(0,r.d)(e,(0,r.d)(a,(0,d.l)(n,s))),b:()=>(0,r.d)(e,(0,r.d)(a,(0,d.l)(s,n)))}}},rn={kernelName:n.h8e,gradFunc:e=>({x:()=>(0,v.P)(e)})},an={kernelName:n.Tr8,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=g.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{let t=e;const s=g.getReductionAxes(n.shape,r);return s.length>0&&(t=(0,b.S)(t,s)),(0,y.X)(t,n.shape)},b:()=>{let t=e;const n=g.getReductionAxes(s.shape,r);return n.length>0&&(t=(0,b.S)(t,n)),(0,y.X)((0,l.W)(t),s.shape)}}}},on={kernelName:n.GBy,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,a=s.shape.slice(),{axis:i}=n;(0,R.EC)(i,s.shape).forEach((e=>{a[e]=1}));const o=(0,y.X)(e,a),u=(0,r.d)(o,(0,nt.i)(s.shape,"float32"));return{x:()=>u}}},un={kernelName:n.sEM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,p.h)((0,Wt.m)(n)))}}},ln={kernelName:n.MIZ,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,r.d)((0,d.l)((0,c.i)(1),(0,p.h)(n)),e)}}},cn={kernelName:n.n9L,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=(0,v.P)(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=(0,N.I)(t,(0,it.t)(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=(0,N.I)(t,(0,it.t)(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=(0,N.I)(t,(0,it.t)(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=(0,N.I)(t,(0,it.t)(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},hn={kernelName:n.G3Y,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=pe.LJ(r);return{x:()=>(0,fe.p)(e,a)}}};var pn=u(2991);const dn={kernelName:n.ToN,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>(0,pn.k)(e,r)}}};var fn=u(1300),mn=u(4926),gn=u(632);const yn={kernelName:n.Qvg,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,gn.g)(t,(0,v.P)(t)),s=(0,mn.I)(e,n);let r=(0,j.b)(t,(0,c.i)(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=(0,fn.d)(r,e+1);r=(0,q.H)(r,(0,nt.i)(s.shape,"bool"));const i=(0,v.P)(s);return(0,K.a)(r,s,i)}(e,n)}}},bn={kernelName:n.RuY,gradFunc:e=>({x:()=>(0,v.P)(e)})};var xn=u(6151);const wn=[i,f,m,x,w,k,I,S,T,C,$,E,M,B,U,P,V,G,H,Y,Q,J,re,ne,oe,le,he,me,be,xe,St,we,ke,Ie,Se,Ne,Ce,Te,Ae,Re,Oe,Me,Le,Be,ze,We,Pe,Ve,Ge,je,Ke,Ke,Qe,Je,tt,st,rt,at,ot,lt,ct,ht,dt,ft,gt,yt,yt,wt,vt,It,Nt,Tt,Ct,$t,Et,At,Rt,_t,Ft,Mt,Bt,zt,Ut,Pt,Gt,Xt,qt,Yt,Zt,Zt,en,en,tn,sn,nn,rn,an,on,un,ln,cn,hn,dn,yn,bn];for(const e of wn)(0,xn.Li)(e);var vn=u(6235),kn=u(4077);(0,kn.t3)().prototype.abs=function(){return this.throwIfDisposed(),(0,vn.W)(this)};var In=u(7839);(0,kn.t3)().prototype.acos=function(){return this.throwIfDisposed(),(0,In.K)(this)};var Sn=u(1470);(0,kn.t3)().prototype.acosh=function(){return this.throwIfDisposed(),(0,Sn._)(this)},(0,kn.t3)().prototype.add=function(e){return this.throwIfDisposed(),(0,N.I)(this,e)};var Nn=u(781);(0,kn.t3)().prototype.all=function(e,t){return this.throwIfDisposed(),(0,Nn.$)(this,e,t)};var Tn=u(2998);(0,kn.t3)().prototype.any=function(e,t){return this.throwIfDisposed(),(0,Tn.Y)(this,e,t)};var Cn=u(47);(0,kn.t3)().prototype.argMax=function(e){return this.throwIfDisposed(),(0,Cn.N)(this,e)};var $n=u(7394);(0,kn.t3)().prototype.argMin=function(e){return this.throwIfDisposed(),(0,$n.v)(this,e)},(0,kn.t3)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,R.hu)(1===this.size,(()=>"The array must have only 1 element.")),(0,y.X)(this,[])},(0,kn.t3)().prototype.asType=function(e){return this.throwIfDisposed(),(0,s.p)(this,e)},(0,kn.t3)().prototype.as1D=function(){return this.throwIfDisposed(),(0,y.X)(this,[this.size])},(0,kn.t3)().prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,y.X)(this,[e,t])},(0,kn.t3)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,y.X)(this,[e,t,n])},(0,kn.t3)().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),(0,y.X)(this,[e,t,n,s])},(0,kn.t3)().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),(0,y.X)(this,[e,t,n,s,r])};var En=u(2421);(0,kn.t3)().prototype.asin=function(){return this.throwIfDisposed(),(0,En.Z)(this)};var An=u(1891);(0,kn.t3)().prototype.asinh=function(){return this.throwIfDisposed(),(0,An.V)(this)};var Dn=u(7037);(0,kn.t3)().prototype.atan=function(){return this.throwIfDisposed(),(0,Dn.z)(this)};var Rn=u(9812);(0,kn.t3)().prototype.atan2=function(e){return this.throwIfDisposed(),(0,Rn.f)(this,e)};var _n=u(369);(0,kn.t3)().prototype.atanh=function(){return this.throwIfDisposed(),(0,_n.C)(this)};var Fn=u(5176);(0,kn.t3)().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),(0,Fn.w)(this,e,t,n,s)},(0,kn.t3)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,Qt.E)(this,e,t)};var On=u(7505);(0,kn.t3)().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),(0,On.t)(this,e,t,n,s,r)};var Mn=u(8247);(0,kn.t3)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,Mn.U)(this,e)},(0,kn.t3)().prototype.cast=function(e){return this.throwIfDisposed(),(0,s.p)(this,e)};var Ln=u(6825);(0,kn.t3)().prototype.ceil=function(){return this.throwIfDisposed(),(0,Ln.m)(this)};var Bn=u(2279);(0,kn.t3)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,Bn.i)(this,e,t)},(0,kn.t3)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof kn.es&&(e=[e]),(0,Jt.z)([this,...e],t)};var zn=u(1355);(0,kn.t3)().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,zn.P)(this,e,t,n,s,r,a)};var Un=u(1405);(0,kn.t3)().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),(0,Un.b)(this,e,t,n,s,r)},(0,kn.t3)().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,se.T)(this,e,t,n,s,r,a)},(0,kn.t3)().prototype.cos=function(){return this.throwIfDisposed(),(0,Wt.m)(this)},(0,kn.t3)().prototype.cosh=function(){return this.throwIfDisposed(),(0,Vt.f)(this)},(0,kn.t3)().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),(0,kt.$)(this,e,t,n)},(0,kn.t3)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,de.z)(this,e,t,n)};var Wn=u(9112);(0,kn.t3)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,Wn.n)(this,e,t)};var Pn=u(4718);(0,kn.t3)().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,Pn.B)(this,e,t,n,s,r,a)};var Vn=u(557);(0,kn.t3)().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),(0,Vn.W)(this,e,t,n,s,r)};var Gn=u(9322);(0,kn.t3)().prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,Gn.N)(this,e)},(0,kn.t3)().prototype.div=function(e){return this.throwIfDisposed(),(0,o.h)(this,e)};var Hn=u(548);(0,kn.t3)().prototype.dot=function(e){return this.throwIfDisposed(),(0,Hn.A)(this,e)};var jn=u(3233);(0,kn.t3)().prototype.elu=function(){return this.throwIfDisposed(),(0,jn.p)(this)},(0,kn.t3)().prototype.equal=function(e){return this.throwIfDisposed(),(0,Xe.D)(this,e)};var Xn=u(4650);(0,kn.t3)().prototype.erf=function(){return this.throwIfDisposed(),(0,Xn.q)(this)};var qn=u(1954);(0,kn.t3)().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),(0,qn.d)(this,e,t)},(0,kn.t3)().prototype.exp=function(){return this.throwIfDisposed(),(0,ve.Q)(this)},(0,kn.t3)().prototype.expandDims=function(e){return this.throwIfDisposed(),(0,fn.d)(this,e)};var Kn=u(3426);(0,kn.t3)().prototype.expm1=function(){return this.throwIfDisposed(),(0,Kn.t)(this)};var Yn=u(7020);(0,kn.t3)().prototype.fft=function(){return this.throwIfDisposed(),(0,Yn.k)(this)},(0,kn.t3)().prototype.flatten=function(){return this.throwIfDisposed(),(0,y.X)(this,[this.size])},(0,kn.t3)().prototype.floor=function(){return this.throwIfDisposed(),(0,ut.G)(this)};var Qn=u(9165);(0,kn.t3)().prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,Qn.q)(this,e)},(0,kn.t3)().prototype.gather=function(e,t){return this.throwIfDisposed(),(0,mn.I)(this,e,t)},(0,kn.t3)().prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,j.b)(this,e)},(0,kn.t3)().prototype.greater=function(e){return this.throwIfDisposed(),(0,Ue.p)(this,e)};var Zn=u(8447);(0,kn.t3)().prototype.ifft=function(){return this.throwIfDisposed(),(0,Zn.S)(this)};var Jn=u(4415);(0,kn.t3)().prototype.irfft=function(){return this.throwIfDisposed(),(0,Jn.w)(this)};var es=u(3963);(0,kn.t3)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,es.x)(this)};var ts=u(4365);(0,kn.t3)().prototype.isInf=function(){return this.throwIfDisposed(),(0,ts.U)(this)};var ns=u(6230);(0,kn.t3)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,ns.i)(this)};var ss=u(9133);(0,kn.t3)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,ss.h)(this,e)},(0,kn.t3)().prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,X.z)(this,e)},(0,kn.t3)().prototype.less=function(e){return this.throwIfDisposed(),(0,Ye.d)(this,e)};var rs=u(9648);(0,kn.t3)().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),(0,rs.G)(this,e,t,n,s)};var as=u(3888);(0,kn.t3)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,as.e)(this)};var is=u(1510);(0,kn.t3)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,is.C)(this,e)};var os=u(1391);(0,kn.t3)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,os.l)(this,e,t)},(0,kn.t3)().prototype.log=function(){return this.throwIfDisposed(),(0,bt.c)(this)};var us=u(7474);(0,kn.t3)().prototype.log1p=function(){return this.throwIfDisposed(),(0,us.K)(this)},(0,kn.t3)().prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,q.H)(this,e)},(0,kn.t3)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,Ot.h)(this)};var ls=u(5750);(0,kn.t3)().prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,ls.K)(this,e)};var cs=u(596);(0,kn.t3)().prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,cs.e)(this,e)},(0,kn.t3)().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,z.O)(this,e,t,n)};var hs=u(1174);(0,kn.t3)().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),(0,hs._)(this,e,t,n,s)};var ps=u(3307);(0,kn.t3)().prototype.max=function(e,t){return this.throwIfDisposed(),(0,ps.F)(this,e,t)},(0,kn.t3)().prototype.maximum=function(e){return this.throwIfDisposed(),(0,gn.g)(this,e)};var ds=u(5130);(0,kn.t3)().prototype.mean=function(e,t){return this.throwIfDisposed(),(0,ds.J)(this,e,t)};var fs=u(5735);(0,kn.t3)().prototype.min=function(e,t){return this.throwIfDisposed(),(0,fs.V)(this,e,t)};var ms=u(4513);(0,kn.t3)().prototype.minimum=function(e){return this.throwIfDisposed(),(0,ms.L)(this,e)};var gs=u(1483);(0,kn.t3)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,gs.V)(this,e,t)};var ys=u(5228);(0,kn.t3)().prototype.mod=function(e){return this.throwIfDisposed(),(0,ys.w)(this,e)},(0,kn.t3)().prototype.mul=function(e){return this.throwIfDisposed(),(0,r.d)(this,e)},(0,kn.t3)().prototype.neg=function(){return this.throwIfDisposed(),(0,l.W)(this)};var bs=u(3561);(0,kn.t3)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,bs.K)(this,e,t,n)};var xs=u(6500);(0,kn.t3)().prototype.notEqual=function(e){return this.throwIfDisposed(),(0,xs.Q)(this,e)};var ws=u(6708);(0,kn.t3)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,ws.l)(this,e,t,n)};var vs=u(7846);(0,kn.t3)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,vs.J)(this)},(0,kn.t3)().prototype.pad=function(e,t){return this.throwIfDisposed(),(0,Ht.v)(this,e,t)};var ks=u(5860);(0,kn.t3)().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,ks.d)(this,e,t,n,s,r,a)},(0,kn.t3)().prototype.pow=function(e){return this.throwIfDisposed(),(0,xt.s)(this,e)};var Is=u(8151);(0,kn.t3)().prototype.prelu=function(e){return this.throwIfDisposed(),(0,Is.A)(this,e)};var Ss=u(9451);(0,kn.t3)().prototype.prod=function(e,t){return this.throwIfDisposed(),(0,Ss.W)(this,e,t)};var Ns=u(9036);(0,kn.t3)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,Ns.M)(this)};var Ts=u(7409);(0,kn.t3)().prototype.relu=function(){return this.throwIfDisposed(),(0,Ts.U)(this)};var Cs=u(3582);(0,kn.t3)().prototype.relu6=function(){return this.throwIfDisposed(),(0,Cs.b)(this)},(0,kn.t3)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,y.X)(this,e.shape)},(0,kn.t3)().prototype.reshape=function(e){return this.throwIfDisposed(),(0,y.X)(this,e)};var $s=u(3305);(0,kn.t3)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,$s.I)(this,e,t,n)};var Es=u(5098);(0,kn.t3)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,Es.j)(this,e,t,n)},(0,kn.t3)().prototype.reverse=function(e){return this.throwIfDisposed(),(0,Dt.G)(this,e)};var As=u(3710);(0,kn.t3)().prototype.rfft=function(){return this.throwIfDisposed(),(0,As.Q)(this)};var Ds=u(7809);(0,kn.t3)().prototype.round=function(){return this.throwIfDisposed(),(0,Ds.N)(this)},(0,kn.t3)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,$e.b)(this)};var Rs=u(5503);(0,kn.t3)().prototype.selu=function(){return this.throwIfDisposed(),(0,Rs.U)(this)};var _s=u(8678);(0,kn.t3)().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,_s.U)(this,e,t,n,s,r,a)},(0,kn.t3)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,Kt.X)(this)};var Fs=u(4434);(0,kn.t3)().prototype.sign=function(){return this.throwIfDisposed(),(0,Fs.X)(this)},(0,kn.t3)().prototype.sin=function(){return this.throwIfDisposed(),(0,ue.O)(this)},(0,kn.t3)().prototype.sinh=function(){return this.throwIfDisposed(),(0,ce.R)(this)},(0,kn.t3)().prototype.slice=function(e,t){return this.throwIfDisposed(),(0,it.t)(this,e,t)};var Os=u(682);(0,kn.t3)().prototype.softmax=function(e){return this.throwIfDisposed(),(0,Os.X)(this,e)};var Ms=u(3694);(0,kn.t3)().prototype.softplus=function(){return this.throwIfDisposed(),(0,Ms.W)(this)},(0,kn.t3)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,W.f)(this,e,t)},(0,kn.t3)().prototype.split=function(e,t){return this.throwIfDisposed(),(0,Z.V)(this,e,t)},(0,kn.t3)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,h._)(this)},(0,kn.t3)().prototype.square=function(){return this.throwIfDisposed(),(0,p.h)(this)};var Ls=u(5265);(0,kn.t3)().prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,Ls.$)(this,e)};var Bs=u(9590);(0,kn.t3)().prototype.squeeze=function(e){return this.throwIfDisposed(),(0,Bs.L)(this,e)},(0,kn.t3)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof kn.es?[this,e]:[this,...e];return(0,pn.k)(n,t)},(0,kn.t3)().prototype.step=function(e){return this.throwIfDisposed(),(0,a.N)(this,e)};var zs=u(5158);(0,kn.t3)().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),(0,zs.N)(this,e,t,n,s,r,a,i,o)},(0,kn.t3)().prototype.sub=function(e){return this.throwIfDisposed(),(0,d.l)(this,e)},(0,kn.t3)().prototype.sum=function(e,t){return this.throwIfDisposed(),(0,b.S)(this,e,t)};var Us=u(1173);(0,kn.t3)().prototype.tan=function(){return this.throwIfDisposed(),(0,Us.O)(this)};var Ws=u(1869);(0,kn.t3)().prototype.tanh=function(){return this.throwIfDisposed(),(0,Ws.A)(this)},(0,kn.t3)().prototype.tile=function(e){return this.throwIfDisposed(),(0,Ee.G)(this,e)},(0,kn.t3)().prototype.toBool=function(){return this.throwIfDisposed(),(0,s.p)(this,"bool")},(0,kn.t3)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,s.p)(this,"float32")},(0,kn.t3)().prototype.toInt=function(){return this.throwIfDisposed(),(0,s.p)(this,"int32")};var Ps=u(3243);(0,kn.t3)().prototype.topk=function(e,t){return this.throwIfDisposed(),(0,Ps.h)(this,e,t)},(0,kn.t3)().prototype.transpose=function(e){return this.throwIfDisposed(),(0,fe.p)(this,e)};var Vs=u(9608);(0,kn.t3)().prototype.unique=function(e){return this.throwIfDisposed(),(0,Vs.T)(this,e)},(0,kn.t3)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,De.p)(this,e,t)},(0,kn.t3)().prototype.unstack=function(e){return this.throwIfDisposed(),(0,mt.H)(this,e)},(0,kn.t3)().prototype.where=function(e,t){return this.throwIfDisposed(),(0,K.a)(e,this,t)},(0,kn.t3)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,v.P)(this)};class Gs extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Gs.prototype)}}class Hs extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Hs.prototype)}}class js extends Error{constructor(e){super(e),Object.setPrototypeOf(this,js.prototype)}}class Xs extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Xs.prototype)}}class qs extends Error{constructor(e){super(e),Object.setPrototypeOf(this,qs.prototype)}}class Ks extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ks.prototype)}}class Ys{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Qs(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Zs(e,t){if(!e)throw new qs(t)}function Js(e,t){let n=0;for(const s of e)s===t&&n++;return n}function er(e){return 1===e.length?e[0]:e}function tr(e){return Array.isArray(e)?e:[e]}function nr(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function sr(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let rr={};function ar(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function ir(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>ir(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?ir(t):e[n]=t.value)}}}function or(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in rr)a=rr[r];else if(a=t[r],null==a)throw new js(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new js(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in rr?[o,u]=rr.className:i in t&&([o,u]=t[i]),null==o)throw new js(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(rr))e[t]=rr[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},rr);for(const e of Object.keys(n))rr[e]=n[e];ir(a.config);const s=u(o,a.config,n,r);return rr=Object.assign({},t),s}{const e=Object.assign({},rr);for(const e of Object.keys(n))rr[e]=n[e];const t=new o(a.config);return rr=Object.assign({},e),t}}}function ur(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function lr(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function cr(e){if(null==e)throw new js(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function hr(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new js(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function pr(e,t,n=0,s=1/0){return Zs(n>=0),Zs(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function dr(e,n){Array.isArray(e)?(t.D5U.assert(e.length>0,(()=>`${n} is unexpectedly an empty array.`)),e.forEach(((e,t)=>dr(e,`element ${t+1} of ${n}`)))):t.D5U.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${n} to be a positive integer, but got ${fr(e)}.`))}function fr(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>fr(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function mr(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let gr=0;function yr(){return gr++}const br={};function xr(e=""){return e in br||(br[e]=0),br[e]+=1,e+br[e].toString()}const wr=["channelsFirst","channelsLast"],vr=["nearest","bilinear"],kr=["valid","same","causal"],Ir=["max","avg"],Sr=["sum","mul","concat","ave"],Nr=new Map;function Tr(e){hr(wr,"DataFormat",e)}function Cr(e){hr(kr,"PaddingMode",e)}function $r(e){hr(Ir,"PoolMode",e)}const Er=[];function Ar(e,t){Er.push(e);try{const e=t();return Er.pop(),e}catch(e){throw Er.pop(),e}}function Dr(e){if(!Fr(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Er.length?"":Er.join("/")+"/")+e}function Rr(e){if(!Fr(e))throw new Error("Not a valid tensor name: '"+e+"'");Nr.has(e)||Nr.set(e,0);const t=Nr.get(e);if(Nr.set(e,Nr.get(e)+1),t>0){const n=`${e}_${t}`;return Nr.set(n,1),n}return e}const _r=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Fr(e){return!!e.match(_r)}function Or(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Mr(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function Lr(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function Br(e,t){if(t<e)throw new js(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let zr;function Ur(){return null==zr&&(zr=(0,t.y3$)().epsilon()),zr}function Wr(e,n){return t.pju(e,n)}function Pr(e,n=-1){const s=e.shape.slice();return n<0&&(n=s.length+n+1),s.splice(n,0,1),t.XLQ(e,s)}function Vr(e,n,s){return(0,t.lub)((()=>{switch(e.rank){case 1:return t.jZU(e,n,s);case 2:return t.SmN(e,[n,0],[s,e.shape[1]]);case 3:return t.CnO(e,[n,0,0],[s,e.shape[1],e.shape[2]]);case 4:return t.p0P(e,[n,0,0,0],[s,e.shape[1],e.shape[2],e.shape[3]]);case 5:return t.tPi(e,[n,0,0,0,0],[s,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return t.tPi(e,[n,0,0,0,0,0],[s,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new js(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Gr(e,n,s){return(0,t.lub)((()=>{switch(e.rank){case 1:return t.jZU(e,n,s);case 2:return t.SmN(e,[0,n],[e.shape[0],s]);case 3:return t.CnO(e,[0,0,n],[e.shape[0],e.shape[1],s]);case 4:return t.p0P(e,[0,0,0,n],[e.shape[0],e.shape[1],e.shape[2],s]);default:throw new js(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Hr(e,n,s,r){return(0,t.lub)((()=>{switch(e.rank){case 1:return t.jZU(e,n,s);case 2:switch(r){case 1:return Vr(e,n,s);case 2:return Gr(e,n,s);default:throw new js(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return Vr(e,n,s);case 2:return t.CnO(e,[0,n,0],[e.shape[0],s,e.shape[2]]);case 3:return Gr(e,n,s);default:throw new js(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return Vr(e,n,s);case 2:return t.p0P(e,[0,n,0,0],[e.shape[0],s,e.shape[2],e.shape[3]]);case 3:return t.p0P(e,[0,0,n,0],[e.shape[0],e.shape[1],s,e.shape[3]]);case 4:return Gr(e,n,s);default:throw new js(`The axis is not within the rank of the tensor ${r}`)}default:throw new js(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function jr(e,n=-1){let s;return n<0&&(s=e[0].rank,n=0!==s?s:0),n===e[0].rank&&(n=-1),t.zoF(e,n)}function Xr(e,n){switch(e.rank){case 1:return t.gME([e,n]);case 2:return t.Izb([e,n],0);case 3:return t.MNy([e,n],0);case 4:return t.ZaL([e,n],0);default:throw new js(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function qr(e,n){if(Array.isArray(n)||(n=[n]),e.rank!==n.length)throw new js(`The length of input n (${n.length}) does not match the number of dimensions in input x (${e.rank})`);return t.Gg6(e,n)}function Kr(e,n=0,s=1,r,a){return t.nGf(e,n,s,r,a)}function Yr(e,n,s,r){if(e.rank<2||n.rank<2)throw new Xs(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${n.shape}`);if(n.rank>=3&&e.shape.slice(-1)[0]!==n.shape.slice(-2)[0])throw new Xs(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${n.shape}`);if(2===e.rank&&2===n.rank){const a=!1,i=!1;return t.imm.matMul({a:e,b:n,transposeA:a,transposeB:i,bias:r?Jr(e.rank,r,"channelsLast"):null,activation:s})}{const a=e.shape.slice(),i=a.pop();e=t.XLQ(e,[-1,i]);const o=n.shape.slice(),u=o.pop(),l=o.pop(),c=[...o,u],h=Array.from({length:n.rank},((e,t)=>0===t?n.rank-2:t<=n.rank-2?t-1:t));n=t.XLQ(t.p4s(n,h),[l,-1]);const p=[...a,...c],d=!1,f=!1;return t.XLQ(t.imm.matMul({a:e,b:n,transposeA:d,transposeB:f,bias:r?Jr(e.rank,r,"channelsLast"):null,activation:s}),p)}}function Qr(e,n,s){return(0,t.lub)((()=>(n=Array.isArray(n)?(0,t.RRF)(n,"int32"):t.pju(n,"int32"),t.Iqj(e,n,s))))}function Zr(e){return t.dC7(e,e)}function Jr(e,n,s){const r=n.shape;if(1!==n.rank&&n.rank!==e)throw new js(`Unexpected bias dimensions: ${n.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===s)return 1===r.length?t.XLQ(n,[1,r[0],1,1,1]):t.XLQ(n,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===s)return 1===r.length?t.XLQ(n,[1,1,1,1,r[0]]):t.XLQ(n,[1].concat(r))}else if(4===e){if("channelsFirst"===s)return 1===r.length?t.XLQ(n,[1,r[0],1,1]):t.XLQ(n,[1,r[2],r[0],r[1]]);if("channelsLast"===s)return 1===r.length?t.XLQ(n,[1,1,1,r[0]]):t.XLQ(n,[1].concat(r))}else if(3===e){if("channelsFirst"===s)return 1===r.length?t.XLQ(n,[1,r[0],1]):t.XLQ(n,[1,r[1],r[0]]);if("channelsLast"===s)return 1===r.length?t.XLQ(n,[1,1,r[0]]):t.XLQ(n,[1].concat(r))}else if(e<3)return n;throw new js(`Unsupported input rank by biasAdd: ${n.rank}`)}function ea(e,n,s){return(0,t.lub)((()=>(null==s&&(s="channelsLast"),Tr(s),t.IHx(e,Jr(e.rank,n,s)))))}function ta(e,n,s,r){return(0,t.lub)((()=>t.rvX(e,n,s,r)))}function na(e,t,n=!1){return n?e():t()}const sa=["fanIn","fanOut","fanAvg"],ra=["normal","uniform","truncatedNormal"];class aa extends t.m7h.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class ia extends aa{apply(e,n){return(0,t.lls)(e,n)}}ia.className="Zeros",t.m7h.registerClass(ia);class oa extends aa{apply(e,n){return(0,t.iUs)(e,n)}}oa.className="Ones",t.m7h.registerClass(oa);class ua extends aa{constructor(e){if(super(),"object"!=typeof e)throw new js(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new js(`config must have value set but got ${e}`);this.value=e.value}apply(e,n){return(0,t.lub)((()=>(0,t.dC7)((0,t.iD$)(this.value),(0,t.iUs)(e,n))))}getConfig(){return{value:this.value}}}ua.className="Constant",t.m7h.registerClass(ua);class la extends aa{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,n){return(0,t.LGj)(e,this.minval,this.maxval,n)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}la.className="RandomUniform",t.m7h.registerClass(la);class ca extends aa{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Xs(`randomNormal does not support dType ${t}.`);return Kr(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ca.className="RandomNormal",t.m7h.registerClass(ca);class ha extends aa{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,n){if("float32"!==(n=n||"float32")&&"int32"!==n)throw new Xs(`truncatedNormal does not support dType ${n}.`);return(0,t.Xu6)(e,this.mean,this.stddev,n,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ha.className="TruncatedNormal",t.m7h.registerClass(ha);class pa extends aa{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,n){return(0,t.lub)((()=>{if(2!==e.length||e[0]!==e[1])throw new js("Identity matrix initializer can only be used for 2D square matrices.");return(0,t.dC7)(this.gain,(0,t.iyy)(e[0]))}))}getConfig(){return{gain:this.gain}}}pa.className="Identity",t.m7h.registerClass(pa);class da extends aa{constructor(e){if(super(),e.scale<0)throw new js(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,hr(sa,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){hr(ra,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,n){const s=function(e,t="channelsLast"){let n,s;if(Tr(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Or(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Or(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Or(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),r=s[0],a=s[1];let i=this.scale;if("fanIn"===this.mode?i/=Math.max(1,r):"fanOut"===this.mode?i/=Math.max(1,a):i/=Math.max(1,(r+a)/2),"normal"===this.distribution){const s=Math.sqrt(i);if("float32"!==(n=n||"float32")&&"int32"!==n)throw new Xs(`${this.getClassName()} does not support dType ${n}.`);return(0,t.Xu6)(e,0,s,n,this.seed)}{const s=Math.sqrt(3*i);return(0,t.LGj)(e,-s,s,n)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}da.className="VarianceScaling",t.m7h.registerClass(da);class fa extends da{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return da.className}}fa.className="GlorotUniform",t.m7h.registerClass(fa);class ma extends da{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return da.className}}ma.className="GlorotNormal",t.m7h.registerClass(ma);class ga extends da{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return da.className}}ga.className="HeNormal",t.m7h.registerClass(ga);class ya extends da{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return da.className}}ya.className="HeUniform",t.m7h.registerClass(ya);class ba extends da{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return da.className}}ba.className="LeCunNormal",t.m7h.registerClass(ba);class xa extends da{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return da.className}}xa.className="LeCunNormal",t.m7h.registerClass(xa);class wa extends aa{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Xs("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,n){return(0,t.lub)((()=>{if(e.length<2)throw new Xs("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const n=Kr(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let s=t.$r2.gramSchmidt(n);return e[0]>e[1]&&(s=(0,t.p4s)(s)),(0,t.dC7)(this.gain,s)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}wa.className="Orthogonal",t.m7h.registerClass(wa);const va={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function ka(e,n={}){return or(e,t.m7h.SerializationMap.getMap().classNameMap,n,"initializer")}function Ia(e){return ar(e)}function Sa(e){if("string"==typeof e){const t=e in va?va[e]:e;if("GlorotNormal"===t)return new ma;if("GlorotUniform"===t)return new fa;if("HeNormal"===t)return new ga;if("HeUniform"===t)return new ya;if("LeCunNormal"===t)return new ba;if("LeCunUniform"===t)return new xa;{const e={};return e.className=t,e.config={},ka(e)}}return e instanceof aa?e:ka(e)}function Na(e){return Array.isArray(e)&&Array.isArray(e[0])}function Ta(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Ca(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new js(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function $a(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new js(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Ea(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const Aa="Variable";class Da{constructor(e,n="float32",s=Aa,r=!0,a=null){this.dtype=null==n?"float32":n,this.shape=e.shape,this.id=yr(),s=null==s?Aa:s,this.originalName=Dr(s),this.name=Rr(this.originalName),this.trainable_=r,this.constraint=a,this.val=t.VD$(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Ra(e){return e.map((e=>e.read()))}function _a(e){e.forEach((e=>{e[0].write(e[1])}))}class Fa{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Oa{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=yr(),null!=a&&(this.originalName=Dr(a),this.name=Rr(this.originalName)),this.rank=t.length}}let Ma=0;class La{constructor(e,t){this.callArgs=t,this.id=Ma++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Ba=0;class za extends t.m7h.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Ba++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=nr(e)+"_"+xr(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Hs(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new js(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return er(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return er(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Gs(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Gs(`Layer ${this.name} is not connected, no input to return.`);return er(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Gs(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Gs(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return er(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=tr(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=tr(this.inputSpec);if(e.length!==t.length)throw new js(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new js(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new js(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new js(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new js(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new js(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new js(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=tr(e);let s=!0;for(const e of n)if(!(e instanceof Oa)){s=!1;break}let r=!0;for(const e of n)if(e instanceof Oa){r=!1;break}if(s===r)throw new js("Arguments to apply() must be all SymbolicTensors or all Tensors");return Ar(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of tr(e))t.push(n.shape);this.build(er(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=tr(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=er(a),null!=this.activityRegularizer)throw new Xs("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=tr(e);const t=[];for(const n of e)t.push(n.shape);return er(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new Oa(a,n,this,tr(e),t,this.name,s))):new Oa(a,s,this,tr(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Xs("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Gs(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Gs(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Hs(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Ea(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Ra(e?this.trainableWeights:this.weights)}setWeights(e){(0,t.lub)((()=>{const n=this.weights;if(n.length!==e.length)throw new js(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${n.length} weights. Provided weights: ${e}...`);if(0===n.length)return;const s=[],r=Ra(n);for(let a=0;a<r.length;++a){const i=r[a],o=n[a],u=e[a];if(!t.D5U.arraysEqual(i.shape,u.shape))throw new js(`Layer weight shape ${i.shape} not compatible with provided weight shape ${u.shape}`);s.push([o,u])}_a(s)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new js(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():Sa("zeros"));const u=s.apply(t,n),l=new Da(u,n,e,a,i);return u.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=tr(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=tr(e);t=tr(t),n=tr(n),s=tr(s),r=Ta(r),a=Ta(a);const u=[],l=[],c=[];for(const e of o)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new La({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Ua(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Ua(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Wa extends za{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:xr("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new js("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new js("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new js("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Oa(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new La({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new js(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}Wa.className="InputLayer",t.m7h.registerClass(Wa);class Pa{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Pa)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,n,s){if(null!=this.id2Value[e.id])throw new js(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,n){if(null==e.dtype||e.dtype===n.dtype)return n;try{return(0,t.pju)(n,e.dtype)}catch(t){throw new js(`The dtype of the feed (${n.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,n),this.name2Id[e.name]=e.id,null!=s&&(this.id2Mask[e.id]=s),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Oa){if(null==this.id2Value[e.id])throw new js(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new js(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Oa){if(null==this.id2Value[e.id])throw new js(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new js(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&(0,t.B90)(this.id2Mask)}}const Va=new Ys,Ga=new Ys;function Ha(e,n,s,r){const a=null!=s&&s.training,i=Array.isArray(e),o=i?e:[e],u=o.map((e=>e.name)),l=[],c=n.names();for(const e of u)-1!==c.indexOf(e)?l.push(n.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const h=u.join(",")+"|"+n.names().sort().join(",");let p,d=Va.get(h);if(null==d){const e=function(e,n){t.D5U.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let s=[],r={};if(1===e.length){const t=Xa(e[0],n);s=t.sorted,r=t.recipientMap}else{const t=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Xa(a,n);for(const n of e)t.has(n.name)||(s.push(n),t.add(n.name));for(const e in i)null==r[e]&&(r[e]=new Set),i[e].forEach((t=>r[e].add(t)))}}return{sorted:s,recipientCounts:ja(r)}}(o,n);d=e.sorted,p=e.recipientCounts,Va.put(h,d),Ga.put(h,p)}p={},a||Object.assign(p,Ga.get(h));const f=new Pa(n);for(let e=0;e<d.length;++e){if(null!=r){const e=(0,t.sq6)().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const i=d[e],o=i.sourceLayer;if(o instanceof Wa)continue;const c=[],h=[],m=[];let g=!1;for(const e of i.inputs){const t=f.getValue(e),s=f.getMask(e);c.push(t),h.push(s),null!=s&&(g=!0),a||(p[e.name]--,0!==p[e.name]||n.hasKey(e)||-1!==u.indexOf(e.name)||t.isDisposed||!0===e.sourceLayer.stateful||m.push(t))}g&&((s=s||{}).mask=h[0]);const y=tr(o.apply(c,s));let b=null;o.supportsMasking&&(b=o.computeMask(c,h));const x=qa(i),w=Array.isArray(x)?x:[x];for(let e=0;e<w.length;++e){f.hasKey(w[e])||f.add(w[e],y[e],Array.isArray(b)?b[0]:b);const t=u.indexOf(w[e].name);-1!==t&&(l[t]=y[e])}a||(0,t.B90)(m)}return f.disposeMasks(),i?l:l[0]}function ja(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Xa(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function qa(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function Ka(e,n){return(0,t.lub)((()=>t._b3(t.Smz(t.dC7(e,e),n,!0))))}(0,t.OBj)().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=Va&&Va.setMaxEntries(e),null!=Ga&&Ga.setMaxEntries(e)}));class Ya extends t.m7h.Serializable{getConfig(){return{}}}class Qa extends Ya{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,t.lub)((()=>{const n=Ka(e,this.axis),s=t.iUl(n,0,this.maxValue);return t.dC7(e,t.hiC(s,t.IHx(Ur(),n)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Qa.className="MaxNorm",t.m7h.registerClass(Qa);class Za extends Ya{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,t.lub)((()=>t.hiC(e,t.IHx(Ur(),Ka(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Za.className="UnitNorm",t.m7h.registerClass(Za);class Ja extends Ya{apply(e){return t.UYe(e)}}Ja.className="NonNeg",t.m7h.registerClass(Ja);class ei extends Ya{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,t.lub)((()=>{const n=Ka(e,this.axis),s=t.IHx(t.dC7(this.rate,t.iUl(n,this.minValue,this.maxValue)),t.dC7(1-this.rate,n));return t.dC7(e,t.hiC(s,t.IHx(Ur(),n)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}ei.className="MinMaxNorm",t.m7h.registerClass(ei);const ti={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function ni(e){return ar(e)}function si(e,n={}){return or(e,t.m7h.SerializationMap.getMap().classNameMap,n,"constraint")}function ri(e){return null==e?null:"string"==typeof e?si({className:e in ti?ti[e]:e,config:{}}):e instanceof Ya?e:si(e)}async function ai(e){if(null==e)return;const n=[],s=[],r=[];for(const t in e){const a=e[t];if("number"!=typeof a){const e=a;n.push(e.data()),s.push(t),r.push(e)}}if(n.length>0){const a=await Promise.all(n);for(let t=0;t<a.length;++t)e[s[t]]=a[t][0];(0,t.B90)(r)}}function ii(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var oi;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(oi||(oi={}));class ui{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class li{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class ci extends ui{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,n){null==n&&(n={});const s=null==n.size?0:n.size;this.seen+=s;for(const e in n){const r=n[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*s;else{let n;e in this.totals?n=this.totals[e]:this.totals[e]=0;const a=(0,t.lub)((()=>(0,t.IHx)(this.totals[e],(0,t.dC7)(r,s))));this.totals[e]=a,null!=n&&n.dispose()}}}async onEpochEnd(e,n){if(null!=n)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?n[e]=this.totals[e]/this.seen:(0,t.lub)((()=>{const s=(0,t.dC7)((0,t.hiC)(1,this.seen),this.totals[e]);n[e]=s,this.totals[e].dispose(),(0,t.CnY)(n[e])})))}}class hi extends ui{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class pi extends ui{constructor(e,n){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||t.glt,this.yieldEvery=n||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");t.D5U.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,n,s){let r,a=null!=s?s():t.D5U.now();return(...i)=>{const o=null!=s?s():t.D5U.now();return o-a<n||(a=o,r=e(...i)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await ai(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await ai(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await ai(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await ai(t),await this.batchBegin(e,t))}async onBatchEnd(e,n){const s=[];null!=this.batchEnd&&(await ai(n),s.push(this.batchEnd(e,n))),"batch"===this.yieldEvery?s.push(this.nextFrameFunc()):t.D5U.isNumber(this.yieldEvery)&&s.push(this.maybeWait(this.currentEpoch,e,n)),await Promise.all(s)}async onTrainBegin(e){null!=this.trainBegin&&(await ai(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await ai(e),await this.trainEnd(e))}}function di(e,t){return null==e&&(e={}),e instanceof ui?[e]:Array.isArray(e)&&e[0]instanceof ui?e:tr(e).map((e=>new pi(e,t)))}class fi{constructor(){}static registerCallbackConstructor(e,n){t.D5U.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),fi.checkForDuplicate(n),null==fi.constructors[e]&&(fi.constructors[e]=[]),fi.constructors[e].push(n)}static checkForDuplicate(e){for(const t in fi.constructors)fi.constructors[+t].forEach((t=>{if(t===e)throw new js("Duplicate callback constructor.")}))}static clear(){fi.constructors={}}static createCallbacks(e){const t=[];for(const n in fi.constructors){const s=+n;e>=s&&t.push(...fi.constructors[s])}return t.map((e=>new e))}}function mi(e,t,n,s,r,a,i,o,u){const l=new hi,c=[new ci,...fi.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new li(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function gi(e,n={},s=!1){return or(e,t.m7h.SerializationMap.getMap().classNameMap,n,"layer",s)}function yi(e,n){return(0,t.lub)((()=>{"float32"!==e.dtype&&(e=t.pju(e,"float32"));const s=t.Smz(Zr(e),n,!0),r=t.hlL(s.shape,Ur()),a=t._b3(t.gWQ(s,r));return t.hiC(e,a)}))}function bi(e,n){return(0,t.lub)((()=>t.J69(Zr(t.luU(n,e)),-1)))}function xi(e,n){return(0,t.lub)((()=>t.J69(t.WnP(t.luU(n,e)),-1)))}function wi(e,n){return(0,t.lub)((()=>{const s=t.luU(e,n),r=t.iUl(t.WnP(e),Ur(),Number.MAX_VALUE),a=t.WnP(t.hiC(s,r));return t.dC7(100,t.J69(a,-1))}))}function vi(e,n,s=!1){return(0,t.lub)((()=>{if(s)n=t.XAC(n);else{const e=t.Smz(n,n.shape.length-1,!0);n=t.hiC(n,e)}return n=t.iUl(n,Ur(),1-Ur()),t.W76(t.Smz(t.dC7(t.pju(e,"float32"),t.cM7(n)),n.shape.length-1))}))}function ki(e,n,s=!1){return(0,t.lub)((()=>{const r=t.pju(t.GWj(function(e){const n=[Or(e.shape)];return t.XLQ(e,n)}(e)),"int32"),a=(n=t.iUl(n,Ur(),1-Ur())).shape;return vi(t.XLQ(t.lfX(r,a[a.length-1]),a),n,s)}))}function Ii(e,n){return(0,t.lub)((()=>{let s;return s=t.iUl(n,Ur(),1-Ur()),s=t.cM7(t.hiC(s,t.luU(1,s))),t.J69(function(e,n){if(!t.D5U.arraysEqual(e.shape,n.shape))throw new js(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(n.shape)}`);return(0,t.lub)((()=>{const s=t.UYe(n),r=t.W76(t.WnP(n));return t.IHx(t.luU(s,t.dC7(n,e)),t.Krr(t.Qqt(r)))}))}(e,s),-1)}))}function Si(e,n){return(0,t.lub)((()=>{const s=yi(e,-1),r=yi(n,-1),a=t.dC7(s,r);return t.W76(t.Smz(a,-1))}))}fi.constructors={};const Ni={meanSquaredError:bi,meanAbsoluteError:xi,meanAbsolutePercentageError:wi,meanSquaredLogarithmicError:function(e,n){return(0,t.lub)((()=>{const s=t.iUl(n,Ur(),Number.MAX_VALUE),r=t.cM7(t.IHx(1,s)),a=t.iUl(e,Ur(),Number.MAX_VALUE),i=t.cM7(t.IHx(1,a));return t.J69(Zr(t.luU(r,i)),-1)}))},squaredHinge:function(e,n){return(0,t.lub)((()=>{const s=t.gWQ(0,t.luU(1,t.dC7(e,n)));return t.J69(Zr(s),-1)}))},hinge:function(e,n){return(0,t.lub)((()=>{const s=t.gWQ(0,t.luU(1,t.dC7(e,n)));return t.J69(s,-1)}))},categoricalHinge:function(e,n){return(0,t.lub)((()=>{const s=t.Smz(t.dC7(e,n),-1),r=t.Fp7(t.dC7(t.luU(1,e),n),-1);return t.gWQ(0,t.IHx(1,t.luU(r,s)))}))},logcosh:function(e,n){return(0,t.lub)((()=>{const s=Math.log(2),r=t.luU(n,e),a=t.luU(t.IHx(r,t.Wvh(t.dC7(-2,r))),s);return t.J69(a,-1)}))},categoricalCrossentropy:vi,sparseCategoricalCrossentropy:ki,binaryCrossentropy:Ii,kullbackLeiblerDivergence:function(e,n){return(0,t.lub)((()=>{const s=t.iUl(e,Ur(),1),r=t.iUl(n,Ur(),1);return t.Smz(t.dC7(e,t.cM7(t.hiC(s,r))),-1)}))},poisson:function(e,n){return(0,t.lub)((()=>{const s=t.cM7(t.IHx(Ur(),n));return t.J69(t.luU(n,t.dC7(e,s)),-1)}))},cosineProximity:Si};function Ti(e){if("string"==typeof e){if(e in Ni)return Ni[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new js(t)}return e}function Ci(e,n){return(0,t.lub)((()=>{const s=t.dC7(.5,t.JpU(n)),r=Wr(t.pjt(n,s),e.dtype);return t.J69(t.DgJ(e,r),-1)}))}function $i(e,n){return(0,t.lub)((()=>Wr(t.DgJ(t.NqF(e,-1),t.NqF(n,-1)),"float32")))}function Ei(e,t){return Ii(e,t)}function Ai(e,n){return e.rank===n.rank&&(e=t.L9e(e,[e.rank-1])),(n=t.NqF(n,-1)).dtype!==e.dtype&&(n=t.pju(n,e.dtype)),t.pju(t.DgJ(e,n),"float32")}const Di=vi,Ri=ki,_i={binaryAccuracy:Ci,categoricalAccuracy:$i,precision:function(e,n){return(0,t.lub)((()=>{const s=function(e,n){return(0,t.lub)((()=>t.pju(t.Smz(t.HvI(t.DgJ(e,1),t.DgJ(n,1))),"float32")))}(e,n),r=function(e,n){return(0,t.lub)((()=>t.pju(t.Smz(t.HvI(t.DgJ(e,0),t.DgJ(n,1))),"float32")))}(e,n),a=t.IHx(s,r);return t.pju(t.arb(t.pjt(a,0),t.hiC(s,a),0),"float32")}))},categoricalCrossentropy:Di,sparseCategoricalCrossentropy:Ri,mse:bi,MSE:bi,mae:xi,MAE:xi,mape:wi,MAPE:wi,cosine:Si};function Fi(e){if("string"==typeof e&&e in _i)return _i[e];if("string"!=typeof e&&null!=e)return e;throw new js(`Unknown metric ${e}`)}function Oi(e){if(Zs(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Ni))if(Ni[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(_i))if(_i[n]===e){t=n;break}return void 0!==t?t:e.name}}function Mi(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Li(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Li(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Li(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Li(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Bi(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function zi(e,t,n){let s,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Bi([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function Ui(e,t,n,s){let r,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];i.push(`${n}[${s}][${r}]`)}const o=e.name,u=e.getClassName(),l=0===i.length?"":i[0];Bi([`${o} (${u})`,a,r,e.countParams().toString(),l],t,s);for(let e=1;e<i.length;++e)Bi(["","","","",i[e]],t,s)}function Wi(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Pi(e,t){if(null===e)return null;if("string"==typeof e)return sr(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Wi(t,r,s)?n.push(s):n.push(Pi(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=sr(n);t[e]=Pi(s,e)}}return t}}function Vi(e,t){if(null==e)return null;if("string"==typeof e)return nr(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Wi(t,r,s)?n.push(s):n.push(Vi(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[nr(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Vi(s,n):s}return t}}const Gi="4.1.0";class Hi extends za{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=xr(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],lr(this.inputs).length!==this.inputs.length)throw new js(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);lr(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;Zs(0===n,"input layer has >1 nodes"),Zs(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Wa))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,u)=>{null!=s&&null!=r&&null!=u||(s=e.sourceLayer,r=e.nodeIndex,u=e.tensorIndex);const l=s.inboundNodes[r];if(-1!==n.indexOf(l))throw new Hs(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(Hi.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const s=l.inputTensors[e],r=l.inboundLayers[e],a=l.nodeIndices[e],i=l.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const e of this.outputs)o(e,u,l);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],u=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(ur);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Hi&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(ur);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Hs(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Hs(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new La({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new js("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new js(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new js(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new js(`${e.length} of ${s} weights are not set: ${e}`)}_a(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Gi}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Vi(this.updatedConfig());return t?JSON.stringify(n):n}call(e,n){return(0,t.lub)((()=>{e=tr(e);const t=new Pa;for(let n=0;n<this.inputs.length;++n)t.add(this.inputs[n],e[n]);return Ha(this.outputs,t,n)}))}computeMask(e,n){return(0,t.lub)((()=>{let t;return e=tr(e),t=null==n?Qs(null,e.length):tr(n),this.runInternalGraph(e,t)[1]}))}computeOutputShape(e){const t=Ta(e);if(t.length!==this.inputLayers.length)throw new js(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(ur);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Ta(t.computeOutputShape(er(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];Zs(t in n),r.push(n[t])}return er(r)}runInternalGraph(e,t){null==t&&(t=Qs(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(ur);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),o=tr(t.call(e,l)),u=tr(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==l.mask&&(l.mask=i),o=tr(t.call(s,l)),u=tr(t.computeMask(s,i));if(t.activityRegularizer)throw new Xs("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=u[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){Zs(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Hi?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=Hi.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new js(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new js("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new js(`No such layer: ${e}`)}calculateLosses(){return(0,t.lub)((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Hi.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=Hi.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let u=t[Hi.nodeKey(r,a)];null==u&&(u=0),e.push([r.name,u,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=Hi.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=Hi.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],u=a[1],l=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=u)return void i(e,t);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&e.apply(er(n),s)}function u(e){const n=e.name,a=gi(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new js(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!cr(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];Zs(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];Zs(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new js("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){(0,t.lub)((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function ji(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Xi(e,n,s,r){if(null!=n||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=s){const n=(0,t.lub)((()=>{if(1===e.shape.length)return(0,t.d9v)(e);if(2===e.shape.length){if(e.shape[1]>1){const n=1;return(0,t.NqF)(e,n)}if(1===e.shape[1])return(0,t.XLQ)(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await n.data());(0,t.B90)(n);const a=[];return r.forEach((e=>{if(null==s[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(s[e])})),(0,t.RRF)(a,"float32")}return null}function qi(e,n){return(0,t.dC7)(e,n)}function Ki(e,n){let s,r;const a=n;s=a.xs,r=a.ys,t.D5U.assert(null!=s&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${n}`));const i=Yi("input",e.inputNames,s),o=Yi("output",e.outputNames,r),u=i[0].shape[0];t.D5U.assert(i.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),t.D5U.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let n=0;n<i.length;n++)t.D5U.assert(i[n].shape[0]===u,(()=>`Batch size mismatch: input ${e.inputNames[n]} has ${i[n].shape[0]}; expected  ${u} based on input ${e.inputNames[0]}.`));for(let n=0;n<o.length;n++)t.D5U.assert(o[n].shape[0]===u,(()=>`Batch size mismatch: output ${e.outputNames[n]} has ${o[n].shape[0]}; expected  ${u} based on input ${e.inputNames[0]}.`));return{xs:i,ys:o}}function Yi(e,n,s){if(s instanceof t.esB)return[s];if(Array.isArray(s))return t.D5U.assert(s.length===n.length,(()=>`Received an array of ${s.length} Tensors, but expected ${n.length} to match the ${e} keys ${n}.`)),s;{const t=[];for(const r of n){if(null==s[r])throw new js(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);t.push(s[r])}return t}}function Qi(e){return"function"==typeof e.iterator}function Zi(e){t.D5U.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Ji(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Vr(e,t,n-t))):Vr(e,t,n-t)}function eo(e,n){return t.lub((()=>null==e?null:Array.isArray(e)?e.map((e=>eo(e,n))):Qr(e,"int32"===n.dtype?n:t.pju(n,"int32"))))}function to(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function no(e){const n=[];e instanceof t.esB&&(e=[e]);for(let t=0;t<e.length;++t){const s=e[t];if(1===s.rank)n.push(Pr(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");n.push(s)}}return n}function so(e,n){if(null==e)return;const s=[];if(n instanceof t.esB)s.push(n.id);else if(Array.isArray(n))n.forEach((e=>s.push(e.id)));else if(null!=n)for(const e in n){const t=n[e];s.push(t.id)}const r=[];if(e instanceof t.esB)-1===s.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===s.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const n=e[t];-1===s.indexOf(n.id)&&r.push(n)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function ro(e){return Array.isArray(e)}function ao(e){return!function(e){return e instanceof t.esB}(e)&&!ro(e)}function io(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(ro(e)&&e.length>0)t=!0;else if(ao(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new js(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(ao(e)){a=[];for(const n of t){if(null==e[n])throw new js(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(ro(e)){if(e.length!==t.length)throw new js(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new js(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=no(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new js(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new js(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function oo(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new js(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new js(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new js(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],u=n[e][a];if(null!=u&&u!==o)throw new js(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class uo extends Hi{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new js("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Bi(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?zi(o[e],n,s):Ui(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;return t=null!=e.collectedTrainableWeights?Ea(e.collectedTrainableWeights):Ea(e.trainableWeights),t}(e),l=Ea(e.nonTrainableWeights);s(`Total params: ${u+l}`),s(`Trainable params: ${u}`),s(`Non-trainable params: ${l}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const n={Adagrad:()=>t.p_j.adagrad(.01),Adadelta:()=>t.p_j.adadelta(1,.95,Ur()),Adam:()=>t.p_j.adam(.001,.9,.999,Ur()),Adamax:()=>t.p_j.adamax(.002,.9,.999,Ur(),0),RMSProp:()=>t.p_j.rmsprop(.001,.9,0,Ur()),SGD:()=>t.p_j.sgd(.01)};if(n.adagrad=n.Adagrad,n.adadelta=n.Adadelta,n.adam=n.Adam,n.adamax=n.Adamax,n.rmsprop=n.RMSProp,n.sgd=n.SGD,e in n)return n[e]();throw new js(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof t.gaJ))throw new js("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let n=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new js(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const t=e.loss;n=t.map((e=>Ti(e)))}else{const t=Ti(e.loss);this.outputs.forEach((e=>{n.push(t)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new js(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const t of this.outputNames)null==e.loss[t]&&console.warn(`Output "${t}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${t} during training`),n.push(Ti(e.loss[t]))}this.lossFunctions=n,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const s=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Ar("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==s.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Ar("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===s.indexOf(e)&&(t=>{let n,s,r;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===Ii?-1!==["accuracy","acc"].indexOf(i)?s=Ci:-1!==["crossentropy","ce"].indexOf(i)&&(s=Ei):this.lossFunctions[e]===ki?-1!==["accuracy","acc"].indexOf(i)?s=Ai:-1!==["crossentropy","ce"].indexOf(i)&&(s=Ri):-1!==["accuracy","acc"].indexOf(i)?s=$i:-1!==["crossentropy","ce"].indexOf(i)&&(s=Di),-1!==["accuracy","acc"].indexOf(i)?a="acc":-1!==["crossentropy","ce"].indexOf(i)&&(a="ce"),r=s,n=""+a}else{const e=Fi(i);r=e,n=""+Oi(i)}let t;Ar(n,(()=>{t=r})),a(e,n,t)}})(r[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Zi(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return er(this.testLoop(i,a,s,n.verbose,n.steps))}finally{so(r[0],e),so(r[1],t)}}async evaluateDataset(e,n){return this.makeTestFunction(),async function(e,n,s){const r=null!=(s=s||{}).batches,a=e.testFunction;let i=[];if(s.verbose>0)throw new Xs("Verbose mode is not implemented yet.");t.D5U.assert(!r||s.batches>0&&Number.isInteger(s.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(s.batches)}`));const o="function"==typeof n.next?n:await n.iterator();let u=0,l=0;for(;!r||l<s.batches;){const n=await o.next();if(i=t.lub((()=>{if(n.value){const{xs:s,ys:r}=Ki(e,n.value),o=s.concat(r),c=t.lub((()=>a(o)));if(t.B90(o),0===l)for(let e=0;e<c.length;++e)i.push((0,t.iD$)(0));const h=o[0].shape[0];for(let e=0;e<c.length;++e){const n=c[e],s=i[e];i[e]=t.lub((()=>t.IHx(i[e],t.dC7(h,n)))),l>0&&t.B90(s)}t.B90(c),u+=h,++l}return i})),n.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${s.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<i.length;++e){const n=i[e];i[e]=t.hiC(i[e],u),t.B90(n)}return er(i)}(this,e,n)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new js(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new js(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,n){if(Array.isArray(n)&&0===n.length)throw new js("`outputs` is an empty Array, which is not allowed.");const s=Array.isArray(n),r=s?n:[n],a=this.retrieveSymbolicTensors(r),i=new Pa;if(e instanceof t.esB&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new js(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)i.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new js(`No value is provided for the model's input ${t.name}`);i.add(t,n)}const o=Ha(a,i);return s?o:o[0]}retrieveSymbolicTensors(e){const t=Qs(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new js(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,n=32,s=!1){return t.lub((()=>{const r=this.checkNumSamples(e);if(s)throw new Xs("Verbose predictLoop() is not implemented yet.");const a=to(r,n),i=this.outputs.map((e=>[]));for(let n=0;n<a.length;++n)t.lub((()=>{const t=a[n][0],s=a[n][1],r=Ji(e,t,s),i=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)i.push({key:this.inputs[e],value:r[e]});else i.push({key:this.inputs[0],value:r});const o=new Pa(i);return Ha(this.outputs,o)})).forEach(((e,t)=>i[t].push(e)));return er(i.map((e=>t.zoF(e,0))))}))}predict(e,t={}){const n=no(e);oo(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Zi(s),this.predictLoop(n,s)}finally{so(n,e)}}predictOnBatch(e){oo(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,n,s=!0,r){if(null==this.optimizer_)throw new Hs("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===ki?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,n,s){const r=lr(e.map((e=>e.shape[0])));r.sort();const a=lr(n.map((e=>e.shape[0])));if(a.sort(),r.length>1)throw new js(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new js(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((e=>e.shape)))}`);if(r.length>0&&a.length>0&&!t.D5U.arraysEqual(r,a))throw new js(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=io(e,this.feedInputNames,this.feedInputShapes,!1,"input"),n=io(n,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[bi,Ii,vi];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===vi&&1===a.shape[a.shape.length-1])throw new js(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new js(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(n,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new js(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,n]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=s){const e=ji(s,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await Xi(o[t],null,e[t]))}return[i,o,u]}testLoop(e,n,s,r=0,a){return t.lub((()=>{const i=this.checkNumSamples(n,s,a,"steps"),o=[];if(r>0)throw new Xs("Verbose mode is not implemented yet.");if(null!=a)throw new Xs("steps mode in testLoop() is not implemented yet");{const r=to(i,s),a=(0,t.RRF)(Br(0,i));for(let s=0;s<r.length;++s){const i=r[s][0],u=r[s][1],l=Vr(a,i,u-i),c=eo(n,l),h=e(c);if(0===s)for(let e=0;e<h.length;++e)o.push((0,t.iD$)(0));for(let e=0;e<h.length;++e){const n=h[e];o[e]=t.IHx(o[e],t.dC7(u-i,n))}}for(let e=0;e<o.length;++e)o[e]=t.hiC(o[e],i)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;Js(e,s)>1&&(r+=`_${Js(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const n=[],s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:s[t]});const o=new Pa(e),u=Ha(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let s=(0,this.lossFunctions[e])(r[e],u[e]);null!=a[e]&&(s=qi(s,a[e]));const i=t.J69(s);n.push(i),l=0===e?s:t.IHx(l,s)}for(let e=0;e<this.metricsTensors.length;++e){let s;if(this.outputs.length>1&&e<this.outputs.length)s=n[e];else{const n=this.metricsTensors[e][0],a=this.metricsTensors[e][1];s=t.J69(n(r[a],u[a]))}t.CnY(s),i.push(s)}return l=t.J69(l),this.calculateLosses().forEach((e=>{l=t.IHx(l,e)})),l}),!0,o)].concat(i)}}makeTestFunction(){this.testFunction=e=>t.lub((()=>{const n=[];let s;const r=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:r[e]});const o=new Pa(i),u=Ha(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],i=t.J69(r(a[e],u[e]));s=0===e?i:t.IHx(s,i),n.push(s)}for(let e=0;e<this.metricsTensors.length;++e){const s=this.metricsTensors[e][0],r=this.metricsTensors[e][1],i=t.J69(s(a[r],u[r]));n.push(i)}return n}))}async fit(e,n,s={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,u,l,c,h,p;this.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;Zi(d);const f=!1,m=await this.standardizeUserData(e,n,s.sampleWeight,s.classWeight,f,d);r=m[0],a=m[1],p=m[2];let g,y=!1;if(null!=s.validationData&&s.validationData.length>0){if(y=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Xs("validationData including sample weights is not supported yet."):new js(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);u=s.validationData[0],l=s.validationData[1];const e=!0,t=await this.standardizeUserData(u,l,null,null,e,d);c=t[0],h=t[1],g=c.concat(h)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){y=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];c=Ji(r,e,t),i=r,r=Ji(r,0,e),h=Ji(a,e,t),o=a,a=Ji(a,0,e),g=c.concat(h)}else null!=s.validationSteps&&(y=!0);const b=r.concat(a).concat(p);this.checkTrainableWeightsConsistency();const x=this.makeTrainFunction(),w=this.getDedupedMetricsNames();let v,k;y?(this.makeTestFunction(),v=this.testFunction,k=w.slice().concat(w.map((e=>"val_"+e)))):(v=null,g=[],k=w.slice());const I=di(s.callbacks,s.yieldEvery);return await this.fitLoop(x,b,w,d,s.epochs,s.verbose,I,v,g,s.shuffle,k,s.initialEpoch,null,null)}finally{this.isTraining=!1,so(r,e),so(a,n),so(i,e),so(o,n),so(c,u),so(h,l),null!=p&&t.B90(p)}}async fitLoop(e,n,s,r,a,i,o,u,l,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==d))throw new js("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=this.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=Br(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=mi(o,i,a,p,g,d,r,m,h);b.setModel(this),this.history=x,await b.onTrainBegin(),this.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new Xs("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new Xs("batch shuffling is not implemneted yet");c&&t.D5U.shuffle(y);const i=(0,t.RRF)(y),o=to(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),t.lub((()=>{const p=o[c][0],d=o[c][1],f=Vr(i,p,d-p);h.batch=c,h.size=d-p;const g=eo(n,f),y=e(g);for(let e=0;e<s.length;++e){const n=s[e],r=y[e];h[n]=r,t.CnY(r)}if(c===o.length-1&&m){const e=this.testLoop(u,l,r);for(let n=0;n<s.length;++n){const r=s[n],i=e[n];t.CnY(i),a["val_"+r]=i}}})),await b.onBatchEnd(c,h),ii(h),this.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),this.stopTraining_)break}return await b.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,n){return async function(e,n,s){const r=null!=s.batchesPerEpoch;if(t.D5U.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),t.D5U.assert(null!=s,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),t.D5U.assert(null!=s.epochs&&s.epochs>0&&Number.isInteger(s.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${s.epochs}`)),t.D5U.assert(!r||s.batchesPerEpoch>0&&Number.isInteger(s.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${s.batchesPerEpoch}`)),t.D5U.assert(null==s.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=s.validationData;let i,o;if(a)if(Qi(s.validationData))t.D5U.assert(null==s.validationBatches||s.validationBatches>0&&Number.isInteger(s.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${s.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Xs("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(s.validationData);i=e.xs,o=e.ys}const u=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let c;c=a?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const h=di(s.callbacks,s.yieldEvery),p=null==s.verbose?1:s.verbose,{callbackList:d,history:f}=mi(h,p,s.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(n,s),null,a,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==s.initialEpoch?0:s.initialEpoch,g=await n.iterator();for(;m<s.epochs;){const c={};await d.onEpochBegin(m);let h=0,p=0;for(r||(g=await n.iterator());!r||h<s.batchesPerEpoch;){const n=await g.next();if(r&&n.done){console.warn(`You provided \`batchesPerEpoch\` as ${s.batchesPerEpoch}, but your dataset iterator ran out of data after ${h} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+s.batchesPerEpoch*s.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=n.value){const{xs:r,ys:a}=Ki(e,n.value),i={};i.batch=p,i.size=r[0].shape[0],await d.onBatchBegin(p,i);const o=[];if(null!=s.classWeight){const t=ji(s.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await Xi(a[e],null,t[e]))}const c=r.concat(a).concat(o),f=u(c);t.B90(c);for(let e=0;e<l.length;++e){const n=l[e],s=f[e];i[n]=s,t.CnY(s)}await d.onBatchEnd(p,i),ii(i),p++,h++}if(r?h>=s.batchesPerEpoch:n.done){if(a){let t;t=Qi(s.validationData)?tr(await e.evaluateDataset(s.validationData,{batches:s.validationBatches})):tr(e.evaluate(i,o,{batchSize:null==s.validationBatchSize?32:s.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)c[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,c),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,n)}async trainOnBatch(e,n){const s=await this.standardizeUserData(e,n),r=s[0],a=s[1],i=this.makeTrainFunction()(r.concat(a)),o=[];for(const e of i){const t=await e.data();o.push(t[0])}return t.B90(i),so(s[0],e),so(s[1],n),er(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const n=t.sq6().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=n-t.sq6().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=nr(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>nr(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=nr(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[nr(Oi(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>nr(Oi(e))));{const e={};for(const t in this.metrics)e[t]=nr(Oi(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=gi(Pi(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=sr(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>sr(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=sr(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>sr(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=sr(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,n){if("string"==typeof e){const n=t.io.getSaveHandlers(e);if(0===n.length)throw new js(`Cannot find any save handlers for URL '${e}'`);if(n.length>1)throw new js(`Found more than one (${n.length}) save handlers for URL '${e}'`);e=n[0]}if(null==e.save)throw new js("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await t.io.encodeWeights(this.getNamedWeights(n)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Gi}`,convertedBy:null};if(null!=n&&n.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:n,specs:a}=await t.io.encodeWeights(await this.optimizer.getWeights(),e);s.specs.push(...a),s.data=t.io.concatenateArrayBuffers([s.data,n])}if(null!=this.userDefinedMetadata){const e=!0;Mi(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=s.data,r.weightSpecs=s.specs,e.save(r)}setUserDefinedMetadata(e){Mi(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}uo.className="Model",t.m7h.registerClass(uo);class lo extends uo{}lo.className="Functional",t.m7h.registerClass(lo);class co extends uo{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:xr("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new js(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof co||e instanceof uo;let n;if(t){if(n=e,1!==n.outputs.length)throw new js("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new js("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new js("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new js("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Wa({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new js(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new js("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Ua(this.outputs[0])}this.inboundNodes=[],new La({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Qs(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if($a(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new uo({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Hs("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Hs("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Hs("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Hs("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,n,s={},r=!1){let a,i={};if(n instanceof Array){if(null==n[0].className||"Merge"===n[0].className)throw new js("Legacy serialization format not supported yet.");a=n}else t.D5U.assert(null!=n.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=n.layers,delete n.layers,i=n;const o=new e(i);if(!(o instanceof co))throw new Xs(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of a){const t=gi(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new js("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new js("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}co.className="Sequential",t.m7h.registerClass(co);class ho extends t.m7h.Serializable{getConfig(){return{}}}class po extends ho{apply(e,n=1){return function(e,n=1){if(1!==n)throw new Xs(`Support for alpha values other than 1 (${n}) is not implemented yet.`);return t.pyx(e)}(e,n)}}po.className="elu",t.m7h.registerClass(po);class fo extends ho{apply(e){return t.U8D(e)}}fo.className="selu",t.m7h.registerClass(fo);class mo extends ho{apply(e){return t.UYe(e)}}mo.className="relu",t.m7h.registerClass(mo);class go extends ho{apply(e){return(0,t.lub)((()=>t.LTh(6,t.UYe(e))))}}go.className="relu6",t.m7h.registerClass(go);class yo extends ho{apply(e){return e}}yo.className="linear",t.m7h.registerClass(yo);class bo extends ho{apply(e){return t.XD2(e)}}bo.className="sigmoid",t.m7h.registerClass(bo);class xo extends ho{apply(e){return function(e){return(0,t.lub)((()=>{const n=t.IHx(.5,t.dC7(.2,e));return t.iUl(n,0,1)}))}(e)}}xo.className="hardSigmoid",t.m7h.registerClass(xo);class wo extends ho{apply(e){return t.Wvh(e)}}wo.className="softplus",t.m7h.registerClass(wo);class vo extends ho{apply(e){return function(e){return(0,t.lub)((()=>t.hiC(e,t.IHx(t.WnP(e),1))))}(e)}}vo.className="softsign",t.m7h.registerClass(vo);class ko extends ho{apply(e){return t.AEp(e)}}ko.className="tanh",t.m7h.registerClass(ko);class Io extends ho{apply(e,n=-1){return t.XAC(e,n)}}Io.className="softmax",t.m7h.registerClass(Io);class So extends ho{apply(e,n=-1){return t.CmS(e,n)}}So.className="logSoftmax",t.m7h.registerClass(So);class No extends ho{apply(e,n=1){return(0,t.lub)((()=>t.dC7(t.XD2(t.dC7(e,n)),e)))}}No.className="swish",t.m7h.registerClass(No);class To extends ho{apply(e){return(0,t.lub)((()=>t.dC7(e,t.AEp(t.Wvh(e)))))}}function Co(e){return e.getClassName()}function $o(e,n={}){return or(e,t.m7h.SerializationMap.getMap().classNameMap,n,"activation")}function Eo(e){if(null==e){return $o({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},$o(t)}return e instanceof ho?e:$o(e)}To.className="mish",t.m7h.registerClass(To);class Ao extends t.m7h.Serializable{}class Do extends Ao{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return(0,t.lub)((()=>{let n=(0,t.lls)([1]);return this.hasL1&&(n=(0,t.IHx)(n,(0,t.Smz)(t.dC7(this.l1,(0,t.WnP)(e))))),this.hasL2&&(n=(0,t.IHx)(n,(0,t.Smz)(t.dC7(this.l2,Zr(e))))),t.XLQ(n,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Do.className="L1L2",t.m7h.registerClass(Do);const Ro={l1l2:"L1L2"};function _o(e){return ar(e)}function Fo(e,n={}){return or(e,t.m7h.SerializationMap.getMap().classNameMap,n,"regularizer")}function Oo(e){return null==e?null:"string"==typeof e?Fo({className:e in Ro?Ro[e]:e,config:{}}):e instanceof Ao?e:Fo(e)}class Mo extends za{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,n){e=Ca(e);let s=(0,t.UYe)(e);return null!=this.maxValue&&(s=(0,t.iUl)(s,0,this.maxValue)),s}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Mo.className="ReLU",t.m7h.registerClass(Mo);class Lo extends za{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,n){const s=Ca(e);return(0,t.hi7)(s,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Lo.className="LeakyReLU",t.m7h.registerClass(Lo);class Bo extends za{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Sa(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Oo(e.alphaRegularizer),this.alphaConstraint=ri(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new js(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=$a(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Fa({ndim:e.length,axes:n})],this.built=!0}call(e,n){return e=Ca(e),(0,t.AL3)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Ia(this.alphaInitializer),alphaRegularizer:_o(this.alphaRegularizer),alphaConstraint:ni(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Bo.className="PReLU",t.m7h.registerClass(Bo);class zo extends za{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Xs(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,n){const s=Ca(e);return(0,t.pyx)(s)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}zo.className="ELU",t.m7h.registerClass(zo);class Uo extends za{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,n){const s=Ca(e);return(0,t.dC7)(s,(0,t.pju)((0,t.pjt)(s,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Uo.className="ThresholdedReLU",t.m7h.registerClass(Uo);class Wo extends za{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Io).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Ca(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Po(e,t,n){if("number"==typeof e)return Qs(e,t);if(e.length!==t)throw new js(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new js(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function Vo(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Go(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Lr([n-t,0]);else{if("same"!==s)throw new js(`Unsupport padding mode: ${s}.`);e*=t}return e}function Ho(e,n){return(0,t.lub)((()=>(Tr(n),"channelsFirst"===n?t.p4s(e,[0,2,3,1]):e)))}function jo(e,n){return(0,t.lub)((()=>(Tr(n),"channelsFirst"===n?t.p4s(e,[0,2,3,4,1]):e)))}function Xo(e,n,s,r=[1,1],a="valid",i,o,u=null){return(0,t.lub)((()=>{if(null==i&&(i="channelsLast"),Tr(i),3!==e.rank&&4!==e.rank)throw new js(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==n.rank&&4!==n.rank)throw new js(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Ho(e,i);if("causal"===a)throw new Xs("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=t.imm.conv2d({x:l,filter:n,strides:r,pad:"same"===a?"same":"valid",dilations:o,dataFormat:"NHWC",bias:s,activation:u}),"channelsFirst"===i&&(l=t.p4s(l,[0,3,1,2])),l}))}Wo.className="Softmax",t.m7h.registerClass(Wo);class qo extends za{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",qo.verifyArgs(t),this.rank=e,dr(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Xs(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Po(t.kernelSize,e,"kernelSize"),this.strides=Po(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Cr(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Tr(this.dataFormat),this.activation=Eo(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Sa(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=ri(t.biasConstraint),this.biasRegularizer=Oo(t.biasRegularizer),this.activityRegularizer=Oo(t.activityRegularizer),this.dilationRate=Po(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new js(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new js(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new js(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Zs("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!pr(e.kernelSize,"number",1,3))throw new js(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Co(this.activation),useBias:this.useBias,biasInitializer:Ia(this.biasInitializer),biasRegularizer:_o(this.biasRegularizer),activityRegularizer:_o(this.activityRegularizer),biasConstraint:ni(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Ko extends qo{constructor(e,t){super(e,t),this.kernel=null,Ko.verifyArgs(t),this.filters=t.filters,dr(this.filters,"filters"),this.kernelInitializer=Sa(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=ri(t.kernelConstraint),this.kernelRegularizer=Oo(t.kernelRegularizer)}build(e){e=$a(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new js(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,n){return(0,t.lub)((()=>{let n;e=Ca(e);const s=null==this.bias?null:this.bias.read(),r=mr(this.activation.getClassName());if(null!=r&&2===this.rank)n=Xo(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)n=function(e,n,s,r=1,a="valid",i,o=1){return(0,t.lub)((()=>{if(null==i&&(i="channelsLast"),Tr(i),3!==e.shape.length)throw new js(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==n.shape.length)throw new js(`The kernel for a conv1dWithBias operation should be 3, but is ${n.shape.length} instead`);if(null!=s&&1!==s.shape.length)throw new js(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===i&&(e=t.p4s(e,[0,2,1])),"causal"===a)throw new Xs("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let u=t.PAt(e,n,r,"same"===a?"same":"valid","NWC",o);return null!=s&&(u=ea(u,s)),u}))}(e,this.kernel.read(),s,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)n=Xo(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Xs("convolutions greater than 3D are not implemented yet.");n=function(e,n,s,r=[1,1,1],a="valid",i,o){return(0,t.lub)((()=>{if(null==i&&(i="channelsLast"),Tr(i),4!==e.rank&&5!==e.rank)throw new js(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==n.rank&&5!==n.rank)throw new js(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let u=jo(e,i);if("causal"===a)throw new Xs("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return u=t.pdZ(u,n,r,"same"===a?"same":"valid","NDHWC",o),null!=s&&(u=ea(u,s)),"channelsFirst"===i&&(u=t.p4s(u,[0,4,1,2,3])),u}))}(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(n=this.activation.apply(n))}return n}))}computeOutputShape(e){e=$a(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Vo(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Ia(this.kernelInitializer),kernelRegularizer:_o(this.kernelRegularizer),kernelConstraint:ni(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new js(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Yo extends Ko{constructor(e){super(2,e),Yo.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!pr(e.kernelSize,"number",1,2))throw new js(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Yo.className="Conv2D",t.m7h.registerClass(Yo);class Qo extends Ko{constructor(e){super(3,e),Qo.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new js(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Qo.className="Conv3D",t.m7h.registerClass(Qo);class Zo extends Yo{constructor(e){if(super(e),this.inputSpec=[new Fa({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new js(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=$a(e)).length)throw new js("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new js("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Fa({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,n){return t.lub((()=>{let n=Ca(e);if(4!==n.shape.length)throw new js(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);const s=n.shape,r=s[0];let a,i;"channelsFirst"===this.dataFormat?(a=2,i=3):(a=1,i=2);const o=s[a],u=s[i],l=this.kernelSize[0],c=this.kernelSize[1],h=this.strides[0],p=this.strides[1],d=[r,Go(o,h,l,this.padding),Go(u,p,c,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(n=t.p4s(n,[0,2,3,1]));let f=t.bc(n,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(f=t.p4s(f,[0,3,1,2])),null!=this.bias&&(f=ea(f,this.bias.read(),this.dataFormat)),null!=this.activation&&(f=this.activation.apply(f)),f}))}computeOutputShape(e){const t=(e=$a(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[s]=Go(t[s],o,a,this.padding),t[r]=Go(t[r],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Zo.className="Conv2DTranspose",t.m7h.registerClass(Zo);class Jo extends Qo{constructor(e){if(super(e),this.inputSpec=[new Fa({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new js(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=$a(e)).length)throw new js("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new js("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Fa({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,n){return t.lub((()=>{let n=Ca(e);if(5!==n.shape.length)throw new js(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);const s=n.shape,r=s[0];let a,i,o;"channelsFirst"===this.dataFormat?(o=2,a=3,i=4):(o=1,a=2,i=3);const u=s[o],l=s[a],c=s[i],h=this.kernelSize[0],p=this.kernelSize[1],d=this.kernelSize[2],f=this.strides[0],m=this.strides[1],g=this.strides[2],y=[r,Go(u,f,h,this.padding),Go(l,m,p,this.padding),Go(c,g,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(n=t.p4s(n,[0,2,3,4,1]));let b=t.$QV(n,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=t.p4s(b,[0,4,1,2,3])),null!==this.bias&&(b=ea(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b}))}computeOutputShape(e){const t=(e=$a(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Go(t[s],l,i,this.padding),t[r]=Go(t[r],c,o,this.padding),t[a]=Go(t[a],h,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Jo.className="Conv3DTranspose",t.m7h.registerClass(Jo);class eu extends Ko{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new js("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new js("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new js(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Sa(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Oo(t.depthwiseRegularizer),this.depthwiseConstraint=ri(t.depthwiseConstraint),this.pointwiseInitializer=Sa(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Oo(t.pointwiseRegularizer),this.pointwiseConstraint=ri(t.pointwiseConstraint)}build(e){if((e=$a(e)).length<this.rank+2)throw new js(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new js(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Fa({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,n){return(0,t.lub)((()=>{let n;if(e=Ca(e),1===this.rank)throw new Xs("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=t.p4s(e,[0,2,3,1])),n=t.U_I(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(n=ea(n,this.bias.read(),this.dataFormat)),null!=this.activation&&(n=this.activation.apply(n)),"channelsFirst"===this.dataFormat&&(n=t.p4s(n,[0,3,1,2])),n}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Ia(this.depthwiseInitializer),e.pointwiseInitializer=Ia(this.pointwiseInitializer),e.depthwiseRegularizer=_o(this.depthwiseRegularizer),e.pointwiseRegularizer=_o(this.pointwiseRegularizer),e.depthwiseConstraint=ni(this.depthwiseConstraint),e.pointwiseConstraint=ni(this.pointwiseConstraint),e}}eu.className="SeparableConv";class tu extends eu{constructor(e){super(2,e)}}tu.className="SeparableConv2D",t.m7h.registerClass(tu);class nu extends Ko{constructor(e){super(1,e),nu.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!pr(e.kernelSize,"number",1,1))throw new js(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}nu.className="Conv1D",t.m7h.registerClass(nu);class su extends za{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,n){return(0,t.lub)((()=>{if(e=Ca(e),"channelsLast"===this.dataFormat){const t=Hr(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Hr(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Hr(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Hr(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}su.className="Cropping2D",t.m7h.registerClass(su);class ru extends za{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Tr(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,hr(vr,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,n){return t.lub((()=>{let n=Ca(e);const s=n.shape;if("channelsFirst"===this.dataFormat){n=t.p4s(n,[0,2,3,1]);const e=this.size[0]*s[2],r=this.size[1]*s[3],a="nearest"===this.interpolation?t.BHj.resizeNearestNeighbor(n,[e,r]):t.BHj.resizeBilinear(n,[e,r]);return t.p4s(a,[0,3,1,2])}{const e=this.size[0]*s[1],r=this.size[1]*s[2];return"nearest"===this.interpolation?t.BHj.resizeNearestNeighbor(n,[e,r]):t.BHj.resizeBilinear(n,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}ru.className="UpSampling2D",t.m7h.registerClass(ru);class au extends qo{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Sa(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=ri(e.depthwiseConstraint),this.depthwiseRegularizer=Oo(e.depthwiseRegularizer)}build(e){if((e=$a(e)).length<4)throw new js(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new js(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,n){return(0,t.lub)((()=>{let n=function(e,n,s=[1,1],r="valid",a,i){return(0,t.lub)((()=>{null==a&&(a="channelsLast"),Tr(a);let o=Ho(e,a);if(4!==e.rank)throw new js(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==n.rank)throw new js(`depthwiseKernel is required to be 4-D, but is instead ${n.rank}-D`);return o=t.B10(o,n,s,"same"===r?"same":"valid","NHWC",i),"channelsFirst"===a&&(o=t.p4s(o,[0,3,1,2])),o}))}(e=Ca(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(n=ea(n,this.bias.read(),this.dataFormat)),null!=this.activation&&(n=this.activation.apply(n)),n}))}computeOutputShape(e){e=$a(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Vo(t,this.kernelSize[0],this.padding,this.strides[0]),a=Vo(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Ia(this.depthwiseInitializer),e.depthwiseRegularizer=_o(this.depthwiseRegularizer),e.depthwiseConstraint=ni(this.depthwiseRegularizer),e}}function iu(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new js("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function ou(e,n,s,r=!1,a,i,o=!1,u=!1){return t.lub((()=>{const l=n.shape.length;if(l<3)throw new js(`Input should be at least 3D, but is ${l}D.`);const c=[1,0].concat(Br(2,l));if(n=t.p4s(n,c),null!=i)throw new Xs("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=t.pju(t.pju(a,"bool"),"float32")).rank===l-1&&(a=t.dt4(a,-1)),a=t.p4s(a,c)),r&&(n=t.GYS(n,0),null!=a&&(a=t.GYS(a,0)));const h=[];let p,d=s;const f=n.shape[0],m=t.HHK(n);let g,y;null!=a&&(g=t.HHK(a));for(let n=0;n<f;++n){const s=m[n],r=t.lub((()=>e(s,d)));if(null==a)p=r[0],d=r[1];else{const e=t.lub((()=>{const e=g[n],s=t.luU(t.JpU(e),e);return{output:t.IHx(t.dC7(r[0],e),t.dC7(d[0],s)),newStates:d.map(((n,a)=>t.IHx(t.dC7(r[1][a],e),t.dC7(n,s))))}}));p=e.output,d=e.newStates}u&&h.push(p)}if(u){const e=1;y=t.knu(h,e)}return[p,y,d]}))}au.className="DepthwiseConv2D",t.m7h.registerClass(au);class uu extends za{constructor(e){let t;if(super(e),null==e.cell)throw new js("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new gu({cells:e.cell}):e.cell,null==t.stateSize)throw new js("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Fa({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Br(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Na(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,n){return t.lub((()=>{Array.isArray(n)&&(n=n[0]);const e=this.returnSequences?n:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Xs("Constants support is not implemented in RNN yet.");Na(e)&&(e=e[0]);const n=this.stateful?e[0]:null,s=e.slice(2);this.inputSpec[0]=new Fa({shape:[n,null,...s]});const r=[e[0]].concat(e.slice(2));let a;if(this.cell.build(r),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!t.D5U.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),a))throw new js(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map((e=>new Fa({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,n=!1){(0,t.lub)((()=>{if(!this.stateful)throw new Gs("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape[0];if(null==s)throw new js("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>t.lls([s,e]))):this.states_=[t.lls([s,this.cell.stateSize])];else if(null==e)t.B90(this.states_),null!=this.keptStates&&(t.B90(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>t.lls([s,e]))):this.states_[0]=t.lls([s,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new js(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===n?this.keptStates.push(this.states_.slice()):t.B90(this.states_);for(let n=0;n<this.states_.length;++n){const r=e[n],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,i=[s,a];if(!t.D5U.arraysEqual(r.shape,i))throw new js(`State ${n} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${r.shape}`);this.states_[n]=r}}this.states_=this.states_.map((e=>t.CnY(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=iu(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Fa({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof Oa){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,n){return(0,t.lub)((()=>{const t=null==n?null:n.mask,s=null==n?null:n.training;let r=null==n?null:n.initialState;e=Ca(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new js(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=ou(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,t,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(e){return(0,t.lub)((()=>{let n=t.lls(e.shape);return n=t.Smz(n,[1,2]),n=Pr(n),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?qr(n,[1,e]):n)):this.cell.stateSize>1?[qr(n,[1,this.cell.stateSize])]:[n]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===uu.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=gi(t.cell,n);return new e(Object.assign(t,{cell:s}))}}uu.className="RNN",t.m7h.registerClass(uu);class lu extends za{}class cu extends lu{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,dr(this.units,"units"),this.activation=Eo(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Sa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Sa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Sa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Oo(e.kernelRegularizer),this.recurrentRegularizer=Oo(e.recurrentRegularizer),this.biasRegularizer=Oo(e.biasRegularizer),this.kernelConstraint=ri(e.kernelConstraint),this.recurrentConstraint=ri(e.recurrentConstraint),this.biasConstraint=ri(e.biasConstraint),this.dropout=Mr([1,Lr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Mr([1,Lr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=$a(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,n){return(0,t.lub)((()=>{if(2!==e.length)throw new js(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let s=e[1];e=e[0];const r=null!=n.training&&n.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=yu({ones:()=>t.JpU(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=yu({ones:()=>t.JpU(s),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=this.recurrentDropoutMask;a=Yr(null!=i?t.dC7(e,i):e,this.kernel.read()),null!=this.bias&&(a=ea(a,this.bias.read())),null!=o&&(s=t.dC7(s,o));let u=t.IHx(a,Yr(s,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Co(this.activation),useBias:this.useBias,kernelInitializer:Ia(this.kernelInitializer),recurrentInitializer:Ia(this.recurrentInitializer),biasInitializer:Ia(this.biasInitializer),kernelRegularizer:_o(this.kernelRegularizer),recurrentRegularizer:_o(this.recurrentRegularizer),biasRegularizer:_o(this.biasRegularizer),activityRegularizer:_o(this.activityRegularizer),kernelConstraint:ni(this.kernelConstraint),recurrentConstraint:ni(this.recurrentConstraint),biasConstraint:ni(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}cu.className="SimpleRNNCell",t.m7h.registerClass(cu);class hu extends uu{constructor(e){e.cell=new cu(e),super(e)}call(e,n){return(0,t.lub)((()=>{null!=this.cell.dropoutMask&&(t.B90(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(t.B90(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==n?null:n.mask,r=null==n?null:n.training,a=null==n?null:n.initialState;return super.call(e,{mask:s,training:r,initialState:a})}))}static fromConfig(e,t){return new e(t)}}hu.className="SimpleRNN",t.m7h.registerClass(hu);class pu extends lu{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new js("GRUCell does not support reset_after parameter set to true.");this.units=e.units,dr(this.units,"units"),this.activation=Eo(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Eo(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Sa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Sa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Sa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Oo(e.kernelRegularizer),this.recurrentRegularizer=Oo(e.recurrentRegularizer),this.biasRegularizer=Oo(e.biasRegularizer),this.kernelConstraint=ri(e.kernelConstraint),this.recurrentConstraint=ri(e.recurrentConstraint),this.biasConstraint=ri(e.biasConstraint),this.dropout=Mr([1,Lr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Mr([1,Lr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=$a(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,n){return(0,t.lub)((()=>{if(2!==e.length)throw new js(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const s=null!=n.training&&n.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=yu({ones:()=>t.JpU(e),rate:this.dropout,training:s,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=yu({ones:()=>t.JpU(r),rate:this.recurrentDropout,training:s,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l;0<this.dropout&&this.dropout<1&&(e=t.dC7(e,a[0]));let c=Yr(e,this.kernel.read());this.useBias&&(c=ea(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=t.dC7(r,i[0]));const h=this.recurrentKernel.read(),[p,d]=t.Vl2(h,[2*this.units,this.units],h.rank-1),f=Yr(r,p),[m,g,y]=t.Vl2(c,3,c.rank-1),[b,x]=t.Vl2(f,2,f.rank-1);o=this.recurrentActivation.apply(t.IHx(m,b)),u=this.recurrentActivation.apply(t.IHx(g,x));const w=Yr(t.dC7(u,r),d);l=this.activation.apply(t.IHx(y,w));const v=t.IHx(t.dC7(o,r),t.dC7(t.IHx(1,t.W76(o)),l));return[v,v]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Co(this.activation),recurrentActivation:Co(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ia(this.kernelInitializer),recurrentInitializer:Ia(this.recurrentInitializer),biasInitializer:Ia(this.biasInitializer),kernelRegularizer:_o(this.kernelRegularizer),recurrentRegularizer:_o(this.recurrentRegularizer),biasRegularizer:_o(this.biasRegularizer),activityRegularizer:_o(this.activityRegularizer),kernelConstraint:ni(this.kernelConstraint),recurrentConstraint:ni(this.recurrentConstraint),biasConstraint:ni(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}pu.className="GRUCell",t.m7h.registerClass(pu);class du extends uu{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new pu(e),super(e)}call(e,n){return(0,t.lub)((()=>{null!=this.cell.dropoutMask&&(t.B90(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(t.B90(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==n?null:n.mask,r=null==n?null:n.training,a=null==n?null:n.initialState;return super.call(e,{mask:s,training:r,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}du.className="GRU",t.m7h.registerClass(du);class fu extends lu{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,dr(this.units,"units"),this.activation=Eo(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Eo(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Sa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Sa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Sa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Oo(e.kernelRegularizer),this.recurrentRegularizer=Oo(e.recurrentRegularizer),this.biasRegularizer=Oo(e.biasRegularizer),this.kernelConstraint=ri(e.kernelConstraint),this.recurrentConstraint=ri(e.recurrentConstraint),this.biasConstraint=ri(e.biasConstraint),this.dropout=Mr([1,Lr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Mr([1,Lr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=$a(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends aa{apply(t,s){const r=e.apply([n]),a=(new oa).apply([n]),i=e.apply([2*n]);return Xr(Xr(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,n){return(0,t.lub)((()=>{const s=null!=n.training&&n.training;if(3!==e.length)throw new js(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=yu({ones:()=>t.JpU(e),rate:this.dropout,training:s,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=yu({ones:()=>t.JpU(r),rate:this.recurrentDropout,training:s,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=this.recurrentDropoutMask;let u,l,c,h;0<this.dropout&&this.dropout<1&&(e=t.dC7(e,i[0]));let p=Yr(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=t.dC7(r,o[0])),p=t.IHx(p,Yr(r,this.recurrentKernel.read())),this.useBias&&(p=ea(p,this.bias.read()));const[d,f,m,g]=t.Vl2(p,4,p.rank-1);u=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(f),c=t.IHx(t.dC7(l,a),t.dC7(u,this.activation.apply(m))),h=this.recurrentActivation.apply(g);const y=t.dC7(h,this.activation.apply(c));return[y,y,c]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Co(this.activation),recurrentActivation:Co(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ia(this.kernelInitializer),recurrentInitializer:Ia(this.recurrentInitializer),biasInitializer:Ia(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:_o(this.kernelRegularizer),recurrentRegularizer:_o(this.recurrentRegularizer),biasRegularizer:_o(this.biasRegularizer),activityRegularizer:_o(this.activityRegularizer),kernelConstraint:ni(this.kernelConstraint),recurrentConstraint:ni(this.recurrentConstraint),biasConstraint:ni(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}fu.className="LSTMCell",t.m7h.registerClass(fu);class mu extends uu{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new fu(e),super(e)}call(e,n){return(0,t.lub)((()=>{null!=this.cell.dropoutMask&&(t.B90(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(t.B90(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==n?null:n.mask,r=null==n?null:n.training,a=null==n?null:n.initialState;return super.call(e,{mask:s,training:r,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}mu.className="LSTM",t.m7h.registerClass(mu);class gu extends lu{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,n){return(0,t.lub)((()=>{let t=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(t.splice(0,e.stateSize.length)):s.push(t.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];t=s[i],a=0===i?[e[0]].concat(t):[a[0]].concat(t),a=o.call(a,n),r.push(a.slice(1))}t=[];for(const e of r.slice().reverse())t.push(...e);return[a[0]].concat(t)}))}build(e){let t;Na(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{Ar(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(gi(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Ra(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}_a(t)}}function yu(e){const{ones:n,rate:s,training:r=!1,count:a=1,dropoutFunc:i}=e,o=()=>null!=i?i(n(),s):ta(n(),s),u=()=>na(o,n,r);return!a||a<=1?t.CnY(u().clone()):Array(a).fill(void 0).map(u).map((e=>t.CnY(e.clone())))}gu.className="StackedRNNCells",t.m7h.registerClass(gu);class bu extends uu{constructor(e){if(e.unroll)throw new Xs("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Xs("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Fa({ndim:5})]}call(e,n){return t.lub((()=>{if(null!=this.cell.dropoutMask&&(t.B90(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(t.B90(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),n&&n.constants)throw new js("ConvRNN2D cell does not support constants");const s=null==n?null:n.mask,r=null==n?null:n.training,a=null==n?null:n.initialState;return super.call(e,{mask:s,training:r,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return t.lub((()=>{const{stateSize:n}=this.cell,s=e.shape,r=this.computeSingleOutputShape(s),a=[r[0],...r.slice(2)],i=t.lls(a);return Array.isArray(n)?Array(n.length).fill(i):[i]}))}resetStates(e,n=!1){t.lub((()=>{if(!this.stateful)throw new Gs("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape,r=this.computeSingleOutputShape(s),a=[r[0],...r.slice(2)];if(null==s[0])throw new js("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>t.lls(a))):this.states_=[t.lls(a)];else if(null==e)t.B90(this.states_),null!=this.keptStates&&(t.B90(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>t.lls(a))):this.states_[0]=t.lls(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new js(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);n?this.keptStates.push(this.states_.slice()):t.B90(this.states_);for(let n=0;n<this.states_.length;++n){const s=e[n],r=a;if(!t.D5U.arraysEqual(s.shape,r))throw new js(`State ${n} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map((e=>t.CnY(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?3:2],l=e[o?4:3],c=Vo(u,s[0],r,a[0],i[0]),h=Vo(l,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}bu.className="ConvRNN2D";class xu extends fu{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,dr(this.filters,"filters"),this.kernelSize=Po(n,2,"kernelSize"),this.kernelSize.forEach((e=>dr(e,"kernelSize"))),this.strides=Po(s||1,2,"strides"),this.strides.forEach((e=>dr(e,"strides"))),this.padding=r||"valid",Cr(this.padding),this.dataFormat=a||"channelsLast",Tr(this.dataFormat),this.dilationRate=Po(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>dr(e,"dilationRate")))}build(e){var n;e=$a(e);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new js(`The channel dimension of the input should be defined. Found ${e[s]}`);const r=e[s],a=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const s=this.biasInitializer,r=this.filters;e=new((n=class extends aa{apply(e,n){return jr([s.apply([r]),t.iUs([r]),s.apply([2*r])])}}).className="CustomInit",n)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,n){return t.lub((()=>{if(3!==e.length)throw new js(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const s=n.training||!1,r=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=yu({ones:()=>t.JpU(r),rate:this.dropout,training:s,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,u=(e,n,s)=>n&&n[s]?t.dC7(n[s],e):e;let l=u(r,o,0),c=u(r,o,1),h=u(r,o,2),p=u(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=yu({ones:()=>t.JpU(a),rate:this.recurrentDropout,training:s,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let f=u(a,d,0),m=u(a,d,1),g=u(a,d,2),y=u(a,d,3);const[b,x,w,v]=t.Vl2(this.kernel.read(),4,3),[k,I,S,N]=this.useBias?t.Vl2(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,S,this.padding),p=this.inputConv(p,v,N,this.padding);const[T,C,$,E]=t.Vl2(this.recurrentKernel.read(),4,3);f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$),y=this.recurrentConv(y,E);const A=this.recurrentActivation.apply(t.IHx(l,f)),D=this.recurrentActivation.apply(t.IHx(c,m)),R=t.IHx(t.dC7(D,i),t.dC7(A,this.activation.apply(t.IHx(h,g)))),_=t.dC7(this.recurrentActivation.apply(t.IHx(p,y)),this.activation.apply(R));return[_,_,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,n,s,r){const a=t.Tek(e,n,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return s?ea(a,s,this.dataFormat):a}recurrentConv(e,n){return t.Tek(e,n,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}xu.className="ConvLSTM2DCell",t.m7h.registerClass(xu);class wu extends bu{constructor(e){const t=new xu(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}wu.className="ConvLSTM2D",t.m7h.registerClass(wu);class vu extends za{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const t=Ca(e);if(0<this.rate&&this.rate<1){const e=null!=n.training&&n.training,s=this.getNoiseShape(t);return na((()=>ta(t,this.rate,s,this.seed)),(()=>t),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}vu.className="Dropout",t.m7h.registerClass(vu);class ku extends vu{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}ku.className="SpatialDropout1D",t.m7h.registerClass(ku);class Iu extends za{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,dr(this.units,"units"),this.activation=Eo(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Sa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Sa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=ri(e.kernelConstraint),this.biasConstraint=ri(e.biasConstraint),this.kernelRegularizer=Oo(e.kernelRegularizer),this.biasRegularizer=Oo(e.biasRegularizer),this.activityRegularizer=Oo(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=$a(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=$a(e)).slice();return t[t.length-1]=this.units,t}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const t=Ca(e),s=mr(this.activation.getClassName());let r;return null!=s?r=Yr(t,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Yr(t,this.kernel.read()),null!=this.bias&&(r=ea(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:Co(this.activation),useBias:this.useBias,kernelInitializer:Ia(this.kernelInitializer),biasInitializer:Ia(this.biasInitializer),kernelRegularizer:_o(this.kernelRegularizer),biasRegularizer:_o(this.biasRegularizer),activityRegularizer:_o(this.activityRegularizer),kernelConstraint:ni(this.kernelConstraint),biasConstraint:ni(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Iu.className="Dense",t.m7h.registerClass(Iu);class Su extends za{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=$a(e);for(const t of e.slice(1))if(null==t)throw new js(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Or(e,1)]}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);let s=Ca(e);if("channelsFirst"===this.dataFormat&&s.rank>1){const e=[0];for(let t=2;t<s.rank;++t)e.push(t);e.push(1),s=(0,t.p4s)(s,e)}return function(e){if(e.rank<=1)throw new js(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const n=[e.shape[0],Or(e.shape,1)];return t.XLQ(e,n)}(s)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Su.className="Flatten",t.m7h.registerClass(Su);class Nu extends za{constructor(e){super(e),this.supportsMasking=!0,this.activation=Eo(e.activation)}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const t=Ca(e);return this.activation.apply(t)}))}getConfig(){const e={activation:Co(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Nu.className="Activation",t.m7h.registerClass(Nu);class Tu extends za{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,n){return(0,t.lub)((()=>{return e=Ca(e),n=e,s=this.n,(0,t.lub)((()=>{if(2!==n.shape.length)throw new js(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return qr(Pr(n,1),[1,s,1])}));var n,s}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Tu.className="RepeatVector",t.m7h.registerClass(Tu);class Cu extends za{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new js("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=Or(e);if(null!==a){if(0===r||i%r!=0)throw new js(n);s[a]=i/r}else if(i!==r)throw new js(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const s=Ca(e),r=s.shape,a=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return(0,t.XLQ)(s,a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Cu.className="Reshape",t.m7h.registerClass(Cu);class $u extends za{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const n=Br(1,e.dims.length+1);if(!t.D5U.arraysEqual(e.dims.slice().sort(),n))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Fa({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=$a(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,n){return(0,t.p4s)(Ca(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}$u.className="Permute",t.m7h.registerClass($u);class Eu extends za{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,n){const s=Ca(e);return(0,t.YjB)((0,t.Quu)(s,this.maskValue),-1)}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const s=Ca(e),r=(0,t.YjB)((0,t.Quu)(s,this.maskValue),-1,!0);return(0,t.dC7)(s,(0,t.pju)(r,s.dtype))}))}}Eu.className="Masking",t.m7h.registerClass(Eu);class Au extends za{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(tr(e.inputLength))}this.inputDim=e.inputDim,dr(this.inputDim,"inputDim"),this.outputDim=e.outputDim,dr(this.outputDim,"outputDim"),this.embeddingsInitializer=Sa(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Oo(e.embeddingsRegularizer),this.activityRegularizer=Oo(e.activityRegularizer),this.embeddingsConstraint=ri(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,n){return(0,t.lub)((()=>this.maskZero?(e=Ca(e),(0,t.Quu)(e,(0,t.P84)(e))):null))}computeOutputShape(e){if(e=$a(e),null==this.inputLength)return[...e,this.outputDim];const t=tr(this.inputLength);if(t.length!==e.length-1)throw new js(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new js(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);let s=Ca(e);"int32"!==s.dtype&&(s=Wr(s,"int32"));const r=Qr(this.embeddings.read(),(0,t.XLQ)(s,[s.size]));return(0,t.XLQ)(r,$a(this.computeOutputShape(s.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Ia(this.embeddingsInitializer),embeddingsRegularizer:_o(this.embeddingsRegularizer),activityRegularizer:_o(this.activityRegularizer),embeddingsConstraint:ni(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Au.className="Embedding",t.m7h.registerClass(Au);class Du extends za{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Xs}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new js("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[$a(e)]),e.length<2)throw new js(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=lr(t),t.length>1)throw new js(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===lr(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,n){return(0,t.lub)((()=>{if(this.reshapeRequired){const n=[],s=e.map((e=>e.rank));if(-1===s.indexOf(null)){const t=Lr(s);for(let s of e){const e=s.rank;for(let n=0;n<t-e;++n)s=Pr(s,1);n.push(s)}return this.mergeFunction(n)}{let s=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,a=e[0],i=e.slice(1).concat([a]);let o=t.XLQ(r,[a].concat(Or(e.slice(1))));o=t.p4s(o,[1,0]),o=t.XLQ(o,i),n.push(o),s=!0}else if(e>1){const a=Br(1,e).concat([0]);n.push(t.p4s(r,a)),s=!0}else n.push(r)}let r=this.mergeFunction(n);const a=r.rank;if(s)if(null==a){const e=r.shape,n=e[e.length-1],s=[n].concat(e.slice(0,e.length-1));r=t.XLQ(t.p4s(t.XLQ(r,[-1,n]),[1,0]),s)}else if(a>1){const e=[a-1].concat(Br(0,a-1));r=t.p4s(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=lr(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,n){return t.lub((()=>{if(null==n)return null;if(!Array.isArray(n))throw new js("`mask` should be an Array");if(!Array.isArray(e))throw new js("`inputs` should be an Array");if(n.length!==e.length)throw new js(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${n.length})`);if(n.every((e=>null==e)))return null;let s=(n=n.map((e=>null==e?e:t.dt4(e,0))))[0];for(let e=1;e<n.length-1;++e)s=t.HvI(s,n[e]);return s}))}}class Ru extends Du{constructor(e){super(e)}mergeFunction(e){return(0,t.lub)((()=>{let n=e[0].clone();for(let s=1;s<e.length;++s)n=t.IHx(n,e[s]);return n}))}}Ru.className="Add",t.m7h.registerClass(Ru);class _u extends Du{constructor(e){super(e)}mergeFunction(e){return(0,t.lub)((()=>{let n=e[0].clone();for(let s=1;s<e.length;++s)n=t.dC7(n,e[s]);return n}))}}_u.className="Multiply",t.m7h.registerClass(_u);class Fu extends Du{constructor(e){super(e)}mergeFunction(e){return(0,t.lub)((()=>{let n=e[0].clone();for(let s=1;s<e.length;++s)n=t.IHx(n,e[s]);return t.dC7(1/e.length,n)}))}}Fu.className="Average",t.m7h.registerClass(Fu);class Ou extends Du{constructor(e){super(e)}mergeFunction(e){return(0,t.lub)((()=>{let n=e[0];for(let s=1;s<e.length;++s)n=t.gWQ(n,e[s]);return n}))}}Ou.className="Maximum",t.m7h.registerClass(Ou);class Mu extends Du{constructor(e){super(e)}mergeFunction(e){return(0,t.lub)((()=>{let n=e[0];for(let s=1;s<e.length;++s)n=t.LTh(n,e[s]);return n}))}}Mu.className="Minimum",t.m7h.registerClass(Mu);class Lu extends Du{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new js("A `Concatenate` layer should be called on a list of at least 2 inputs");let n=!0;for(const t of e)if(null!=t){n=!1;break}if(n)return;const s=[];for(let n=0;n<e.length;++n){const r=e[n].slice();r.splice(this.axis,1);let a=!1;for(const e of s)if(t.D5U.arraysEqual(e,r)){a=!0;break}a||s.push(r)}if(s.length>1)throw new js("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,t.lub)((()=>jr(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new js("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,n){if(null==n)return null;if(!Array.isArray(n))throw new js("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new js("`inputs` should be an array for Concatenate");if(n.length!==e.length)throw new js(`Mismatch in the length of mask (${n.length}) and the legnth of inputs (${e.length})`);return t.lub((()=>{let s=!0;if(n.forEach((e=>{null==e||(s=!1)})),s)return null;const r=[];for(let s=0;s<e.length;++s)null==n[s]?r.push(t.pju(t.JpU(e[s]),"bool")):n[s].rank<e[s].rank?r.push(t.dt4(n[s],-1)):r.push(n[s]);const a=t.zoF(r,this.axis);return t.$6P(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Bu(e,t){for(;e<0;)e+=t;return e}Lu.className="Concatenate",t.m7h.registerClass(Lu);class zu extends Du{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){t.D5U.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const n=e[0],s=e[1];if(n.length>3||s.length>3)throw new Xs("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(n,s);if(n[r[0]]!==s[r[1]])throw new js(`Dimension incompatibility: ${n[r[0]]} !== ${s[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new js(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let n,s=e[0],r=e[1];return n=Array.isArray(this.axes)?this.axes.map(((t,n)=>Bu(t,e[n].shape.length))):[Bu(this.axes,s.shape.length),Bu(this.axes,r.shape.length)],this.normalize&&(s=yi(s,n[0]),r=yi(r,n[1])),function(e,n,s){if(e.shape.length>3||n.shape.length>3)throw new Xs("batchDot is not implemented for tensors of 4D or higher rank yet");if(t.D5U.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),t.D5U.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${n.shape.length}`)),"number"==typeof s&&(s=[s,s]),"complex64"===e.dtype||"complex64"===n.dtype)throw new Xs("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,a=n.shape.length;null==s&&(s=[r-1,a-2]);const i=s;return t.lub((()=>{let s,o;if(r>a){s=r-a;const e=[];for(let t=0;t<s;++t)e.push(1);n=t.XLQ(n,n.shape.concat(e))}else if(a>r){s=a-r;const n=[];for(let e=0;e<s;++e)n.push(1);e=t.XLQ(e,e.shape.concat(n))}else s=0;if(2===e.shape.length&&2===n.shape.length)o=i[0]===i[1]?t.Smz(t.dC7(e,n),i[0]):t.Smz(t.dC7(t.p4s(e,[1,0]),n),i[1]);else{const s=i[0]!==e.shape.length-1,r=i[1]===n.shape.length-1;o=t.OI3(e,n,s,r)}if(s>0){let e;e=r>a?r+a-3:r-1;const n=[];for(let t=e;t<e+s;++t)n.push(t);o=t.L9e(o,n)}return 1===o.shape.length&&(o=t.dt4(o,1)),o}))}(s,r,n)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Bu(this.axes,e.length),Bu(this.axes,t.length)],n}computeOutputShape(e){t.D5U.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const n=e[0].slice(),s=e[1].slice();if(n.length>3||s.length>3)throw new Xs("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(n,s);n.splice(r[0],1),s.splice(r[1],1),s.splice(0,1);const a=n.concat(s);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}zu.className="Dot",t.m7h.registerClass(zu);class Uu extends za{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const s=Ca(e);return na((()=>(0,t.IHx)(Kr(s.shape,0,this.stddev),s)),(()=>s),n.training||!1)}))}}Uu.className="GaussianNoise",t.m7h.registerClass(Uu);class Wu extends za{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n);const s=Ca(e);return this.rate>0&&this.rate<1?na((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return(0,t.dC7)(s,Kr(s.shape,1,e))}),(()=>s),n.training||!1):s}))}}Wu.className="GaussianDropout",t.m7h.registerClass(Wu);class Pu extends za{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Ca(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,n){return(0,t.lub)((()=>{if(this.rate<1&&this.rate>0){const s=this._getNoiseShape(e);return na((()=>{const n=Ca(e),r=-1.7580993408473766;let a=(0,t.brS)((0,t.LGj)(s),this.rate);a=Wr(a,"float32");const i=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-i*r*this.rate,u=(0,t.IHx)((0,t.dC7)(n,a),(0,t.dC7)((0,t.IHx)(a,-1),r));return(0,t.IHx)((0,t.dC7)(u,i),o)}),(()=>Ca(e)),n.training||!1)}return e}))}}function Vu(e,n,s,r,a,i=.001){let o;if(2===e.rank)o=t.Dxk(e,n,s,r,a,i);else if(3===e.rank)o=t.JY5(e,n,s,r,a,i);else{if(4!==e.rank)throw new Xs(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=t.p3b(e,n,s,r,a,i)}return o}Pu.className="AlphaDropout",t.m7h.registerClass(Pu);class Gu extends za{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Sa(e.betaInitializer||"zeros"),this.gammaInitializer=Sa(e.gammaInitializer||"ones"),this.movingMeanInitializer=Sa(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Sa(e.movingVarianceInitializer||"ones"),this.betaConstraint=ri(e.betaConstraint),this.gammaConstraint=ri(e.gammaConstraint),this.betaRegularizer=Oo(e.betaRegularizer),this.gammaRegularizer=Oo(e.gammaRegularizer)}build(e){e=$a(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new js(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Fa({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,n){return(0,t.lub)((()=>{const s=null!=n.training&&n.training,r=Ca(e),a=r.shape,i=a.length,o=Br(0,i),u=this.axis>=0?this.axis:this.axis+i;o.splice(u,1);const l=Qs(1,i);l[u]=a[u];const c=o.slice();c.sort();const h=!t.D5U.arraysEqual(c,Br(0,i).slice(0,i-1));if(!s)return(()=>{if(h){const e=(0,t.XLQ)(this.movingMean.read(),l),n=(0,t.XLQ)(this.movingVariance.read(),l),s=this.center?(0,t.XLQ)(this.beta.read(),l):null,a=this.scale?(0,t.XLQ)(this.gamma.read(),l):null;return Vu(r,e,n,s,a,this.epsilon)}return Vu(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=function(e,n,s,r,a=.001){return t.D5U.arraysEqual(r.slice().sort(),Br(0,e.rank-1))?function(e,n,s,r,a=.001){return(0,t.lub)((()=>{const i=t.Gi7(e,r),o=i.mean,u=i.variance;return[Vu(e,o,u,s,n,a),o,u]}))}(e,n,s,r,a):function(e,n,s,r,a=.001){return(0,t.lub)((()=>{const i=t.Gi7(e,r),o=i.mean,u=i.variance,l=[];for(const t of Br(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const c=(0,t.XLQ)(o,l),h=(0,t.XLQ)(u,l),p=null==n?null:(0,t.XLQ)(n,l),d=null==s?null:(0,t.XLQ)(s,l);return[Vu(e,c,h,d,p,a),o,u]}))}(e,n,s,r,a)}(r,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(e,n,s)=>{t.lub((()=>{const r=1-s,a=e.read(),i=t.dC7(t.luU(a,n),r);e.write(t.luU(a,i))}))};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ia(this.betaInitializer),gammaInitializer:Ia(this.gammaInitializer),movingMeanInitializer:Ia(this.movingMeanInitializer),movingVarianceInitializer:Ia(this.movingVarianceInitializer),betaRegularizer:_o(this.betaRegularizer),gammaRegularizer:_o(this.gammaRegularizer),betaConstraint:ni(this.betaConstraint),gammaConstraint:ni(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Gu.className="BatchNormalization",t.m7h.registerClass(Gu);class Hu extends za{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Sa(e.betaInitializer||"zeros"),this.gammaInitializer=Sa(e.gammaInitializer||"ones"),this.betaRegularizer=Oo(e.betaRegularizer),this.gammaRegularizer=Oo(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=$a(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==lr(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,n){const s=Ca(e),r=s.shape,a=r.length;return(0,t.lub)((()=>{let{mean:e,variance:n}=(0,t.Gi7)(s,this.axis,!0);const i=Qs(1,a);for(const e of this.axis)i[e]=r[e];const o=e=>null!=e&&e.shape.length!==a?t.XLQ(e,i):e;let u=this.scale?o(this.gamma.read()):null,l=this.center?o(this.beta.read()):null;const c=[],h=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(c.push(r[e]),h.push(1)):(c.push(1),h.push(r[e]));return e=t.Gg6(e,c),n=t.Gg6(n,c),null!=u&&(u=t.Gg6(u,h)),null!=l&&(l=t.Gg6(l,h)),Vu(s,e,n,l,u,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ia(this.betaInitializer),gammaInitializer:Ia(this.gammaInitializer),betaRegularizer:_o(this.betaRegularizer),gammaRegularizer:_o(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Hu.className="LayerNormalization",t.m7h.registerClass(Hu);class ju extends za{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new js(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new js(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new js(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Fa({ndim:4})]}computeOutputShape(e){let t,n;return e=$a(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,n){return(0,t.lub)((()=>{return n=Ca(e),s=this.padding,r=this.dataFormat,(0,t.lub)((()=>{if(4!==n.rank)throw new js(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==s&&(s=[[1,1],[1,1]]),2!==s.length||2!==s[0].length||2!==s[1].length)throw new js("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new js(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],s[0],s[1]]:[[0,0],s[0],s[1],[0,0]],t.vku(n,e)}));var n,s,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Xu(e,n,s,r,a,i){return(0,t.lub)((()=>{let o;Tr(a),$r(i),Cr(r),null==s&&(s=[1,1]),null==r&&(r="valid"),null==a&&(a="channelsLast"),null==i&&(i="max"),e=Ho(e,a);const u="same"===r?"same":"valid";return o="max"===i?t._sB(e,n,s,u):t.wS1(e,n,s,u),"channelsFirst"===a&&(o=t.p4s(o,[0,3,1,2])),o}))}function qu(e,n,s,r,a,i){return(0,t.lub)((()=>{let o;Tr(a),$r(i),Cr(r),null==s&&(s=[1,1,1]),null==r&&(r="valid"),null==a&&(a="channelsLast"),null==i&&(i="max"),e=jo(e,a);const u="same"===r?"same":"valid";return o="max"===i?t.YQQ(e,n,s,u):t.uR5(e,n,s,u),"channelsFirst"===a&&(o=t.p4s(o,[0,4,1,2,3])),o}))}ju.className="ZeroPadding2D",t.m7h.registerClass(ju);class Ku extends za{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new js(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(dr(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new js(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}dr(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Cr(this.padding),this.inputSpec=[new Fa({ndim:3})]}computeOutputShape(e){const t=Vo((e=$a(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,n){return(0,t.lub)((()=>{this.invokeCallHook(e,n),e=Pr(Ca(e),2);const s=this.poolingFunction(Ca(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return t.L9e(s,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Yu extends Ku{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Tr(r),Cr(s),Xu(e,t,n,s,r,"max")}}Yu.className="MaxPooling1D",t.m7h.registerClass(Yu);class Qu extends Ku{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Tr(r),Cr(s),Xu(e,t,n,s,r,"avg")}}Qu.className="AveragePooling1D",t.m7h.registerClass(Qu);class Zu extends za{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new js(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];dr(this.poolSize,"poolSize"),dr(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Tr(this.dataFormat),Cr(this.padding),this.inputSpec=[new Fa({ndim:4})]}computeOutputShape(e){e=$a(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Vo(t,this.poolSize[0],this.padding,this.strides[0]),n=Vo(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,n){return(0,t.lub)((()=>(this.invokeCallHook(e,n),this.poolingFunction(Ca(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ju extends Zu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Tr(r),Cr(s),Xu(e,t,n,s,r,"max")}}Ju.className="MaxPooling2D",t.m7h.registerClass(Ju);class el extends Zu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Tr(r),Cr(s),Xu(e,t,n,s,r,"avg")}}el.className="AveragePooling2D",t.m7h.registerClass(el);class tl extends za{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new js(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];dr(this.poolSize,"poolSize"),dr(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Tr(this.dataFormat),Cr(this.padding),this.inputSpec=[new Fa({ndim:5})]}computeOutputShape(e){e=$a(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Vo(t,this.poolSize[0],this.padding,this.strides[0]),n=Vo(n,this.poolSize[1],this.padding,this.strides[1]),s=Vo(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,n){return(0,t.lub)((()=>(this.invokeCallHook(e,n),this.poolingFunction(Ca(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class nl extends tl{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Tr(r),Cr(s),qu(e,t,n,s,r,"max")}}nl.className="MaxPooling3D",t.m7h.registerClass(nl);class sl extends tl{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Tr(r),Cr(s),qu(e,t,n,s,r,"avg")}}sl.className="AveragePooling3D",t.m7h.registerClass(sl);class rl extends za{constructor(e){super(e),this.inputSpec=[new Fa({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Xs}}class al extends rl{constructor(e){super(e||{})}call(e,n){return(0,t.lub)((()=>{const n=Ca(e);return t.J69(n,1)}))}}al.className="GlobalAveragePooling1D",t.m7h.registerClass(al);class il extends rl{constructor(e){super(e||{})}call(e,n){return(0,t.lub)((()=>{const n=Ca(e);return t.Fp7(n,1)}))}}il.className="GlobalMaxPooling1D",t.m7h.registerClass(il);class ol extends za{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Tr(this.dataFormat),this.inputSpec=[new Fa({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Xs}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ul extends ol{call(e,n){return(0,t.lub)((()=>{const n=Ca(e);return"channelsLast"===this.dataFormat?t.J69(n,[1,2]):t.J69(n,[2,3])}))}}ul.className="GlobalAveragePooling2D",t.m7h.registerClass(ul);class ll extends ol{call(e,n){return(0,t.lub)((()=>{const n=Ca(e);return"channelsLast"===this.dataFormat?t.Fp7(n,[1,2]):t.Fp7(n,[2,3])}))}}ll.className="GlobalMaxPooling2D",t.m7h.registerClass(ll);class cl extends za{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=gi(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class hl extends cl{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=$a(e)).length<3)throw new js(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=$a(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,n){return(0,t.lub)((()=>ou(((e,t)=>[Ca(this.layer.call(e,n)),[]]),e=Ca(e),[],!1,null,null,!1,!0)[1]))}}hl.className="TimeDistributed",t.m7h.registerClass(hl);class pl extends cl{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=gi(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=gi(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,hr(Sr,"BidirectionalMergeMode",r),e.weights)throw new Xs("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):er(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=iu(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new js("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new Fa({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Xs("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Oa;for(const e of a)if(e instanceof Oa!==o)throw new js("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,n){return(0,t.lub)((()=>{const s=n.initialState;let r,a,i,o;if(null==s)r=this.forwardLayer.call(e,n),a=this.backwardLayer.call(e,n);else{const t=s.slice(0,s.length/2),i=s.slice(s.length/2);r=this.forwardLayer.call(e,Object.assign(n,{initialState:t})),a=this.backwardLayer.call(e,Object.assign(n,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(i=r.slice(1).concat(a.slice(1))),r=r[0],a=a[0]),this.returnSequences&&(a=t.GYS(a,1)),"concat"===this.mergeMode?o=jr([r,a]):"sum"===this.mergeMode?o=t.IHx(r,a):"ave"===this.mergeMode?o=t.dC7(.5,t.IHx(r,a)):"mul"===this.mergeMode?o=t.dC7(r,a):null==this.mergeMode&&(o=[r,a]),this.returnState?null==this.mergeMode?o.concat(i):[o].concat(i):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Ar(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Ar(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=gi(t.layer);if(delete t.layer,null!=t.numConstants)throw new Xs("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}pl.className="Bidirectional",t.m7h.registerClass(pl);class dl extends za{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,n){return(0,t.lub)((()=>("float32"!==(e=Ca(e)).dtype&&(e=Wr(e,"float32")),(0,t.IHx)((0,t.dC7)(e,this.scale),this.offset))))}}dl.className="Rescaling",t.m7h.registerClass(dl);const{resizeBilinear:fl,cropAndResize:ml}=t.BHj;class gl extends za{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,n,s,r,a,i,o,u){return(0,t.lub)((()=>{let l,c=!1;const h=[n/i,s/o,(r+n)/i,(a+s)/o],p=[];3===e.rank?(c=!0,l=(0,t.knu)([e])):l=e;for(let e=0;e<l.shape[0];e++)p.push(h);const d=(0,t.XeE)(p,[p.length,4]),f=(0,t.w6H)(0,p.length,1,"int32"),m=ml(l,d,f,[r,a],"nearest");return Wr(c?Ca((0,t.HHK)(m)):m,u)}))}upsize(e,n,s,r){return(0,t.lub)((()=>Wr(fl(e,[n,s]),r)))}call(e,n){return(0,t.lub)((()=>{const t=Ca(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let i=0;r!==this.height&&(i=Math.floor((r-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=$a(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}gl.className="CenterCrop",t.m7h.registerClass(gl);class yl extends za{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=$a(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,n){return(0,t.lub)((()=>{let s;if("int32"!==(e=Ca(e)).dtype&&(e=Wr(e,"int32")),void 0!==n.countWeights){if("count"!==this.outputMode)throw new js(`countWeights is not used when outputMode !== count.\n              Received countWeights=${n.countWeights}`);s=Ca(n.countWeights)}const r=(0,t.Fp7)(e),a=(0,t.VV$)(e),i=(0,t.pjt)(this.numTokens,r).bufferSync().get(0),o=(0,t.brS)(a,0).bufferSync().get(0);if(!i||!o)throw new js(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,n,s,r){let a=Ca(e);if("int32"!==a.dtype&&(a=Wr(a,"int32")),"int"===n)return a;const i=a.shape;if(0===a.rank&&(a=(0,t.dt4)(a,-1)),"oneHot"===n&&1!==a.shape[a.shape.length-1]&&(a=(0,t.dt4)(a,-1)),a.rank>2)throw new js(`When outputMode is not int, maximum output rank is 2 Received outputMode ${n} and input shape ${i} which would result in output rank ${a.rank}.`);const o=["multiHot","oneHot"].includes(n),u=a;let l;if(l=void 0!==r&&"count"===n?(0,t.ppE)(u,r,s,o):(0,t.ppE)(u,[],s,o),"tfIdf"!==n)return l;if(r)return(0,t.dC7)(l,r);throw new js("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,s)}))}}yl.className="CategoryEncoding",t.m7h.registerClass(yl);const bl=new Set(["bilinear","nearest"]);class xl extends za{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!bl.has(e.interpolation))throw new js(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=$a(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,n){return(0,t.lub)((()=>{const n=[this.height,this.width];if("bilinear"===this.interpolation)return t.BHj.resizeBilinear(e,n,!this.cropToAspectRatio);if("nearest"===this.interpolation)return t.BHj.resizeNearestNeighbor(e,n,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...bl]} are supported`)}))}}xl.className="Resizing",t.m7h.registerClass(xl);var wl,vl,kl=u(13),Il=u(6377);function Sl(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if($l(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=Sl(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function Nl(e,t=Cl){return Tl(e,t)}function Tl(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if($l(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=Tl(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function Cl(e){return null===e?null:$l(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function $l(e){let n=!1;if(t.OBj().get("IS_BROWSER"))n=e instanceof TextDecoder;else{const{StringDecoder:t}=u(4977);n=e instanceof t}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof t.esB)&&!(e instanceof Promise)&&!n)}function El(e){return Sl(e,Al)}function Al(e){return e instanceof t.esB?{value:e.clone(),recurse:!1}:$l(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class Dl{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Rl extends Dl{constructor(){super(Rl.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Rl.INITIAL_CAPACITY=32;class _l{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Pl(this,e)}filter(e){return new Ul(this,e)}map(e){return new Wl(this,e)}mapAsync(e){return new Vl(this,e)}serialMapAsync(e){return new Vl(this,e).serial()}flatmap(e){return new Hl(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new zl(this,e,t)}columnMajorBatch(e,t=!0,n=Cl){return this.rowMajorBatch(e,t).map((e=>Nl(e,n)))}concatenate(e,t){return new jl(new Fl([this,e]),t)}take(e){return e<0||null==e?this:new Bl(this,e)}skip(e){return e<0||null==e?this:new Ll(this,e)}prefetch(e){return new Xl(this,e)}shuffle(e,t){return new ql(this,e,t)}serial(){return new Ml(this)}}class Fl extends _l{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:El(e),done:!1}}}class Ol extends _l{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Ml extends _l{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Ll extends _l{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;t.B90(e.value)}return this.upstream.next()}}class Bl extends _l{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class zl extends _l{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Ul extends _l{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;t.B90(e.value)}}}class Wl extends _l{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const n=t.piX.getTensorsInContainer(e.value),s=this.transform(e.value),r=t.piX.getTensorsInContainer(s);for(const e of n)t.piX.isTensorInList(e,r)||e.dispose();return{value:s,done:!1}}}class Pl extends _l{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Vl extends _l{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const n=t.piX.getTensorsInContainer(e.value),s=await this.transform(e.value),r=t.piX.getTensorsInContainer(s);for(const e of n)t.piX.isTensorInList(e,r)||e.dispose();return{value:s,done:!1}}}class Gl extends _l{constructor(){super(),this.outputQueue=new Rl,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Hl extends Gl{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const n=t.piX.getTensorsInContainer(e.value),s=this.transform(e.value),r=t.piX.getTensorsInContainer(s);this.outputQueue.pushAll(s);for(const e of n)t.piX.isTensorInList(e,r)||e.dispose();return!0}}class jl extends _l{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}(vl=wl||(wl={}))[vl.FAIL=0]="FAIL",vl[vl.SHORTEST=1]="SHORTEST",vl[vl.LONGEST=2]="LONGEST";class Xl extends _l{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Dl(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class ql extends Xl{constructor(e,n,s){super(e,n),this.upstream=e,this.windowSize=n,this.upstreamExhausted=!1,this.random=Il.alea(s||t.D5U.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Kl{constructor(){this.size=null}batch(e,n=!0){const s=this;let r;return t.D5U.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:n?Math.ceil(this.size/e):Math.floor(this.size/e),Yl((async()=>(await s.iterator()).columnMajorBatch(e,n,Ql)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Yl((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const n=this;let s;return s=this.size===1/0?1/0:null,Yl((async()=>(await n.iterator()).filter((n=>t.lub((()=>e(n)))))),s)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const n=this;return Yl((async()=>(await n.iterator()).map((n=>t.lub((()=>e(n)))))),this.size)}mapAsync(e){const t=this;return Yl((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Yl((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Yl((async()=>{return n=(r=async()=>({value:await t.iterator(),done:!1}),new Ol(r)).take(e),new jl(n,s);var n,s,r}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Yl((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,n,s=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,a=Il.alea(n||t.D5U.now().toString());return Yl((async()=>{let t=a.int32();return s&&(t+=a.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Yl((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Yl(e,t=null){return new class extends Kl{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Ql(e){if(null===e)return null;return null==(n=e[0])||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof t.esB||t.D5U.isTypedArray(n)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof t.esB?t.knu(e):t.XeE(e)}(e),recurse:!1}:{value:null,recurse:!0};var n,s}function Zl(e,n){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&t.D5U.assert("complex64"!==e.dtype,(()=>`${n} does not support complex64 tensors in the CPU backend.`))}))}Kl.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const Jl=t.GDt.ZA;class ec extends t.Zuw{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new t.JLz(this,(0,t.SRH)())}nextDataId(){return ec.nextDataId++}write(e,n,s){this.firstUse&&(this.firstUse=!1,(0,t.OBj)().get("IS_NODE")&&t.Wap.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:s,refCount:1}),r}makeTensorInfo(e,n,s){let r;if("string"===n&&null!=s&&s.length>0&&t.D5U.isString(s[0])){const a=s.map((e=>t.D5U.encodeString(e)));r=this.write(a,e,n)}else r=this.write(s,e,n);return{dataId:r,shape:e,dtype:n}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:n,complexTensorInfos:s}=this.data.get(e);if("complex64"===n){const e=this.readSync(s.real.dataId),n=this.readSync(s.imag.dataId);return t.Wap.mergeRealAndImagArrays(e,n)}return this.data.get(e).values}bufferSync(e){const n=this.readSync(e.dataId);if("string"===e.dtype)try{const s=n.map((e=>t.D5U.decodeString(e)));return(0,t.f3b)(e.shape,e.dtype,s)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,t.f3b)(e.shape,e.dtype,n)}makeOutput(e,n,s){return(0,t.SRH)().makeTensorFromTensorInfo(this.makeTensorInfo(n,s,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const n=t.D5U.now();return e(),{kernelMs:t.D5U.now()-n}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Zl([e],"where");const t=this.readSync(e.dataId);return Jl(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function tc(e,n,s){return({inputs:r,attrs:a,backend:i})=>{const{x:o}=r;if(Zl(o,e),"string"===o.dtype||"string"===s)throw new Error("unaryKernelFunc does not support string input/output");const u=i,l=u.data.get(o.dataId).values,c=t.D5U.sizeFromShape(o.shape),h=s||o.dtype,p=t.D5U.getArrayFromDType(h,c);for(let e=0;e<c;++e)p[e]=n(l[e],a);return u.makeTensorInfo(o.shape,h,p)}}function nc(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(Zl(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=t(u,l,r);return o.makeTensorInfo(i.shape,l,c)}}ec.nextDataId=0,(0,t.jqO)("cpu",(()=>new ec),1);const sc=tc(t.SX0,(e=>e>=0?e:Math.exp(e)-1)),rc={kernelName:t.SX0,backendName:"cpu",kernelFunc:sc};function ac(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const ic={kernelName:t.iJz,backendName:"cpu",kernelFunc:ac};function oc(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{alpha:i}=r;Zl([a],"leakyRelu");const o=t.D5U.sizeFromShape(a.shape),u=s.data.get(a.dataId).values,l=t.D5U.getTypedArrayFromDType("float32",o);for(let e=0;e<u.length;e++)l[e]=u[e]<0?i*u[e]:u[e];return s.makeTensorInfo(a.shape,"float32",l)}const uc={kernelName:t.J$2,backendName:"cpu",kernelFunc:oc};function lc(e){return(n,s,r,a,i)=>{const o=t.Wap.assertAndGetBroadcastShape(n,s),u=o.length,l=t.D5U.computeStrides(o),c=t.D5U.sizeFromShape(o),h=t.D5U.getTypedArrayFromDType(i,c),p=n.length,d=s.length,f=t.D5U.computeStrides(n),m=t.D5U.computeStrides(s),g=t.Wap.getBroadcastDims(n,o),y=t.Wap.getBroadcastDims(s,o);if(g.length+y.length===0)for(let t=0;t<h.length;++t)h[t]=e(r[t%r.length],a[t%a.length]);else for(let n=0;n<h.length;++n){const s=t.D5U.indexToLoc(n,u,l),i=s.slice(-p);g.forEach((e=>i[e]=0));const o=t.D5U.locToIndex(i,p,f),c=s.slice(-d);y.forEach((e=>c[e]=0));const b=t.D5U.locToIndex(c,d,m);h[n]=e(r[o],a[b])}return[h,o]}}const cc=lc(((e,t)=>e<0?t*e:e));function hc(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;Zl([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,u]=cc(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(u,"float32",o)}const pc={kernelName:t.o0g,backendName:"cpu",kernelFunc:hc},dc=tc(t.qkr,(e=>Math.max(0,e))),fc={kernelName:t.qkr,backendName:"cpu",kernelFunc:dc},mc=tc(t.SbG,(e=>Math.min(Math.max(0,e),6))),gc={kernelName:t.SbG,backendName:"cpu",kernelFunc:mc};function yc(e){return(n,s,r)=>{const a=t.D5U.getTypedArrayFromDType(s,n.length);for(let t=0;t<n.length;++t)a[t]=e(n[t],r);return a}}const bc=yc((e=>1/(1+Math.exp(-e)))),xc=tc(t.a5O,(e=>1/(1+Math.exp(-e)))),wc={kernelName:t.a5O,backendName:"cpu",kernelFunc:xc};function vc(e,t,n,s,r){if("linear"===n)return ac({inputs:{x:t},backend:e});if("relu"===n)return dc({inputs:{x:t},backend:e});if("elu"===n)return sc({inputs:{x:t},backend:e});if("relu6"===n)return mc({inputs:{x:t},backend:e});if("prelu"===n)return hc({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return oc({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return xc({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function kc(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Ic={kernelName:t.Zz9,backendName:"cpu",kernelFunc:kc};function Sc(e,n,s="float32"){if("complex64"===s)return kc({inputs:{real:Sc(e,n,"float32"),imag:Sc(e,n,"float32")},backend:e});const r=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(n),s);return e.makeTensorInfo(n,s,r)}function Nc(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Tc={kernelName:t.xJR,backendName:"cpu",kernelFunc:Nc};function Cc(e,n,s,r){if("int32"===r)return[n,"int32",Int32Array.from(e)];if("bool"===r){const r=t.D5U.toTypedArray([0],s),[a,i]=lc(((e,t)=>e!==t?1:0))(n,[],e,r,"bool");return[i,"bool",a]}throw new Error(`Error in Cast: failed to cast ${s} to ${r}`)}function $c(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return ac({inputs:{x:a},backend:s});const e=Sc(s,a.shape,a.dtype),t=$c({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),n=kc({inputs:{real:t,imag:e},backend:s});return s.disposeIntermediateTensorInfo(e),s.disposeIntermediateTensorInfo(t),n}if("complex64"===a.dtype){const e=Nc({inputs:{input:a},backend:s}),t=$c({inputs:{x:e},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(e),t}if(!t.D5U.hasEncodingLoss(a.dtype,i)){const e=ac({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}const o=s.data.get(a.dataId).values,[u,l,c]=Cc(o,a.shape,a.dtype,i);return s.makeTensorInfo(u,l,c)}const Ec={kernelName:t.RFZ,backendName:"cpu",kernelFunc:$c};function Ac(e,n,s,r){return null==s?({inputs:s,backend:a})=>{const{a:i,b:o}=s,u=a;Zl([i,o],e);const l=u.data.get(i.dataId).values,c=u.data.get(o.dataId).values,h="string"===i.dtype?t.Wap.fromUint8ToStringArray(l):l,p="string"===i.dtype?t.Wap.fromUint8ToStringArray(c):c,d=r||i.dtype,[f,m]=n(i.shape,o.shape,h,p,d);return u.makeTensorInfo(m,d,f)}:({inputs:e,backend:t})=>{const{a,b:i}=e,o=t;if("complex64"===a.dtype||"complex64"===i.dtype){const e=$c({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),n=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,u=o.data.get(n.dataId).values,l=o.data.get(r.dataId).values,c=$c({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=s(a.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=kc({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,t=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=n(a.shape,i.shape,e,t,s);return o.makeTensorInfo(l,s,u)}}}function Dc(e){return(n,s,r,a,i,o)=>{const u=t.Wap.assertAndGetBroadcastShape(n,s),l=t.D5U.sizeFromShape(u),c=u.length,h=t.D5U.computeStrides(u),p=t.D5U.getTypedArrayFromDType("float32",l),d=t.D5U.getTypedArrayFromDType("float32",l),f=t.Wap.getBroadcastDims(n,u),m=t.Wap.getBroadcastDims(s,u),g=t.Wap.mergeRealAndImagArrays(r,a),y=t.Wap.mergeRealAndImagArrays(i,o),b=n.length,x=t.D5U.computeStrides(n),w=s.length,v=t.D5U.computeStrides(s);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,s=t%y.length,r=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);p[t]=r.real,d[t]=r.imag}else for(let n=0;n<p.length;n++){const s=t.D5U.indexToLoc(n,c,h),r=s.slice(-b);f.forEach((e=>r[e]=0));const a=t.D5U.locToIndex(r,b,x),i=s.slice(-w);m.forEach((e=>i[e]=0));const o=t.D5U.locToIndex(i,w,v),u=e(g[2*a],g[2*a+1],y[2*o],y[2*o+1]);p[n]=u.real,d[n]=u.imag}return[p,d,u]}}const Rc=lc(((e,t)=>e+t)),_c=Dc(((e,t,n,s)=>({real:e+n,imag:t+s}))),Fc=Ac(t.mm_,Rc,_c),Oc={kernelName:t.mm_,backendName:"cpu",kernelFunc:Fc};function Mc(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{shape:i}=r,o=t.D5U.sizeFromShape(a.shape),u=t.D5U.inferFromImplicitShape(i,o),l=t.D5U.sizeFromShape(u);t.D5U.assert(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),s.incRef(a.dataId);const c=s.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:a.dataId,shape:u,dtype:a.dtype}}const Lc={kernelName:t.HZH,backendName:"cpu",kernelFunc:Mc};function Bc(e){const{inputs:n,backend:s,attrs:r}=e,{a,b:i}=n,{transposeA:o,transposeB:u}=r;Zl([a,i],"matMul");const l=a.shape.length,c=i.shape.length,h=o?a.shape[l-2]:a.shape[l-1],p=u?i.shape[c-1]:i.shape[c-2],d=o?a.shape[l-1]:a.shape[l-2],f=u?i.shape[c-2]:i.shape[c-1],m=a.shape.slice(0,-2),g=i.shape.slice(0,-2),y=t.D5U.sizeFromShape(m),b=t.D5U.sizeFromShape(g),x=t.Jyw.assertAndGetBroadcastShape(a.shape.slice(0,-2),i.shape.slice(0,-2)).concat([d,f]);t.D5U.assert(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${o} and transposeB=${u} must match.`));const w=u?[b,f,p]:[b,p,f],v=Mc({inputs:{x:a},backend:s,attrs:{shape:o?[y,h,d]:[y,d,h]}}),k=Mc({inputs:{x:i},backend:s,attrs:{shape:w}}),I=o?v.shape[1]:v.shape[2],S=o?v.shape[2]:v.shape[1],N=u?k.shape[1]:k.shape[2],T=Math.max(y,b),C=s.data.get(v.dataId).values,$=s.data.get(k.dataId).values,E=t.D5U.computeStrides(v.shape),A=t.D5U.computeStrides(k.shape),[D,R,_]=o?[E[0],1,E[1]]:[E[0],E[1],1],[F,O,M]=u?[1,A[1],A[0]]:[A[1],1,A[0]],L=S*N,B=(0,t.f3b)([T,S,N],v.dtype),z=B.values,U=s.blockSize;for(let e=0;e<T;e++)for(let t=0;t<S;t+=U)for(let n=0;n<N;n+=U)for(let s=0;s<I;s+=U){const r=Math.min(t+U,S),a=Math.min(n+U,N),i=Math.min(s+U,I);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,y-1)*D,a=Math.min(e,b-1)*M;n+=C[s+o*R+r*_]*$[r*F+t*O+a]}z[e*L+(o*N+t)]+=n}}return s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(k),s.makeTensorInfo(x,B.dtype,B.values)}const zc={kernelName:t.XLW,backendName:"cpu",kernelFunc:Bc},Uc={kernelName:t.usg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Bc({inputs:{a:r,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(d=Fc({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=vc(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Wc(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Pc={kernelName:t.SYM,backendName:"cpu",kernelFunc:e=>{const{x:n}=e.inputs,s=e.backend;Zl(n,"abs");let r=new Float32Array(t.D5U.sizeFromShape(n.shape));return r=Wc(s.data.get(n.dataId).values),s.makeOutput(r,n.shape,n.dtype)}},Vc=tc(t.VGw,(e=>Math.acos(e))),Gc={kernelName:t.VGw,backendName:"cpu",kernelFunc:Vc},Hc=tc(t.SpW,(e=>Math.acosh(e))),jc={kernelName:t.SpW,backendName:"cpu",kernelFunc:Hc},Xc={kernelName:t.Xze,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,r=n;Zl(n,"addN");const a=r.map((e=>s.data.get(e.dataId).values)),i=(0,t.f3b)(r[0].shape,r[0].dtype),o=i.values;for(let e=0;e<r.length;e++){const t=a[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return s.makeTensorInfo(i.shape,i.dtype,i.values)}};function qc(e,n,s,r,a){const i=n.length,o=t.D5U.sizeFromShape(n),u=t.D5U.computeStrides(n),l=t.D5U.computeStrides(a),c=t.D5U.getTypedArrayFromDType(s,t.D5U.sizeFromShape(a));for(let n=0;n<o;++n){const s=t.D5U.indexToLoc(n,i,u),a=new Array(s.length);for(let e=0;e<a.length;e++)a[e]=s[r[e]];c[t.D5U.locToIndex(a,i,l)]=e[n]}return c}function Kc(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;Zl(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const u=qc(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(u,o,r.dtype),shape:o,dtype:r.dtype}}const Yc={kernelName:t.G3Y,backendName:"cpu",kernelFunc:Kc},Qc={kernelName:t.oT6,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r;Zl(a,"all");const u=t.D5U.parseAxisParam(i,a.shape);let l=u;const c=t.Wap.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=Kc({inputs:{x:a},backend:s,attrs:{perm:c}}),l=t.Wap.getInnerMostAxes(l.length,a.shape.length)),t.Wap.assertAxesAreInnerMostDims("all",l,h.shape.length);const[p,d]=t.Wap.computeOutAndReduceShapes(h.shape,l),f=t.D5U.sizeFromShape(d),m=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(p),h.dtype),g=s.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=c&&s.disposeIntermediateTensorInfo(h);const y=s.makeTensorInfo(p,h.dtype,m);if(o){const e=Mc({inputs:{x:y},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(p,u)}});return s.disposeIntermediateTensorInfo(y),e}return y}},Zc={kernelName:t.IKK,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r;Zl(a,"any");const u=t.D5U.parseAxisParam(i,a.shape);let l=u;const c=t.Wap.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=Kc({inputs:{x:a},backend:s,attrs:{perm:c}}),l=t.Wap.getInnerMostAxes(l.length,a.shape.length)),t.Wap.assertAxesAreInnerMostDims("any",l,h.shape.length);const[p,d]=t.Wap.computeOutAndReduceShapes(h.shape,l),f=t.D5U.sizeFromShape(d),m=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(p),h.dtype),g=s.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=c&&s.disposeIntermediateTensorInfo(h);const y=s.makeTensorInfo(p,h.dtype,m);if(o){const e=Mc({inputs:{x:y},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(p,u)}});return s.disposeIntermediateTensorInfo(y),e}return y}},Jc={kernelName:t.sJF,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i}=r;Zl(a,"argMax");let o=t.D5U.parseAxisParam(i,a.shape);const u=t.Wap.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=Kc({inputs:{x:a},backend:s,attrs:{perm:u}}),c.push(l),o=t.Wap.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],t.Wap.assertAxesAreInnerMostDims("argMax",o,l.shape.length);const[h,p]=t.Wap.computeOutAndReduceShapes(l.shape,o),d=t.D5U.sizeFromShape(h),f=t.D5U.makeZerosTypedArray(d,"int32"),m=t.D5U.sizeFromShape(p),g=s.data.get(l.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const r=g[t+e];r>n&&(n=r,s=e)}f[e]=s}return c.forEach((e=>s.disposeIntermediateTensorInfo(e))),s.makeTensorInfo(h,"int32",f)}},eh={kernelName:t.aJk,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i}=r;Zl(a,"argMin");let o=t.D5U.parseAxisParam(i,a.shape);const u=t.Wap.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=Kc({inputs:{x:a},backend:s,attrs:{perm:u}}),c.push(l),o=t.Wap.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],t.Wap.assertAxesAreInnerMostDims("argMin",o,l.shape.length);const[h,p]=t.Wap.computeOutAndReduceShapes(l.shape,o),d=t.D5U.sizeFromShape(h),f=t.D5U.makeZerosTypedArray(d,"int32"),m=t.D5U.sizeFromShape(p),g=s.data.get(l.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const r=g[t+e];r<n&&(n=r,s=e)}f[e]=s}return c.forEach((e=>s.disposeIntermediateTensorInfo(e))),s.makeTensorInfo(h,"int32",f)}},th=tc(t.M2y,(e=>Math.asin(e))),nh={kernelName:t.M2y,backendName:"cpu",kernelFunc:th},sh=tc(t.qw7,(e=>Math.asinh(e))),rh={kernelName:t.qw7,backendName:"cpu",kernelFunc:sh},ah=tc(t.jMg,(e=>Math.atan(e))),ih={kernelName:t.jMg,backendName:"cpu",kernelFunc:ah},oh=lc(((e,t)=>Math.atan2(e,t))),uh=Ac(t.QCc,oh),lh={kernelName:t.QCc,backendName:"cpu",kernelFunc:uh},ch=tc(t.Oyi,(e=>Math.atanh(e))),hh={kernelName:t.Oyi,backendName:"cpu",kernelFunc:ch};function ph(e,n,s,r,a,i){const o=a.strideHeight,u=a.strideWidth,l=a.dilationHeight,c=a.dilationWidth,h=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,f=a.padInfo.left,m="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,t.f3b)(a.outShape,s),y=g.values,b=a.outShape[1]*a.outShape[2]*a.outShape[3],x=a.outShape[2]*a.outShape[3],w=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*b,s=t*r[0];for(let t=0;t<a.inChannels;++t)for(let g=0;g<a.outHeight;++g){const b=g*o-d,v=Math.max(0,b),k=Math.min(a.inHeight,h+b),I=n+g*x;for(let n=0;n<a.outWidth;++n){const o=n*u-f,h=Math.max(0,o),d=Math.min(a.inWidth,p+o);let g=m,b=0,x=0;for(let n=v;n<k;n+=l){const a=s+n*r[1];for(let n=h;n<d;n+=c){const s=e[a+n*r[2]+t];"max"===i&&s>g?g=s:"avg"===i&&(b+=s,x++)}if(isNaN(g))break}y[I+n*w+t]="avg"===i?b/x:g}}}return g}function dh(e,n,s,r,a=!1,i=!1){const o=(0,t.f3b)(r.outShape,"int32"),u=r.strideHeight,l=r.strideWidth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=r.padInfo.top,m=r.padInfo.left,g=(0,t.f3b)(n,s,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const s=n*u-f;let y=s;for(;y<0;)y+=c;const b=Math.min(r.inHeight,p+s);for(let u=0;u<r.outWidth;++u){const p=u*l-m;let f=p;for(;f<0;)f+=h;const x=Math.min(r.inWidth,d+p);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=c){const o=n-s;for(let s=f;s<x;s+=h){const u=s-p,l=g.get(e,n,s,t);l>w&&(w=l,v=a?i?((e*r.inHeight+n)*r.inWidth+s)*r.inChannels+t:(n*r.inWidth+s)*r.inChannels+t:o*d+u)}}o.set(v,e,n,u,t)}}return o}function fh(e,n,s,r,a,i){const o=a.strideDepth,u=a.strideHeight,l=a.strideWidth,c=a.dilationDepth,h=a.dilationHeight,p=a.dilationWidth,d=a.effectiveFilterDepth,f=a.effectiveFilterHeight,m=a.effectiveFilterWidth,g=a.padInfo.front,y=a.padInfo.top,b=a.padInfo.left,x="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=(0,t.f3b)(a.outShape,s),v=w.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[2]*a.outShape[3]*a.outShape[4],S=a.outShape[3]*a.outShape[4],N=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,s=t*r[0];for(let t=0;t<a.inChannels;++t)for(let w=0;w<a.outDepth;++w){const k=w*o-g;let T=k;for(;T<0;)T+=c;const C=Math.min(a.inDepth,d+k),$=n+w*I;for(let n=0;n<a.outHeight;++n){const o=n*u-y;let d=o;for(;d<0;)d+=h;const g=Math.min(a.inHeight,f+o),w=$+n*S;for(let n=0;n<a.outWidth;++n){const o=n*l-b;let u=o;for(;u<0;)u+=p;const f=Math.min(a.inWidth,m+o),y=w+n*N;let k=x,I=0,S=0;for(let n=T;n<C;n+=c){const a=s+n*r[1];for(let n=d;n<g;n+=h){const s=a+n*r[2];for(let n=u;n<f;n+=p){const a=e[s+n*r[3]+t];if("max"===i&&a>k?k=a:"avg"===i&&(I+=a,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}v[y+t]="avg"===i?I/S:k}}}}return w}const mh={kernelName:t.JhU,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n;Zl(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=t.Wap.computePool2DInfo(a.shape,i,o,1,u,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&t.D5U.arraysEqual(c.inShape,c.outShape))h=ac({inputs:{x:a},backend:s});else{const e=s.data.get(a.dataId).values,n=t.D5U.computeStrides(a.shape),r=ph(e,a.shape,a.dtype,n,c,"avg");h=s.makeTensorInfo(c.outShape,a.dtype,r.values)}return h}},gh={kernelName:t._k9,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=r;Zl(a,"avgPool3d");const h=t.Wap.computePool3DInfo(a.shape,i,o,1,u,l,c),p=fh(s.data.get(a.dataId).values,a.shape,a.dtype,t.D5U.computeStrides(a.shape),h,"avg");return s.makeTensorInfo(p.shape,"float32",p.values)}},yh={kernelName:t.IMb,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i}=n,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r;Zl([a,i],"avgPool3DGrad");const h=t.Wap.computePool3DInfo(i.shape,o,u,1,l,c),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=h.dilationDepth,x=h.dilationHeight,w=h.dilationWidth,v=h.effectiveFilterDepth,k=h.effectiveFilterHeight,I=h.effectiveFilterWidth,S=v-1-h.padInfo.front,N=I-1-h.padInfo.left,T=k-1-h.padInfo.top,C=(0,t.f3b)(i.shape,"float32"),$=1/(m*g*y),E=s.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let r=0;r<h.inWidth;++r){const a=n-S,i=s-T,o=r-N;let u=0;for(let n=0;n<v;n+=b){const s=(a+n)/p;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=x){const r=(i+n)/d;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let n=0;n<I;n+=w){const a=(o+n)/f;a<0||a>=h.outWidth||Math.floor(a)!==a||(u+=E.get(e,s,r,a,t))}}}C.set(u*$,e,n,s,r,t)}return s.makeTensorInfo(C.shape,C.dtype,C.values)}},bh={kernelName:t.ROF,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i}=n,o=i;Zl([a,i],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,h=t.Wap.computePool2DInfo(o.shape,u,l,1,c),p=h.strideHeight,d=h.strideWidth,f=h.filterHeight,m=h.filterWidth,g=h.dilationHeight,y=h.dilationWidth,b=h.effectiveFilterHeight,x=h.effectiveFilterWidth,w=x-1-h.padInfo.left,v=b-1-h.padInfo.top,k=(0,t.f3b)(o.shape,"float32"),I=1/(f*m),S=s.data.get(a.dataId).values,N=(0,t.f3b)(a.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let s=0;s<h.inWidth;++s){const r=n-v,a=s-w;let i=0;for(let n=0;n<b;n+=g){const s=(r+n)/p;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let n=0;n<x;n+=y){const r=(a+n)/d;r<0||r>=h.outWidth||Math.floor(r)!==r||(i+=N.get(e,s,r,t))}}k.set(i*I,e,n,s,t)}return s.makeTensorInfo(k.shape,k.dtype,k.values)}},xh={kernelName:t.sHE,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,scale:i,offset:o,mean:u,variance:l}=n;t.D5U.assert(u.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),t.D5U.assert(null==o||u.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),t.D5U.assert(null==i||u.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Zl([a,u,l,i,o],"batchNorm");let{varianceEpsilon:c}=r;null==c&&(c=.001);const h=s.data.get(a.dataId).values,p=s.data.get(u.dataId).values,d=s.data.get(l.dataId).values,f=i?s.data.get(i.dataId).values:new Float32Array([1]),m=o?s.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let v=0,k=0,I=0,S=0;for(let e=0;e<h.length;++e)g[e]=m[v++]+(h[e]-p[k++])*f[I++]/Math.sqrt(d[S++]+c),v>=y&&(v=0),k>=w&&(k=0),I>=b&&(I=0),S>=x&&(S=0);return s.makeTensorInfo(a.shape,a.dtype,g)}};function wh(e,n,s,r,a){const i=t.kuN.isSliceContinous(r,n,s),o=t.D5U.sizeFromShape(s),u=t.D5U.computeStrides(r);if(i){const s=t.kuN.computeFlatOffset(n,u);return"string"===a?e.slice(s,s+o):e.subarray(s,s+o)}const l="string"===a?t.Wap.fromUint8ToStringArray(e):e,c=(0,t.f3b)(r,a,l),h=(0,t.f3b)(s,a);for(let e=0;e<h.size;++e){const t=h.indexToLoc(e),s=t.map(((e,t)=>e+n[t]));h.set(c.get(...s),...t)}return"string"===a?t.Wap.fromStringArrayToUint8(h.values):h.values}function vh(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{begin:i,size:o}=r;Zl(a,"slice");const[u,l]=t.kuN.parseSliceParams(a,i,o);t.kuN.assertParamsValid(a,u,l);const c=wh(s.data.get(a.dataId).values,u,l,a.shape,a.dtype);return s.makeTensorInfo(l,a.dtype,c)}const kh={kernelName:t.p2w,backendName:"cpu",kernelFunc:vh},Ih={kernelName:t.zws,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{blockShape:i,crops:o}=r;Zl([a],"batchToSpaceND");const u=i.reduce(((e,t)=>e*t)),l=t.Wap.getReshaped(a.shape,i,u),c=t.Wap.getPermuted(l.length,i.length),h=t.Wap.getReshapedPermuted(a.shape,i,u),p=t.Wap.getSliceBeginCoords(o,i.length),d=t.Wap.getSliceSize(h,o,i.length),f=Mc({inputs:{x:a},backend:s,attrs:{shape:l}}),m=Kc({inputs:{x:f},backend:s,attrs:{perm:c}}),g=Mc({inputs:{x:m},backend:s,attrs:{shape:h}}),y=vh({inputs:{x:g},backend:s,attrs:{begin:p,size:d}});return s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),y}};function Sh(e,n,s,r,a){const i=t.D5U.sizeFromShape(r),o=t.D5U.makeZerosTypedArray(a,s);for(let t=0;t<e.length;t++){const s=e[t];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(o[s]+=i>0?n[t]:1)}return o}function Nh(e,n,s,r=!1){const a=e.shape[0],i=e.shape[1],o=(0,t.f3b)([a,s],n.dtype);for(let t=0;t<a;t++)for(let a=0;a<i;a++){const i=e.get(t,a);if(i<0)throw new Error("Input x must be non-negative!");i>=s||(r?o.set(1,t,i):n.size>0?o.set(o.get(t,i)+n.get(t,a),t,i):o.set(o.get(t,i)+1,t,i))}return o}const Th={kernelName:t.zvY,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=Sh(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},Ch={kernelName:t.eEB,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{s0:r,s1:a}=n,i=s.data.get(r.dataId).values,o=s.data.get(a.dataId).values,u=t.Wap.assertAndGetBroadcastShape(Array.from(i),Array.from(o));return s.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},$h=yc((e=>Math.ceil(e))),Eh=nc(t.gJX,$h),Ah={kernelName:t.gJX,backendName:"cpu",kernelFunc:Eh},Dh=tc(t.xnO,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),Rh={kernelName:t.xnO,backendName:"cpu",kernelFunc:Dh},_h={kernelName:t.yj2,backendName:"cpu",kernelFunc:e=>{const{x:n}=e.inputs,s=e.backend,r=new Float32Array(t.D5U.sizeFromShape(n.shape)),a=s.data.get(n.dataId),i=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,u=s.data.get(i.dataId).values,l=s.data.get(o.dataId).values;for(let e=0;e<u.length;e++){const t=u[e],n=l[e];r[e]=Math.hypot(t,n)}return s.makeOutput(r,n.shape,"float32")}};function Fh(e,n,s,r){const a=t.D5U.getArrayFromDType(s,t.D5U.sizeFromShape(n));if(r&&"string"!==s){let n=0;e.forEach((e=>{const s=t.D5U.sizeFromShape(e.shape);a.set(e.vals,n),n+=s}))}else{let r=0;e.forEach((e=>{const i="string"===s?t.Wap.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let t=0;t<e.shape[0];++t){const s=t*n[1]+r;for(let t=0;t<e.shape[1];++t)a[s+t]=i[o++]}r+=e.shape[1]}))}return a}function Oh(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Mh={kernelName:t.J_u,backendName:"cpu",kernelFunc:Oh};function Lh(e){const{inputs:n,backend:s,attrs:r}=e,{axis:a}=r,i=t.D5U.parseAxisParam(a,n[0].shape)[0],o=n.map((e=>e.shape));t.Wap.assertParamsConsistent(o,i);let u=t.Wap.computeOutShape(n.map((e=>e.shape)),i);if(0===t.D5U.sizeFromShape(u))return s.makeTensorInfo(u,n[0].dtype,[]);const l=n.filter((e=>t.D5U.sizeFromShape(e.shape)>0));if(1===l.length)return ac({inputs:{x:l[0]},backend:s});if("complex64"===l[0].dtype){const e=l.map((e=>Nc({inputs:{input:e},backend:s}))),t=l.map((e=>Oh({inputs:{input:e},backend:s}))),n=Lh({inputs:e,backend:s,attrs:{axis:i}}),r=Lh({inputs:t,backend:s,attrs:{axis:i}}),a=kc({inputs:{real:n,imag:r},backend:s});return e.forEach((e=>s.disposeIntermediateTensorInfo(e))),t.forEach((e=>s.disposeIntermediateTensorInfo(e))),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),a}const c=l.map((e=>{const n=t.D5U.sizeFromShape(e.shape.slice(i));return Mc({inputs:{x:e},backend:s,attrs:{shape:[-1,n]}})})),h=c.map((e=>({vals:s.data.get(e.dataId).values,shape:e.shape})));u=t.Wap.computeOutShape(c.map((e=>e.shape)),1);const p=1===c[0].shape[0],d=Fh(h,u,n[0].dtype,p),f=t.Wap.computeOutShape(l.map((e=>e.shape)),i),m=s.makeTensorInfo(f,n[0].dtype,d);return c.forEach((e=>s.disposeIntermediateTensorInfo(e))),m}const Bh={kernelName:t.Eh3,backendName:"cpu",kernelFunc:Lh};function zh(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dataFormat:l,dilations:c,dimRoundingMode:h}=r;Zl([a,i],"conv2d");const p=t.Wap.convertConv2DDataFormat(l),d=t.Wap.computeConv2DInfo(a.shape,i.shape,o,c,u,h,!1,p),f=d.filterHeight,m=d.filterWidth,g=d.dilationHeight,y=d.dilationWidth,b=d.padInfo.left,x=d.padInfo.top,w="channelsLast"===d.dataFormat,v=new t.YDk(d.outShape,a.dtype),k=t.D5U.computeStrides(a.shape),I=t.D5U.computeStrides(i.shape),S=k[0],N=w?k[1]:k[2],T=w?k[2]:1,C=w?1:k[1],$=v.strides[0],E=w?v.strides[1]:v.strides[2],A=w?v.strides[2]:1,D=w?1:v.strides[1],R=s.data.get(a.dataId).values,_=s.data.get(i.dataId).values,F=v.values;for(let e=0;e<d.batchSize;++e){const t=e*S,n=e*$;for(let e=0;e<d.outHeight;++e){const s=n+e*E,r=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*I[0],i=t+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*A,n=e*d.strideWidth-b;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=i+s*T;let o=a+e*I[1];for(let e=0;e<d.inChannels;++e){const n=R[r+e*C];for(let e=0;e<d.outChannels;++e)F[t+e*D]+=n*_[o+e];o+=d.outChannels}}}}}}return s.makeTensorInfo(v.shape,v.dtype,F)}const Uh={kernelName:t.mhS,backendName:"cpu",kernelFunc:zh},Wh={kernelName:t.wUP,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,dy:i}=n,{strides:o,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:h}=r;Zl([a,i],"conv2dBackpropFilter");const p=t.Wap.convertConv2DDataFormat(l),d=t.Wap.computeConv2DInfo(a.shape,h,o,1,u,c,!1,p),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=d,b="channelsLast"===d.dataFormat,x=new t.YDk(d.filterShape,"float32"),w=d.padInfo.left,v=d.padInfo.top,k=s.data.get(a.dataId).values,I=s.data.get(i.dataId).values,S=new t.YDk(a.shape,a.dtype,k),N=new t.YDk(i.shape,i.dtype,I);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((v-e)/f)),n=Math.min(d.outHeight,(d.inHeight+v-e)/f);for(let s=0;s<y;++s){const r=Math.max(0,Math.ceil((w-s)/m)),a=Math.min(d.outWidth,(d.inWidth+w-s)/m);for(let i=0;i<d.inChannels;++i)for(let o=0;o<d.outChannels;++o){let u=0;for(let l=0;l<d.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*f-v;for(let e=r;e<a;++e){const n=s+e*m-w;u+=b?S.get(l,t,n,i)*N.get(l,c,e,o):S.get(l,i,t,n)*N.get(l,o,c,e)}}x.set(u,e,s,i,o)}}}return s.makeTensorInfo(x.shape,x.dtype,x.values)}},Ph={kernelName:t.wm,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,filter:i}=n,{inputShape:o,strides:u,pad:l,dataFormat:c,dimRoundingMode:h}=r;Zl([a,i],"conv2dBackpropInput");const p=t.D5U.computeStrides(i.shape),d=t.D5U.computeStrides(a.shape);let f=t.Wap.convertConv2DDataFormat(c);const m=t.Wap.computeConv2DInfo(o,i.shape,u,1,l,h,!1,f),g=new t.YDk(m.inShape,"float32"),y=g.values,b=s.data.get(a.dataId).values,x=s.data.get(i.dataId).values,[w,v,k]=p,{batchSize:I,filterHeight:S,filterWidth:N,inChannels:T,inHeight:C,inWidth:$,outChannels:E,outHeight:A,outWidth:D,strideHeight:R,strideWidth:_}=m;f=m.dataFormat;const F=S-1-m.padInfo.top,O=N-1-m.padInfo.left,M="channelsLast"===f,L=g.strides[0],B=M?g.strides[1]:g.strides[2],z=M?g.strides[2]:1,U=M?1:g.strides[1],W=d[0],P=M?d[1]:d[2],V=M?d[2]:1,G=M?1:d[1];for(let e=0;e<I;++e)for(let t=0;t<T;++t)for(let n=0;n<C;++n){const s=n-F,r=Math.max(0,Math.ceil(s/R)),a=Math.min(A,(S+s)/R);for(let i=0;i<$;++i){const o=i-O,u=Math.max(0,Math.ceil(o/_)),l=Math.min(D,(N+o)/_);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=u;s<l;++s){const a=W*e+P*n+V*s,i=w*(S-1-r)+v*(N-1-(s*_-o))+k*t;for(let e=0;e<E;++e)c+=b[a+G*e]*x[i+e]}}y[L*e+B*n+z*i+U*t]=c}}return s.makeTensorInfo(g.shape,g.dtype,g.values)}},Vh={kernelName:t.x12,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dilations:l}=r;Zl([a,i],"conv3d");const c=t.Wap.computeConv3DInfo(a.shape,i.shape,o,l,u),{filterDepth:h,filterHeight:p,filterWidth:d,dilationDepth:f,dilationHeight:m,dilationWidth:g,padInfo:y}=c,b=y.front,x=y.left,w=y.top,v=new t.YDk(c.outShape,a.dtype),k=s.data.get(a.dataId).values,I=s.data.get(i.dataId).values,S=v.values,N=t.D5U.computeStrides(a.shape),T=t.D5U.computeStrides(i.shape);for(let e=0;e<c.batchSize;++e){const t=e*N[0],n=e*v.strides[0];for(let e=0;e<c.outDepth;++e){const s=n+e*v.strides[1],r=e*c.strideDepth-b;for(let e=0;e<h;++e){const n=r+e*f;if(n<0||n>=c.inDepth)continue;const a=e*T[0],i=t+n*N[1];for(let e=0;e<c.outHeight;++e){const t=s+e*v.strides[2],n=e*c.strideHeight-w;for(let e=0;e<p;++e){const s=n+e*m;if(s<0||s>=c.inHeight)continue;const r=a+e*T[1],o=i+s*N[2];for(let e=0;e<c.outWidth;++e){const n=t+e*c.outChannels,s=e*c.strideWidth-x;for(let e=0;e<d;++e){const t=s+e*g;if(t<0||t>=c.inWidth)continue;const a=r+e*T[2],i=o+t*c.inChannels;let u=a;for(let e=0;e<c.inChannels;++e){const t=k[i+e];for(let e=0;e<c.outChannels;++e)S[n+e]+=t*I[u+e];u+=c.outChannels}}}}}}}}return s.makeTensorInfo(v.shape,v.dtype,v.values)}},Gh={kernelName:t.o2y,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,dy:i}=n,{strides:o,pad:u,filterShape:l}=r;Zl([a,i],"conv3dBackpropFilterV2");const c=t.D5U.computeStrides(a.shape),h=t.D5U.computeStrides(i.shape),p=t.Wap.computeConv3DInfo(a.shape,l,o,1,u),d=p.strideDepth,f=p.strideHeight,m=p.strideWidth,g=p.filterDepth,y=p.filterHeight,b=p.filterWidth,x=new t.YDk(p.filterShape,"float32"),w=x.values,[v,k,I,S]=x.strides,N=s.data.get(i.dataId).values,[T,C,$,E]=h,A=s.data.get(a.dataId).values,[D,R,_,F]=c,O=p.padInfo.front,M=p.padInfo.left,L=p.padInfo.top;for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((O-e)/d)),n=Math.min(p.outDepth,(p.inDepth+O-e)/d),s=e*v;for(let r=0;r<y;++r){const a=Math.max(0,Math.ceil((L-r)/f)),i=Math.min(p.outHeight,(p.inHeight+L-r)/f),o=r*k+s;for(let s=0;s<b;++s){const u=Math.max(0,Math.ceil((M-s)/m)),l=Math.min(p.outWidth,(p.inWidth+M-s)/m),c=s*I+o;for(let o=0;o<p.inChannels;++o){const h=o*S+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let h=0;h<p.batchSize;++h){const p=h*D,y=h*T;for(let h=t;h<n;++h){const t=(e+h*d-O)*R+p,n=h*C+y;for(let e=a;e<i;++e){const a=(r+e*f-L)*_+t,i=e*$+n;for(let e=u;e<l;++e){const t=e*E+i;g+=A[(s+e*m-M)*F+a+o]*N[t+c]}}}}w[h+c]=g}}}}}return s.makeTensorInfo(x.shape,x.dtype,x.values)}},Hh={kernelName:t.ik2,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,filter:i}=n,{pad:o,strides:u,inputShape:l}=r;Zl([a],"conv3dBackpropInputV2");const c=t.D5U.computeStrides(a.shape),h=t.D5U.computeStrides(i.shape),p=t.Wap.computeConv3DInfo(l,i.shape,u,1,o),d=new t.YDk(p.inShape,"float32"),f=d.values,[m,g,y,b]=d.strides,x=s.data.get(a.dataId).values,[w,v,k,I]=c,S=s.data.get(i.dataId).values,[N,T,C,$]=h,{batchSize:E,filterDepth:A,filterHeight:D,filterWidth:R,inChannels:_,inDepth:F,inHeight:O,inWidth:M,outChannels:L,outDepth:B,outHeight:z,outWidth:U,strideDepth:W,strideHeight:P,strideWidth:V}=p,G=A-1-p.padInfo.front,H=D-1-p.padInfo.top,j=R-1-p.padInfo.left;for(let e=0;e<E;++e)for(let t=0;t<_;++t)for(let n=0;n<F;++n){const s=n-G,r=Math.max(0,Math.ceil(s/W)),a=Math.min(B,(A+s)/W);for(let i=0;i<O;++i){const o=i-H,u=Math.max(0,Math.ceil(o/P)),l=Math.min(z,(D+o)/P);for(let c=0;c<M;++c){const h=c-j,p=Math.max(0,Math.ceil(h/V)),d=Math.min(U,(R+h)/V);let E=0;for(let n=r;n<a;++n){const r=n*W-s;for(let s=u;s<l;++s){const a=s*P-o;for(let i=p;i<d;++i){const o=w*e+v*n+k*s+I*i,u=N*(A-1-r)+T*(D-1-a)+C*(R-1-(i*V-h))+$*t;for(let e=0;e<L;++e)E+=x[o+e]*S[u+e]}}}f[m*e+g*n+y*i+b*c+t]=E}}}return s.makeTensorInfo(d.shape,d.dtype,d.values)}},jh=tc(t.mc4,(e=>Math.cos(e))),Xh={kernelName:t.mc4,backendName:"cpu",kernelFunc:jh},qh=tc(t.TR1,(e=>Math.cosh(e))),Kh={kernelName:t.TR1,backendName:"cpu",kernelFunc:qh},Yh={kernelName:t.VcC,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{image:a,boxes:i,boxInd:o}=n,{cropSize:u,method:l,extrapolationValue:c}=r,[h,p,d,f]=a.shape,m=i.shape[0],[g,y]=u,b=(0,t.f3b)([m,g,y,f],"float32"),x=s.data.get(i.dataId).values,w=s.data.get(o.dataId).values,v=s.data.get(a.dataId).values,k=t.D5U.computeStrides(a.shape),I=t.D5U.computeStrides(b.shape);for(let e=0;e<m;e++){const t=4*e,n=x[t],s=x[t+1],r=x[t+2],a=x[t+3],i=w[e];if(i>=h)continue;const o=g>1?(r-n)*(p-1)/(g-1):0,u=y>1?(a-s)*(d-1)/(y-1):0;for(let t=0;t<g;t++){const h=g>1?n*(p-1)+t*o:.5*(n+r)*(p-1);if(h<0||h>p-1)for(let n=0;n<y;n++)for(let s=0;s<f;s++){const r=s+n*I[2]+t*I[1]+e*I[0];b.values[r]=c}else if("bilinear"===l){const n=Math.floor(h),r=Math.ceil(h),o=h-n;for(let l=0;l<y;l++){const h=y>1?s*(d-1)+l*u:.5*(s+a)*(d-1);if(h<0||h>d-1){for(let n=0;n<f;n++){const s=n+l*I[2]+t*I[1]+e*I[0];b.values[s]=c}continue}const p=Math.floor(h),m=Math.ceil(h),g=h-p;for(let s=0;s<f;s++){let a=s+p*k[2]+n*k[1]+i*k[0];const u=v[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=v[a];a=s+p*k[2]+r*k[1]+i*k[0];const h=v[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*g,f=h+(v[a]-h)*g;a=s+l*I[2]+t*I[1]+e*I[0],b.values[a]=d+(f-d)*o}}}else for(let n=0;n<y;++n){const r=y>1?s*(d-1)+n*u:.5*(s+a)*(d-1);if(r<0||r>d-1){for(let s=0;s<f;s++){const r=s+n*I[2]+t*I[1]+e*I[0];b.values[r]=c}continue}const o=Math.round(r),l=Math.round(h);for(let s=0;s<f;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*I[2]+t*I[1]+e*I[0];b.values[a]=v[r]}}}}return s.makeTensorInfo(b.shape,b.dtype,b.values)}},Qh={kernelName:t.Byc,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,exclusive:o,reverse:u}=r;Zl(a,"cumprod");const l=t.Wap.getAxesPermutation([i],a.shape.length);let c=a;null!=l&&(c=Kc({inputs:{x:a},backend:s,attrs:{perm:l}}));const h=t.Wap.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const p=(0,t.x8V)(c.dtype,"int32"),d=t.D5U.makeOnesTypedArray(t.D5U.sizeFromShape(c.shape),p),f=s.data.get(c.dataId).values,m=c.shape[c.shape.length-1],g=u?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=o?1:f[n];else{const s=g(e,t-1);d[n]=o?f[s]*d[s]:f[n]*d[s]}}const y=s.makeTensorInfo(c.shape,p,d);if(null!=l){const e=Kc({inputs:{x:y},backend:s,attrs:{perm:t.Wap.getUndoAxesPermutation(l)}});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(c),e}return y}},Zh={kernelName:t.iHb,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,exclusive:o,reverse:u}=r;Zl(a,"cumsum");const l=t.Wap.getAxesPermutation([i],a.shape.length);let c=a;null!=l&&(c=Kc({inputs:{x:a},backend:s,attrs:{perm:l}}));const h=t.Wap.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const p=(0,t.x8V)(c.dtype,"int32"),d=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(c.shape),p),f=s.data.get(c.dataId).values,m=c.shape[c.shape.length-1],g=u?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=o?0:f[n];else{const s=g(e,t-1);d[n]=o?f[s]+d[s]:f[n]+d[s]}}const y=s.makeTensorInfo(c.shape,p,d);if(null!=l){const e=Kc({inputs:{x:y},backend:s,attrs:{perm:t.Wap.getUndoAxesPermutation(l)}});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(c),e}return y}},Jh={kernelName:t.QRR,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=Sh(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Nh(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},ep={kernelName:t.T0n,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{blockSize:i,dataFormat:o}=r;t.D5U.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const u=a.shape[0],l=a.shape[1],c=a.shape[2],h=a.shape[3],p=l*i,d=c*i,f=h/(i*i),m=s.data.get(a.dataId).values,g=new Float32Array(u*p*d*f);let y=0;for(let e=0;e<u;++e)for(let t=0;t<p;++t){const n=Math.floor(t/i),s=t%i;for(let t=0;t<d;++t){const r=Math.floor(t/i),a=(s*i+t%i)*f;for(let t=0;t<f;++t){const s=t+a+h*(r+c*(n+l*e));g[y++]=m[s]}}}return s.makeTensorInfo([u,p,d,f],a.dtype,g)}};function tp(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=r;Zl([a,i],"depthwiseConv2DNative");const h=t.D5U.computeStrides(a.shape),p=t.D5U.computeStrides(i.shape);let d=l;null==d&&(d=[1,1]),t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const f=t.Wap.computeConv2DInfo(a.shape,i.shape,o,d,u,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,w=x.left,v=x.top,k=f.outChannels/f.inChannels,I=new t.YDk(f.outShape,a.dtype),S=s.data.get(a.dataId).values,N=s.data.get(i.dataId).values,T=I.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*I.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*I.strides[1],r=e*f.strideHeight-v;for(let e=0;e<m;++e){const n=r+e*y;if(n<0||n>=f.inHeight)continue;const a=e*p[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*I.strides[2],n=e*f.strideWidth-w;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const r=a+e*p[1],o=i+s*f.inChannels;let u=t,l=r;for(let e=0;e<f.inChannels;++e){const t=S[o+e];for(let e=0;e<k;++e)T[u+e]+=t*N[l+e];u+=k,l+=k}}}}}}return s.makeTensorInfo(I.shape,I.dtype,I.values)}const np={kernelName:t.cie,backendName:"cpu",kernelFunc:tp},sp={kernelName:t.sL$,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,dy:i}=n,{strides:o,dilations:u,pad:l,dimRoundingMode:c,filterShape:h}=r;Zl([a,i],"depthwiseConv2dNativeBackpropFilter");const p=t.Wap.computeConv2DInfo(a.shape,h,o,u,l,c,!0),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y=new t.YDk(p.filterShape,"float32"),b=p.padInfo.left,x=p.padInfo.top,w=p.outChannels/p.inChannels,v=s.data.get(a.dataId).values,k=new t.YDk(a.shape,a.dtype,v),I=s.data.get(i.dataId).values,S=new t.YDk(i.shape,i.dtype,I);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((x-e)/d)),n=Math.min(p.outHeight,(p.inHeight+x-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((b-s)/f)),a=Math.min(p.outWidth,(p.inWidth+b-s)/f);for(let i=0;i<p.outChannels;++i){const o=Math.trunc(i/w),u=i%w;let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-x;for(let e=r;e<a;++e){const n=s+e*f-b;l+=k.get(u,t,n,o)*S.get(u,c,e,i)}}y.set(l,e,s,o,u)}}}return s.makeTensorInfo(y.shape,y.dtype,y.values)}},rp={kernelName:t.y7R,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,filter:i}=n,{strides:o,dilations:u,pad:l,dimRoundingMode:c,inputShape:h}=r;Zl([a,i],"depthwiseConv2DNativeBackpropInput");const p=t.D5U.computeStrides(a.shape),d=t.D5U.computeStrides(i.shape),f=t.Wap.computeConv2DInfo(h,i.shape,o,u,l,c,!0),m=new t.YDk(f.inShape,"float32"),g=m.values,[y,b,x]=m.strides,w=s.data.get(a.dataId).values,[v,k,I]=p,S=s.data.get(i.dataId).values,[N,T,C]=d,{batchSize:$,filterHeight:E,filterWidth:A,inChannels:D,inHeight:R,inWidth:_,outChannels:F,outHeight:O,outWidth:M,strideHeight:L,strideWidth:B}=f,z=E-1-f.padInfo.top,U=A-1-f.padInfo.left,W=F/D;for(let e=0;e<$;++e)for(let t=0;t<D;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/L)),a=Math.min(O,(E+s)/L);for(let i=0;i<_;++i){const o=i-U,u=Math.max(0,Math.ceil(o/B)),l=Math.min(M,(A+o)/B);let c=0;for(let n=r;n<a;++n){const r=n*L-s;for(let s=u;s<l;++s){const a=v*e+k*n+I*s,i=N*(E-1-r)+T*(A-1-(s*B-o))+C*t;for(let e=0;e<W;++e)c+=w[a+(t*W+e)]*S[i+e]}}g[y*e+b*n+x*i+t]=c}}return s.makeTensorInfo(m.shape,m.dtype,m.values)}},ap={kernelName:t.$w,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{x:r}=n,a=t.D5U.sizeFromShape(r.shape),i=s.data.get(r.dataId).values,o=(0,t.f3b)([a,a],r.dtype),u=o.values;for(let e=0;e<i.length;e++)u[e*a+e]=i[e];const l=[...r.shape,...r.shape];return s.makeTensorInfo(l,o.dtype,o.values)}},ip={kernelName:t.p4S,backendName:"cpu",kernelFunc:({inputs:e,backend:n,attrs:s})=>{const{x:r,filter:a}=e,{strides:i,pad:o,dilations:u}=s,l=n,c=l.data.get(r.dataId).values,h=r.shape.length,p=l.data.get(a.dataId).values,d=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:k,filterHeight:I,filterWidth:S,dilationHeight:N,dilationWidth:T,outShape:C}=t.Wap.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",u),$=t.D5U.sizeFromShape(C),E=C.length,A=t.D5U.getArrayFromDType(r.dtype,$);for(let e=0;e<f;++e)for(let n=0;n<b;++n){const s=n*v-w.top;for(let i=0;i<x;++i){const o=i*k-w.left;for(let u=0;u<y;++u){let l=Number.MIN_SAFE_INTEGER;for(let n=0;n<I;++n){const i=s+n*N;if(i>=0&&i<m)for(let s=0;s<S;++s){const f=o+s*T;if(f>=0&&f<g){const o=t.D5U.locToIndex([e,i,f,u],h,t.D5U.computeStrides(r.shape)),m=t.D5U.locToIndex([n,s,u],d,t.D5U.computeStrides(a.shape)),g=c[o]+p[m];g>l&&(l=g)}}}A[t.D5U.locToIndex([e,n,i,u],E,t.D5U.computeStrides(C))]=l}}}return{dataId:l.write(t.D5U.toTypedArray(A,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},op={kernelName:t.Vn9,backendName:"cpu",kernelFunc:({inputs:e,backend:n,attrs:s})=>{const{x:r,filter:a,dy:i}=e,{strides:o,pad:u,dilations:l}=s,c=n,h=t.D5U.toNestedArray(r.shape,c.data.get(r.dataId).values),p=t.D5U.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=t.Wap.computeDilation2DInfo(r.shape,a.shape,o,u,"NHWC",l);t.D5U.assert(i.rank===T.length,(()=>`Error in ${t.Vn9}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=t.D5U.toNestedArray(T,c.data.get(i.dataId).values),$=t.D5U.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const r=s*v-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<I;++n){const l=r+n*N;if(l>=0&&l<m){const r=h[e][s][l][a]+p[t][n][a];r>i&&(i=r,o=t,u=n)}}}$[o][u][a]+=C[e][t][s][a]}}}return{dataId:c.write(t.D5U.toTypedArray($,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},up={kernelName:t.ekb,backendName:"cpu",kernelFunc:({inputs:e,backend:n,attrs:s})=>{const{x:r,filter:a,dy:i}=e,{strides:o,pad:u,dilations:l}=s,c=n,h=t.D5U.toNestedArray(r.shape,c.data.get(r.dataId).values),p=t.D5U.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=t.Wap.computeDilation2DInfo(r.shape,a.shape,o,u,"NHWC",l);t.D5U.assert(i.rank===T.length,(()=>`Error in ${t.ekb}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=t.D5U.toNestedArray(T,c.data.get(i.dataId).values),$=t.D5U.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const r=s*v-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<I;++n){const l=r+n*N;if(l>=0&&l<m){const r=h[e][s][l][a]+p[t][n][a];r>i&&(i=r,o=s,u=l)}}}$[e][o][u][a]+=C[e][t][s][a]}}}return{dataId:c.write(t.D5U.toTypedArray($,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},lp=lc(((e,t)=>e*t)),cp=Dc(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),hp=Ac(t.wYn,lp,cp),pp={kernelName:t.wYn,backendName:"cpu",kernelFunc:hp};function dp(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r;let u;Zl(a,"sum"),u="bool"===a.dtype?$c({inputs:{x:a},backend:s,attrs:{dtype:"int32"}}):ac({inputs:{x:a},backend:s});const l=u.shape.length,c=t.D5U.parseAxisParam(i,u.shape),h=t.Wap.getAxesPermutation(c,l);let p=c,d=u;null!=h&&(d=Kc({inputs:{x:u},backend:s,attrs:{perm:h}}),p=t.Wap.getInnerMostAxes(p.length,l)),t.Wap.assertAxesAreInnerMostDims("sum",p,d.shape.length);const[f,m]=t.Wap.computeOutAndReduceShapes(d.shape,p);let g=Sc(s,f,t.Wap.upcastType(d.dtype,"int32"));const y=t.D5U.sizeFromShape(m),b=s.data.get(g.dataId).values,x=s.data.get(d.dataId).values;for(let e=0;e<b.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=x[t+e];b[e]=n}if(o){const e=g;g=Mc({inputs:{x:g},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(g.shape,c)}}),s.disposeIntermediateTensorInfo(e)}return s.disposeIntermediateTensorInfo(u),null!=h&&s.disposeIntermediateTensorInfo(d),g}const fp={kernelName:t.GBy,backendName:"cpu",kernelFunc:dp},mp={kernelName:t.$g6,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{equation:a}=r,i=n,{allDims:o,summedDims:u,idDims:l}=t.Wap.decodeEinsumEquation(a,i.length);t.Wap.checkEinsumDimSizes(o.length,l,i);const{path:c,steps:h}=t.Wap.getEinsumComputePath(u,l),p=h.length;let d=null,f=o.length;const m=[];for(let e=0;e<p;++e){for(const n of h[e]){const{permutationIndices:e,expandDims:r}=t.Wap.getEinsumPermutation(f,l[n]);let a;t.Wap.isIdentityPermutation(e)?a=i[n]:(a=Kc({inputs:{x:i[n]},backend:s,attrs:{perm:e}}),m.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);t.D5U.arraysEqual(a.shape,o)||(a=Mc({inputs:{x:a},backend:s,attrs:{shape:o}}),m.push(a)),null===d?d=a:(d=hp({inputs:{a,b:d},backend:s}),m.push(d))}e<p-1&&(c[e]>=0&&(d=dp({inputs:{x:d},backend:s,attrs:{axis:c[e]-(o.length-f),keepDims:!1}}),m.push(d)),f--)}for(const e of m)e!==d&&s.disposeIntermediateTensorInfo(e);return d}},gp={kernelName:t.HEU,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{dy:r,y:a}=n;Zl([r,a],"eluGrad");const i=new Float32Array(t.D5U.sizeFromShape(a.shape)),o=s.data.get(a.dataId).values,u=s.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];i[e]=t>=1?u[e]:u[e]*(t+1)}return s.makeTensorInfo(a.shape,"float32",i)}},yp=lc(((e,t)=>e===t?1:0)),bp=Ac(t.hdR,yp,null,"bool"),xp={kernelName:t.hdR,backendName:"cpu",kernelFunc:bp},wp=t.Wap.ERF_P,vp=t.Wap.ERF_A1,kp=t.Wap.ERF_A2,Ip=t.Wap.ERF_A3,Sp=t.Wap.ERF_A4,Np=t.Wap.ERF_A5,Tp=tc(t.Omj,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+wp*n);return t*(1-((((Np*s+Sp)*s+Ip)*s+kp)*s+vp)*s*Math.exp(-n*n))})),Cp={kernelName:t.Omj,backendName:"cpu",kernelFunc:Tp},$p=yc((e=>Math.exp(e))),Ep=nc(t.NEP,$p,"float32"),Ap={kernelName:t.NEP,backendName:"cpu",kernelFunc:Ep};function Dp(e){const{inputs:n,backend:s,attrs:r}=e,{input:a}=n,{dim:i}=r,o=a.shape.length,u=a.shape.slice();let l=i;return i<0&&(t.D5U.assert(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+i+1),u.splice(l,0,1),Mc({inputs:{x:a},backend:s,attrs:{shape:u}})}const Rp={kernelName:t.YFo,backendName:"cpu",kernelFunc:Dp},_p=yc((e=>Math.expm1(e))),Fp=nc(t.Y0y,_p),Op={kernelName:t.Y0y,backendName:"cpu",kernelFunc:Fp},Mp=lc(((e,t)=>e/t)),Lp=Ac(t.oHH,Mp),Bp={kernelName:t.oHH,backendName:"cpu",kernelFunc:Lp},zp=lc(((e,t)=>e-t)),Up=Dc(((e,t,n,s)=>({real:e-n,imag:t-s}))),Wp=Ac(t.Tr8,zp,Up),Pp={kernelName:t.Tr8,backendName:"cpu",kernelFunc:Wp};function Vp(e,n,s){const r=e.shape,a=r[0],i=r[1],o=s.data.get(e.dataId),u=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,c=[a,i],h=t.D5U.sizeFromShape(c),p=t.D5U.getTypedArrayFromDType("float32",h),d=t.D5U.getTypedArrayFromDType("float32",h);for(let e=0;e<a;e++){const r=vh({inputs:{x:u},backend:s,attrs:{begin:[e,0],size:[1,i]}}),a=vh({inputs:{x:l},backend:s,attrs:{begin:[e,0],size:[1,i]}}),o=kc({inputs:{real:r,imag:a},backend:s}),{real:c,imag:h}=Gp(o,n,s),f=t.Wap.mergeRealAndImagArrays(c,h);for(let n=0;n<i;n++){const s=t.Wap.getComplexWithIndex(f,n);p[e*i+n]=s.real,d[e*i+n]=s.imag}s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o)}const f=s.makeTensorInfo(c,"float32",p),m=s.makeTensorInfo(c,"float32",d),g=kc({inputs:{real:f,imag:m},backend:s});return s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(m),g}function Gp(e,n,s){const r=t.D5U.sizeFromShape(e.shape),a=s.data.get(e.dataId),i=s.data.get(a.complexTensorInfos.real.dataId).values,o=s.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((u=r)&u-1)){const a=Hp(i,o,r,n,s),u=[e.shape[0],e.shape[1]];if(n){const e=s.makeTensorInfo(u,"float32",a.real),n=s.makeTensorInfo(u,"float32",a.imag),i=s.makeTensorInfo([],"float32",t.D5U.createScalarValue(r,"float32")),o=ac({inputs:{x:i},backend:s}),l=Bp.kernelFunc({inputs:{a:e,b:i},backend:s}),c=Bp.kernelFunc({inputs:{a:n,b:o},backend:s}),h=s.data.get(l.dataId).values,p=s.data.get(c.dataId).values;return s.disposeIntermediateTensorInfo(e),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(l),s.disposeIntermediateTensorInfo(c),{real:h,imag:p}}return a}{const e=function(e,n,s){const r=new Float32Array(2*n);for(let a=0;a<n;a++){let i=0,o=0;for(let r=0;r<n;r++){const u=t.Wap.exponent(a*r,n,s),l=t.Wap.getComplexWithIndex(e,r);i+=l.real*u.real-l.imag*u.imag,o+=l.real*u.imag+l.imag*u.real}s&&(i/=n,o/=n),t.Wap.assignToTypedArray(r,i,o,a)}return r}(t.Wap.mergeRealAndImagArrays(i,o),r,n);return t.Wap.splitRealAndImagArrays(e)}var u}function Hp(e,n,s,r,a){if(1===s)return{real:e,imag:n};const i=t.Wap.mergeRealAndImagArrays(e,n),o=s/2,u=t.Wap.complexWithEvenIndex(i),l=u.real,c=u.imag,h=[l.length],p=a.makeTensorInfo(h,"float32",l),d=a.makeTensorInfo(h,"float32",c),f=kc({inputs:{real:p,imag:d},backend:a}),m=t.Wap.complexWithOddIndex(i),g=m.real,y=m.imag,b=[g.length],x=a.makeTensorInfo(b,"float32",g),w=a.makeTensorInfo(b,"float32",y),v=kc({inputs:{real:x,imag:w},backend:a}),k=Hp(l,c,o,r,a),I=k.real,S=k.imag,N=[I.length],T=a.makeTensorInfo(N,"float32",I),C=a.makeTensorInfo(N,"float32",S),$=kc({inputs:{real:T,imag:C},backend:a}),E=Hp(g,y,o,r,a),A=E.real,D=E.imag,R=[A.length],_=a.makeTensorInfo(R,"float32",A),F=a.makeTensorInfo(R,"float32",D),O=kc({inputs:{real:_,imag:F},backend:a}),M=t.Wap.exponents(s,r),L=[M.real.length],B=a.makeTensorInfo(L,"float32",M.real),z=a.makeTensorInfo(L,"float32",M.imag),U=kc({inputs:{real:B,imag:z},backend:a}),W=hp({inputs:{a:U,b:O},backend:a}),P=Fc({inputs:{a:$,b:W},backend:a}),V=Wp({inputs:{a:$,b:W},backend:a}),G=Nc({inputs:{input:P},backend:a}),H=Nc({inputs:{input:V},backend:a}),j=Oh({inputs:{input:P},backend:a}),X=Oh({inputs:{input:V},backend:a}),q=Lh({inputs:[G,H],backend:a,attrs:{axis:0}}),K=Lh({inputs:[j,X],backend:a,attrs:{axis:0}}),Y=a.data.get(q.dataId).values,Q=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(C),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(K),{real:Y,imag:Q}}const jp={kernelName:t.vwp,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{input:r}=n,a=t.D5U.sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=Mc({inputs:{x:r},backend:s,attrs:{shape:[a/i,i]}}),u=Vp(o,!1,s),l=Mc({inputs:{x:u},backend:s,attrs:{shape:r.shape}});return s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(u),l}};function Xp(e){const{backend:n,attrs:s}=e,{shape:r,value:a,dtype:i}=s,o=i||t.D5U.inferDtype(a),u=t.D5U.getArrayFromDType(o,t.D5U.sizeFromShape(r));return function(e,t,n){e.fill(t)}(u,a),n.makeTensorInfo(r,o,u)}const qp={kernelName:t.deh,backendName:"cpu",kernelFunc:Xp},Kp={kernelName:t.Uyb,backendName:"cpu",kernelFunc:({inputs:e,attrs:n,backend:s})=>{const{image:r}=e,a=s,i=t.D5U.getTypedArrayFromDType(r.dtype,t.D5U.sizeFromShape(r.shape)),[o,u,l,c]=r.shape,h=a.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*l*u*c;for(let e=0;e<u;e++){const n=e*(l*c);for(let e=0;e<l;e++){const s=e*c;for(let r=0;r<c;r++){const a=Math.round(l-e-1),o=t+n+s+r;let u=h[o];a>=0&&a<l&&(u=h[t+n+a*c+r]),i[o]=u}}}}return{dataId:a.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Yp=yc((e=>Math.floor(e))),Qp=nc(t.OR,Yp),Zp={kernelName:t.OR,backendName:"cpu",kernelFunc:Qp},Jp=lc(((e,t)=>Math.floor(e/t))),ed=Ac(t.jeX,Jp,null,"int32"),td={kernelName:t.jeX,backendName:"cpu",kernelFunc:ed},nd={kernelName:t._V0,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=zh({inputs:{x:r,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=Mc({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=Fc({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=Fc({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=Mc({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=vc(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=vc(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}},sd={kernelName:t.luS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=tp({inputs:{x:r,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Fc({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=vc(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function rd(e,n,s,r,a,i,o,u,l){const c=(0,t.f3b)([r,i],s);for(let t=0;t<r;t++){const s=[];let r=0;for(let n=0;n<a;n++){const i=e[t*a+n];r+=i*o[n],s.push(i)}if(r<0||r>=l/i)throw new Error(`Invalid indices: ${s} does not index into ${u}`);for(let e=0;e<i;e++)c.values[t*i+e]=n.get(...n.indexToLoc(r*i+e))}return c}const ad={kernelName:t.q1x,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{params:r,indices:a}=n,i=t.D5U.sizeFromShape(r.shape),o=a.shape,u=o[o.length-1],[l,c,h,p]=t.Wap.prepareAndValidate(r,a);if(0===c)return s.makeTensorInfo(l,r.dtype,[]);const d=rd(s.data.get(a.dataId).values,s.bufferSync(r),r.dtype,c,u,h,p,r.shape,i);return s.makeTensorInfo(l,r.dtype,d.values)}};function id(e,n,s){const r=(0,t.f3b)(s,e.dtype);for(let t=0;t<r.size;++t){const s=r.indexToLoc(t).slice(),a=s[0],i=s[2],o=n.locToIndex([a,i]);s[2]=n.values[o];const u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[t]=e.values[u])}return r}const od={kernelName:t.qi_,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,indices:i}=n,{axis:o,batchDims:u}=r;Zl([a,i],"gatherV2");const l=t.D5U.parseAxisParam(o,a.shape)[0],c=s.data.get(i.dataId).values,h=a.shape[l];for(let e=0;e<c.length;++e){const n=c[e];t.D5U.assert(n<=h-1&&n>=0,(()=>`GatherV2: the index value ${n} is not in [0, ${h-1}]`))}let p=u;null==u&&(p=0);const d=t.D5U.sizeFromShape(i.shape),f=t.Wap.segment_util.collectGatherOpShapeInfo(a,i,l,p),m=Mc({inputs:{x:a},backend:s,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),g=Mc({inputs:{x:i},backend:s,attrs:{shape:[f.batchSize,d/f.batchSize]}}),y=[f.batchSize,f.outerSize,d/f.batchSize,f.sliceSize],b=s.bufferSync(g),x=id(s.bufferSync(m),b,y);return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),s.makeTensorInfo(f.outputShape,x.dtype,x.values)}},ud=lc(((e,t)=>e>t?1:0)),ld=Ac(t.iZT,ud,null,"bool"),cd={kernelName:t.iZT,backendName:"cpu",kernelFunc:ld},hd=lc(((e,t)=>e>=t?1:0)),pd=Ac(t.Acj,hd,null,"bool"),dd={kernelName:t.Acj,backendName:"cpu",kernelFunc:pd},fd={kernelName:t.Qg5,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{input:r}=n,a=t.D5U.sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=Mc({inputs:{x:r},backend:s,attrs:{shape:[a/i,i]}}),u=Vp(o,!0,s),l=Mc({inputs:{x:u},backend:s,attrs:{shape:r.shape}});return s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(u),l}},md=tc(t.avt,(e=>Number.isFinite(e)?1:0),"bool"),gd={kernelName:t.avt,backendName:"cpu",kernelFunc:md},yd=tc(t.iWB,(e=>Math.abs(e)===1/0?1:0),"bool"),bd={kernelName:t.iWB,backendName:"cpu",kernelFunc:yd},xd=tc(t.r7n,(e=>Number.isNaN(e)?1:0),"bool"),wd={kernelName:t.r7n,backendName:"cpu",kernelFunc:xd},vd=lc(((e,t)=>e<t?1:0)),kd=Ac(t.vtC,vd,null,"bool"),Id={kernelName:t.vtC,backendName:"cpu",kernelFunc:kd},Sd=lc(((e,t)=>e<=t?1:0)),Nd=Ac(t.CAk,Sd,null,"bool"),Td={kernelName:t.CAk,backendName:"cpu",kernelFunc:Nd};function Cd(e,n,s){const r=(n-e)/(s-1),a=t.D5U.makeZerosTypedArray(s,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a}const $d={kernelName:t.e7N,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=Cd(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},Ed=yc((e=>Math.log(e))),Ad=nc(t.ZbH,Ed),Dd={kernelName:t.ZbH,backendName:"cpu",kernelFunc:Ad},Rd=tc(t.kU,(e=>Math.log1p(e))),_d={kernelName:t.kU,backendName:"cpu",kernelFunc:Rd},Fd=lc(((e,t)=>e&&t)),Od=Ac(t.PYm,Fd,null,"bool"),Md={kernelName:t.PYm,backendName:"cpu",kernelFunc:Od},Ld=tc(t.VfG,(e=>e?0:1),"bool"),Bd={kernelName:t.VfG,backendName:"cpu",kernelFunc:Ld},zd=lc(((e,t)=>e||t)),Ud=Ac(t.MZg,zd,null,"bool"),Wd={kernelName:t.MZg,backendName:"cpu",kernelFunc:Ud},Pd={kernelName:t.eZ0,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{depthRadius:i,bias:o,alpha:u,beta:l}=r;Zl(a,"LRN");const c=a.shape[3],h=c-1,p=s.data.get(a.dataId).values,d=t.D5U.sizeFromShape(a.shape),f=new Float32Array(d);function m(e){const t=e%c;let n=e-t+Math.max(0,t-i);const s=e-t+Math.min(t+i,h);let r=0;for(;n<=s;n++){const e=p[n];r+=e*e}return r}for(let e=0;e<d;e++){const t=m(e),n=p[e]*Math.pow(o+u*t,-l);f[e]=n}return s.makeTensorInfo(a.shape,a.dtype,f)}},Vd={kernelName:t.Hhh,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,y:i,dy:o}=n,{depthRadius:u,bias:l,alpha:c,beta:h}=r;Zl(o,"LRNGrad");const p=t.D5U.sizeFromShape(o.shape),d=o.shape[3],f=s.data.get(o.dataId).values,m=s.data.get(a.dataId).values,g=s.data.get(i.dataId).values,y=new Float32Array(p),b=p;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-u),s=e-t+Math.min(d,t+u+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(m[e],2);r=c*r+l;for(let t=n;t<s;t++){let n=-2*c*h*m[t]*g[e]/r;e===t&&(n+=Math.pow(r,-h)),n*=f[e],y[t]+=n}}return s.makeTensorInfo(o.shape,a.dtype,y)}};function Gd(e,n,s,r){const a=t.D5U.getTypedArrayFromDType(r,t.D5U.sizeFromShape(s));for(let t=0;t<a.length;++t){const s=t*n;let r=e[s];for(let t=0;t<n;++t){const n=e[s+t];(Number.isNaN(n)||n>r)&&(r=n)}a[t]=r}return a}function Hd(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{reductionIndices:i,keepDims:o}=r,u=s;let l=a.shape;const c=l.length,h=t.D5U.parseAxisParam(i,l);let p=h;const d=t.Wap.getAxesPermutation(p,c);let f=u.data.get(a.dataId).values;if(null!=d){const e=new Array(c);for(let t=0;t<e.length;t++)e[t]=l[d[t]];f=qc(f,l,a.dtype,d,e),p=t.Wap.getInnerMostAxes(p.length,c),l=e}Zl(a,"max"),t.Wap.assertAxesAreInnerMostDims("max",p,c);const[m,g]=t.Wap.computeOutAndReduceShapes(l,p),y=Gd(f,t.D5U.sizeFromShape(g),m,a.dtype),b=u.write(y,m,a.dtype);let x=m;return o&&(x=t.Wap.expandShapeToKeepDim(m,h)),{dataId:b,shape:x,dtype:a.dtype}}const jd={kernelName:t.YoZ,backendName:"cpu",kernelFunc:Hd},Xd=lc(((e,t)=>Math.max(e,t))),qd=Ac(t.BMI,Xd),Kd={kernelName:t.BMI,backendName:"cpu",kernelFunc:qd},Yd={kernelName:t.mTV,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n;Zl(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=t.Wap.computePool2DInfo(a.shape,i,o,1,u,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&t.D5U.arraysEqual(c.inShape,c.outShape))h=ac({inputs:{x:a},backend:s});else{const e=s.data.get(a.dataId).values,n=t.D5U.computeStrides(a.shape),r=ph(e,a.shape,a.dtype,n,c,"max");h=s.makeTensorInfo(c.outShape,a.dtype,r.values)}return h}},Qd={kernelName:t.OAf,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=r;Zl(a,"maxPool3d");const h=t.Wap.computePool3DInfo(a.shape,i,o,1,u,l,c),p=fh(s.data.get(a.dataId).values,a.shape,a.dtype,t.D5U.computeStrides(a.shape),h,"max");return s.makeTensorInfo(p.shape,"float32",p.values)}},Zd={kernelName:t.OU7,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i}=n,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r;Zl([a,i],"maxPool3DGrad");const h=t.Wap.computePool3DInfo(i.shape,o,u,1,l,c),p=function(e,n){const s=(0,t.f3b)(n.outShape,"int32"),r=n.strideDepth,a=n.strideHeight,i=n.strideWidth,o=n.dilationDepth,u=n.dilationHeight,l=n.dilationWidth,c=n.effectiveFilterDepth,h=n.effectiveFilterHeight,p=n.effectiveFilterWidth,d=n.padInfo.front,f=n.padInfo.top,m=n.padInfo.left;for(let t=0;t<n.batchSize;++t)for(let g=0;g<n.inChannels;++g)for(let y=0;y<n.outDepth;++y){const b=y*r-d;let x=b;for(;x<0;)x+=o;const w=Math.min(n.inDepth,c+b);for(let r=0;r<n.outHeight;++r){const c=r*a-f;let d=c;for(;d<0;)d+=u;const v=Math.min(n.inHeight,h+c);for(let a=0;a<n.outWidth;++a){const f=a*i-m;let k=f;for(;k<0;)k+=l;const I=Math.min(n.inWidth,p+f);let S=Number.NEGATIVE_INFINITY,N=-1;for(let n=x;n<w;n+=o){const s=n-b;for(let r=d;r<v;r+=u){const a=r-c;for(let i=k;i<I;i+=l){const o=i-f,u=e.get(t,n,r,i,g);u>=S&&(S=u,N=s*h*p+a*h+o)}}}s.set(N,t,y,r,a,g)}}}return s}(s.bufferSync(i),h),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.dilationDepth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterDepth,w=h.effectiveFilterHeight,v=h.effectiveFilterWidth,k=x-1-h.padInfo.front,I=v-1-h.padInfo.left,S=w-1-h.padInfo.top,N=(0,t.f3b)(i.shape,"float32"),T=s.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let r=0;r<h.inWidth;++r){const a=n-k,i=s-S,o=r-I;let u=0;for(let n=0;n<x;n+=g){const s=(a+n)/d;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let r=0;r<w;r+=y){const a=(i+r)/f;if(!(a<0||a>=h.outHeight||Math.floor(a)!==a))for(let i=0;i<v;i+=b){const l=(o+i)/m;if(l<0||l>=h.outWidth||Math.floor(l)!==l)continue;const c=x*w*v-1-p.get(e,s,a,l,t)===n*w*v+r*v+i?1:0;0!==c&&(u+=T.get(e,s,a,l,t)*c)}}}N.set(u,e,n,s,r,t)}return s.makeTensorInfo(N.shape,N.dtype,N.values)}},Jd={kernelName:t.OV7,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i,output:o}=n,u=i;Zl([i,o],"maxPoolGrad");const{filterSize:l,strides:c,pad:h,dimRoundingMode:p}=r,d=t.Wap.computePool2DInfo(u.shape,l,c,1,h,p),f=s.data.get(u.dataId).values,m=(0,t.f3b)(d.outShape,u.dtype,dh(f,u.shape,u.dtype,d).values),g=d.strideHeight,y=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,w=d.effectiveFilterHeight,v=d.effectiveFilterWidth,k=v-1-d.padInfo.left,I=w-1-d.padInfo.top,S=(0,t.f3b)(u.shape,"float32"),N=s.data.get(a.dataId).values,T=(0,t.f3b)(a.shape,"float32",N);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const r=n-I,a=s-k;let i=0;for(let n=0;n<w;n+=b){const s=(r+n)/g;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let r=0;r<v;r+=x){const o=(a+r)/y;if(o<0||o>=d.outWidth||Math.floor(o)!==o)continue;const u=w*v-1-m.get(e,s,o,t)===n*v+r?1:0;0!==u&&(i+=T.get(e,s,o,t)*u)}}S.set(i,e,n,s,t)}return s.makeTensorInfo(S.shape,S.dtype,S.values)}},ef={kernelName:t.vFR,backendName:"cpu",kernelFunc:({inputs:e,attrs:n,backend:s})=>{const{x:r}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=n,l=s;Zl(r,"MaxPoolWithArgmax");const c=l.data.get(r.dataId).values,h=t.Wap.computePool2DInfo(r.shape,a,i,[1,1],o),[p,d]=function(e,n,s,r,a){const i=ph(e,0,s,t.D5U.computeStrides(n),a,"max"),o=dh(e,n,s,a,!0,r);return[i.values,o.values]}(c,r.shape,r.dtype,u,h),f=l.write(p,h.outShape,r.dtype),m=l.write(d,h.outShape,r.dtype);return[{dataId:f,shape:h.outShape,dtype:r.dtype},{dataId:m,shape:h.outShape,dtype:"int32"}]}},tf={kernelName:t.q2K,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r,u=t.D5U.parseAxisParam(i,a.shape),l=t.Wap.computeOutAndReduceShapes(a.shape,u)[1],c=t.D5U.sizeFromShape(l),h=[],p=s.makeTensorInfo([],"float32",new Float32Array([c]));h.push(p);const d=$c({inputs:{x:a},backend:s,attrs:{dtype:"float32"}});h.push(d);const f=Lp({inputs:{a:d,b:p},backend:s});h.push(f);const m=dp({inputs:{x:f},backend:s,attrs:{axis:i,keepDims:o}});return h.forEach((e=>s.disposeIntermediateTensorInfo(e))),m}},nf={kernelName:t.c17,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r;Zl(a,"min");const u=t.D5U.parseAxisParam(i,a.shape);let l=u;const c=t.Wap.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=Kc({inputs:{x:a},backend:s,attrs:{perm:c}}),l=t.Wap.getInnerMostAxes(l.length,a.shape.length)),t.Wap.assertAxesAreInnerMostDims("min",l,h.shape.length);const[p,d]=t.Wap.computeOutAndReduceShapes(h.shape,l),f=t.D5U.sizeFromShape(d),m=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(p),h.dtype),g=s.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];(Number.isNaN(s)||s<n)&&(n=s)}m[e]=n}null!=c&&s.disposeIntermediateTensorInfo(h);const y=s.makeTensorInfo(p,h.dtype,m);if(o){const e=Mc({inputs:{x:y},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(p,u)}});return s.disposeIntermediateTensorInfo(y),e}return y}},sf=lc(((e,t)=>Math.min(e,t))),rf=Ac(t.q8u,sf),af={kernelName:t.q8u,backendName:"cpu",kernelFunc:rf},of={kernelName:t.jQs,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{paddings:i,mode:o}=r;Zl(a,"mirrorPad");const u=i.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=i.map((e=>e[0])),c=i.map(((e,t)=>e[0]+a.shape[t])),h="reflect"===o?0:1,p=s.data.get(a.dataId).values,d=a.shape.length,f=t.D5U.computeStrides(a.shape),m=t.D5U.sizeFromShape(u),g=u.length,y=t.D5U.computeStrides(u),b=t.D5U.getTypedArrayFromDType(a.dtype,m);for(let e=0;e<m;e++){let n=t.D5U.indexToLoc(e,g,y);for(let e=0;e<g;e++)n[e]<l[e]?n[e]=2*l[e]-n[e]-h:n[e]>=c[e]&&(n[e]=2*(c[e]-1)-n[e]+h);n=n.map(((e,t)=>e-l[t]));const s=t.D5U.locToIndex(n,d,f);b[e]=p[s]}return{dataId:s.write(b,u,a.dtype),shape:u,dtype:a.dtype}}},uf=lc(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),lf=Ac(t.Vbg,uf),cf={kernelName:t.Vbg,backendName:"cpu",kernelFunc:lf};function hf(e){const{inputs:n,backend:s,attrs:r}=e,{logits:a}=n,{dim:i}=r,o=a.shape.length;let u=i;if(-1===u&&(u=o-1),u!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${u}`);const l=t.D5U.parseAxisParam([u],a.shape),c=Hd({inputs:{x:a},backend:s,attrs:{reductionIndices:l,keepDims:!1}}),h=t.Wap.expandShapeToKeepDim(c.shape,l),p=Mc({inputs:{x:c},backend:s,attrs:{shape:h}}),d=Wp({inputs:{a,b:p},backend:s}),f=Ep({inputs:{x:d},backend:s}),m=dp({inputs:{x:f},backend:s,attrs:{axis:l,keepDims:!1}}),g=Mc({inputs:{x:m},backend:s,attrs:{shape:h}}),y=Lp({inputs:{a:f,b:g},backend:s});return s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),y}const pf={kernelName:t.Gcp,backendName:"cpu",kernelFunc:hf},df={kernelName:t.NZg,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{logits:a}=n,{numSamples:i,seed:o,normalized:u}=r;Zl(a,"multinomial");const l=u?a:hf({inputs:{logits:a},backend:s,attrs:{dim:-1}}),c=l.shape[0],h=l.shape[1],p=s.data.get(l.dataId).values,d=[c,i],f=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(d),"int32");for(let e=0;e<c;++e){const t=e*h,n=new Float32Array(h-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const s=Il.alea(o.toString()),r=e*i;for(let e=0;e<i;++e){const t=s();f[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[r+e]=s;break}}}return u||s.disposeIntermediateTensorInfo(l),s.makeTensorInfo(d,"int32",f)}};function ff(e,n,s){const r=t.D5U.createScalarValue(-1,s);return lp([],n,r,e,s)}const mf={kernelName:t.kuV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Zl(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=ff(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},gf=t.GDt.GP,yf={kernelName:t.uv1,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=s;Zl(r,"NonMaxSuppression");const l=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=gf(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},bf=t.GDt.qP,xf={kernelName:t.cye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=s;Zl(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=bf(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},wf=t.GDt.pA,vf={kernelName:t.W0H,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=s;Zl(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=wf(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},kf=lc(((e,t)=>e!==t?1:0)),If=Ac(t.yQU,kf,null,"bool"),Sf={kernelName:t.yQU,backendName:"cpu",kernelFunc:If},Nf={kernelName:t.we_,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{indices:a}=n,{dtype:i,depth:o,onValue:u,offValue:l}=r;Zl(a,"oneHot");const c=t.D5U.sizeFromShape(a.shape),h=new Float32Array(c*o);h.fill(l);const p=s.data.get(a.dataId).values;for(let e=0;e<c;++e)p[e]>=0&&p[e]<o&&(h[e*o+p[e]]=u);return s.makeTensorInfo([...a.shape,o],i,h)}};function Tf(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Nc({inputs:{input:s},backend:n}),t=Tf({inputs:{x:e},backend:n}),r=Oh({inputs:{input:s},backend:n}),a=Tf({inputs:{x:r},backend:n}),i=kc({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Xp({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const Cf={kernelName:t.RuY,backendName:"cpu",kernelFunc:Tf},$f={kernelName:t.qWM,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Nc({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Oh({inputs:{input:r},backend:s}),i=Tf({inputs:{x:a},backend:s}),o=kc({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Xp({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function Ef(e){const{inputs:n,backend:s,attrs:r}=e,{axis:a}=r;if(1===n.length)return Dp({inputs:{input:n[0]},backend:s,attrs:{dim:a}});const i=n[0].shape,o=n[0].dtype;n.forEach((e=>{t.D5U.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),t.D5U.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Lh({inputs:n.map((e=>{const t=Dp({inputs:{input:e},backend:s,attrs:{dim:a}});return u.push(t),t})),backend:s,attrs:{axis:a}});return u.forEach((e=>s.disposeIntermediateTensorInfo(e))),l}const Af={kernelName:t.QiL,backendName:"cpu",kernelFunc:Ef},Df={kernelName:t.lyA,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{paddings:i,constantValue:o}=r;Zl(a,"pad");const u=i.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=i.map((e=>e[0])),c=s.data.get(a.dataId).values,h=t.D5U.sizeFromShape(a.shape),p=a.shape.length,d=t.D5U.computeStrides(a.shape),f=t.D5U.sizeFromShape(u),m=u.length,g=t.D5U.computeStrides(u),y=t.D5U.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let e=0;e<h;e++){const n=t.D5U.indexToLoc(e,p,d).map(((e,t)=>e+l[t]));y[t.D5U.locToIndex(n,m,g)]=c[e]}return{dataId:s.write(y,u,a.dtype),shape:u,dtype:a.dtype}}},Rf=lc(((e,t)=>Math.pow(e,t))),_f=Ac(t.pe_,Rf),Ff={kernelName:t.pe_,backendName:"cpu",kernelFunc:_f};function Of(e,n,s,r){const[a,i]=t.Wap.computeOutAndReduceShapes(e,r),o=(0,t.x8V)(n,"int32"),u=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(a),o),l=t.D5U.sizeFromShape(i);for(let e=0;e<u.length;++e){const t=e*l;let n=1;for(let e=0;e<l;++e)n*=s[t+e];u[e]=n}return{outVals:u,outShape:a,outDtype:o}}const Mf={kernelName:t.DlI,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r;Zl(a,"prod");const u=a.shape.length,l=t.D5U.parseAxisParam(i,a.shape),c=t.Wap.getAxesPermutation(l,u);let h=l,p=a;const d=[];null!=c&&(p=Kc({inputs:{x:a},backend:s,attrs:{perm:c}}),d.push(p),h=t.Wap.getInnerMostAxes(h.length,u));const f=s.data.get(p.dataId).values,{outVals:m,outShape:g,outDtype:y}=Of(p.shape,p.dtype,f,h);let b=g;return o&&(b=t.Wap.expandShapeToKeepDim(g,l)),d.forEach((e=>s.disposeIntermediateTensorInfo(e))),s.makeTensorInfo(b,y,m)}};function Lf(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function Bf(e,n,s,r,a,i,o,u){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===n[0].length)throw new Error("Split tensors must not be scalars");if(function(e,n,s){e.forEach(((e,r)=>{if(e<0||e>=s){const a=t.D5U.indexToLoc(r,n.length,t.D5U.computeStrides(n)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${s})`)}}))}(i,o,n[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const l=r[0],{outSplits:c,valueSlices:h,numValues:p}=function(e,t,n,s){const r=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)o[e].push(t*n)}for(let s=0;s<e.length;++s){let i=e[s],u=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],r=e+t.length-1;if(r>=0){const e=o[r],t=e[e.length-1]-s[i];for(let e=i;e<u;++e)o[r].push(s[e+1]+t)}i=s[i],u=s[u]}u!==i&&(r.push([i,u]),a+=u-i)}return{outSplits:o,valueSlices:r,numValues:a}}(i,o,e,l),d=function(e){const n=[];for(let s=0;s<e.length;++s){const r=e[s].length,a=t.D5U.getArrayFromDType("int32",r);n.push(a),e[s].forEach(((e,t)=>a[t]=e))}return n}(c),f=function(e,n,s,r,a){const i=n.slice();i[0]=a;const o=t.D5U.getArrayFromDType(s,t.D5U.sizeFromShape(i)),u=e.length;return function(e,t,n,s,r,a){const i=Lf(t,2)[1],o=Lf(a,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)r[u*o+t]=e[n*i+t];++u}}(e,n,r,0===u?0:u/n[0],o,i),[o,i]}(s,r,a,h,p);return[d,f[0],f[1]]}const zf={kernelName:t.dDz,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,u=r.map((e=>n.data.get(e.dataId).values)),l=r.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,[p,d,f]=Bf(u,l,c,a.shape,a.dtype,h,i.shape),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};function Uf(e,n,s,r,a,i,o){if(n.length>1)throw new Error("starts must be a scalar or vector");if(a.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const u=0===n.length,l=0===a.length,c=0===o.length,h=[];u||h.push(n[0]),l||h.push(a[0]),c||h.push(o[0]);for(let e=1;e<h.length;++e)if(h[e]!==h[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===h.length?1:h[0],d=t.D5U.getArrayFromDType("int32",p+1);d[0]=0;for(let t=0;t<p;++t){const n=u?e[0]:e[t],s=l?r[0]:r[t],a=c?i[0]:i[t];if(0===a)throw new Error("Requires delta != 0");let o;if(a>0&&s<n||a<0&&s>n)o=0;else if(o=Math.ceil(Math.abs((s-n)/a)),o>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");d[t+1]=d[t]+o}const f=d[p],m=t.D5U.getArrayFromDType(s,f);let g=0;for(let t=0;t<p;++t){const n=d[t+1]-d[t];let s=u?e[0]:e[t];const r=c?i[0]:i[t];for(let e=0;e<n;++e)m[g++]=s,s+=r}return[d,m]}const Wf={kernelName:t.CQl,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,[l,c]=Uf(i,s.shape,s.dtype,o,r.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],s.dtype,c)]}};var Pf=t.Wap.RowPartitionType;class Vf{constructor(e,n,s,r,a,i,o,u,l,c){this.shape=e,this.shapeShape=n,this.values=s,this.valuesShape=r,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=o,this.rowPartitionValues=u,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=t.Wap.getRowPartitionTypesHelper(c),this.raggedRank=t.Wap.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Pf.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Pf.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Pf.VALUE_ROWIDS:return Vf.getMaxWidthValueRowID(t);case Pf.ROW_SPLITS:return Vf.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Pf[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Hf(e,n)}calculateOutputSize(e){const n=this.valuesShape,s=this.defaultValueShape;t.Wap.validateDefaultValueShape(s,n);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=t.Wap.combineRaggedTensorToTensorShapes(this.raggedRank,r,n);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,n,s){const r=Math.min(e,s),a=[];let i=0;for(let e=0;e<r;++e,i+=n)a.push(i);for(let t=r;t<e;++t)a.push(-1);return t.D5U.assert(a.length===e,(()=>"Final length of result must be equal to firstDimension.")),a}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(s,r),u=t[i];-1===u&&(o=0);for(let e=0;e<o;++e)a.push(u),u+=n;for(let e=0;e<r-o;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];a.push(u);for(let l=1;l<r;++l){const r=e[l];if(r===o)u>=0&&(++i,i<s?u+=n:u=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);u=t[r]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Pf.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case Pf.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${Pf[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Pf.FIRST_DIM_SIZE:return e[0];case Pf.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Pf.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Pf[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),n=this.calculateOutputSize(e),s=new Array(this.raggedRank+1);s[s.length-1]=1;for(let e=s.length-2;e>=0;--e)s[e]=s[e+1]*n[e+1];const r=Hf(n,!1),a=t.D5U.getArrayFromDType(this.valuesDType,t.D5U.sizeFromShape(r));if(s[0]*n[0]>0){let t=this.calculateFirstParentOutputIndex(e,s[0],n[0]);for(let e=1;e<=this.raggedRank;++e)t=this.calculateOutputIndex(e-1,t,s[e],n[e]);this.setOutput(this.raggedRank,t,a,r)}return[r,a]}setOutput(e,n,s,r){if(0===s.length)return;const a=this.values,i=s;let o=r.slice();o=o.slice(e+1);const u=t.D5U.sizeFromShape(o),l=n.length;let c=this.defaultValue;if(c.length!==u&&1!==c.length){const e=this.defaultValueShape;(0,t.lub)((()=>{const n=(0,t.XLQ)(c,e),s=(0,t.UFq)(n,o);c=s.dataSync()}))}let h=0,p=0,d=0;for(let e=0;e<=l;++e){let t=e<l?n[e]:-1;if(t!==d){if(p<d){const e=a.subarray(h*u);Gf(i.subarray(p*u),e,(d-p)*u)}if(e>=l){const e=s.length;t=Math.floor(e/u)}if(t>d)if(1===this.defaultValue.length)i.subarray(d*u,t*u).fill(this.defaultValue[0]),d=t;else for(;t>d;)Gf(i.slice(d*u),c,u),++d;t<0?(h=e+1,p=d):(h=e,p=d,d=p+1)}else++d}}}function Gf(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function Hf(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function jf(e,t,n,s,r,a,i,o,u,l){return new Vf(e,t,n,s,r,a,i,o,u,l).compute()}const Xf={kernelName:t.BiW,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=s,l=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,p=o.map((e=>n.data.get(e.dataId).values)),d=o.map((e=>e.shape)),[f,m]=jf(l,r.shape,c,a.shape,a.dtype,h,i.shape,p,d,u);return n.makeTensorInfo(f,a.dtype,m)}};function qf(e,n,s,r){if(e===n||e<n&&s<0||n<e&&s>1)return t.D5U.makeZerosTypedArray(0,r);const a=Math.abs(Math.ceil((n-e)/s)),i=t.D5U.makeZerosTypedArray(a,r);n<e&&1===s&&(s=-1),i[0]=e;for(let e=1;e<i.length;e++)i[e]=i[e-1]+s;return i}const Kf={kernelName:t.e6w,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=qf(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},Yf=tc(t.$HU,(e=>1/e)),Qf={kernelName:t.$HU,backendName:"cpu",kernelFunc:Yf},Zf={kernelName:t._Yw,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{images:a}=n,{alignCorners:i,halfPixelCenters:o,size:u}=r;Zl(a,"resizeBilinear");const l=t.D5U.computeStrides(a.shape),[c,h]=u,[p,d,f,m]=a.shape,g=s.data.get(a.dataId).values,y=new Float32Array(t.D5U.sizeFromShape([p,c,h,m])),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h];let w=0;const v=b[0]/x[0],k=b[1]/x[1];for(let e=0;e<p;e++)for(let t=0;t<c;t++){let n;n=o?v*(t+.5)-.5:v*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(d-1,Math.ceil(n)),i=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<h;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],p=i+a*l[2],d=u+a*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*s,i=a+(n+(g[d+e]-n)*s-a)*r;y[w++]=i}}}return s.makeTensorInfo([p,c,h,m],"float32",y)}},Jf={kernelName:t.zbQ,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{images:a,dy:i}=n,{alignCorners:o}=r;Zl([i,a],"resizeBilinearGrad");const u=t.D5U.computeStrides(a.shape),[l,c,h,p]=a.shape,[,d,f]=i.shape,m=new Float32Array(l*c*h*p),g=[o&&d>1?c-1:c,o&&f>1?h-1:h],y=[o&&d>1?d-1:d,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],w=s.data.get(i.dataId).values;let v=0;for(let e=0;e<l;e++){const t=e*u[0];for(let e=0;e<d;e++){const n=e*b,s=Math.floor(n),r=Math.min(Math.ceil(n),c-1),a=t+s*u[1],i=t+r*u[1],o=n-s,l=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),s=Math.min(Math.ceil(t),h-1),r=t-n,c=1-r,d=a+n*u[2],f=a+s*u[2],g=i+n*u[2],y=i+s*u[2],b=l*c,k=l*r,I=o*c,S=o*r;for(let e=0;e<p;e++){const t=w[v++];m[d+e]+=t*b,m[f+e]+=t*k,m[g+e]+=t*I,m[y+e]+=t*S}}}}return s.makeTensorInfo([l,h,c,p],"float32",m)}},em={kernelName:t.dpD,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{images:a}=n,{alignCorners:i,halfPixelCenters:o,size:u}=r;Zl(a,"resizeNearestNeighbor");const l=t.D5U.computeStrides(a.shape),[c,h]=u,[p,d,f,m]=a.shape,g=s.data.get(a.dataId).values,y=new Float32Array(p*c*h*m),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h],w=b[0]/x[0],v=b[1]/x[1];let k=0;for(let e=0;e<p;e++){const t=e*l[0];for(let e=0;e<c;e++){const n=o?w*(e+.5):w*e;let s=Math.min(d-1,i?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<h;e++){const t=o?v*(e+.5):v*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<m;e++){const t=g[s+e];y[k++]=t}}}}return s.makeTensorInfo([p,c,h,m],a.dtype,y)}},tm={kernelName:t.Hmb,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{images:a,dy:i}=n,{alignCorners:o}=r;Zl([i,a],"resizeNearestNeighborGrad");const u=t.D5U.computeStrides(a.shape),l=t.D5U.computeStrides(i.shape),[c,h,p,d]=a.shape,[,f,m]=i.shape,g=new Float32Array(c*h*p*d),y=s.data.get(i.dataId).values,b=[o&&f>1?h-1:h,o&&m>1?p-1:p],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],w=b[0]/x[0],v=b[1]/x[1],k=1/w,I=1/v,S=2*Math.ceil(k)+2,N=2*Math.ceil(I)+2;for(let e=0;e<c;e++){const t=e*u[0];for(let e=0;e<h;e++){const n=t+e*u[1],s=Math.floor(e*k),r=Math.floor(s-S/2);for(let s=0;s<p;s++){const a=n+s*u[2],i=Math.floor(s*I),c=Math.floor(i-N/2);for(let n=0;n<d;n++){let i=0;for(let a=0;a<S;a++){const u=a+r;if(u<0||u>=f)continue;const d=t+u*l[1],g=u*w;if(e===Math.min(h-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<N;e++){const t=e+c;if(t<0||t>=m)continue;const r=d+t*l[2],a=t*v;s===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=y[r+n])}}g[a+n]=i}}}}return s.makeTensorInfo(a.shape,a.dtype,g)}},nm={kernelName:t.mKl,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{dims:i}=r;Zl(a,"reverse");const o=a.shape.length,u=t.D5U.parseAxisParam(i,a.shape);if(0===o)return ac({inputs:{x:a},backend:s});const l=new t.YDk(a.shape,a.dtype),c=s.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();u.forEach((e=>n[e]=a.shape[e]-1-n[e])),l.set(c.get(...n),...t)}return s.makeTensorInfo(l.shape,l.dtype,l.values)}},sm={kernelName:t.b9H,backendName:"cpu",kernelFunc:({inputs:e,attrs:n,backend:s})=>{const{image:r}=e,{radians:a,fillValue:i,center:o}=n,u=s,l=t.D5U.getTypedArrayFromDType(r.dtype,t.D5U.sizeFromShape(r.shape)),[c,h,p,d]=r.shape,[f,m]=t.Wap.getImageCenter(o,h,p),g=Math.sin(a),y=Math.cos(a),b=u.data.get(r.dataId).values;for(let e=0;e<c;e++){const t=e*p*h*d;for(let e=0;e<h;e++){const n=e*(p*d);for(let s=0;s<p;s++){const r=s*d;for(let a=0;a<d;a++){const o=[c,e,s,a],u=o[2],x=o[1];let w=(u-f)*y-(x-m)*g,v=(u-f)*g+(x-m)*y;w=Math.round(w+f),v=Math.round(v+m);let k=i;"number"!=typeof i&&(k=3===a?255:i[a]),w>=0&&w<p&&v>=0&&v<h&&(k=b[t+v*(p*d)+w*d+a]),l[t+n+r+a]=k}}}}return{dataId:u.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},rm=tc(t.e07,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),am={kernelName:t.e07,backendName:"cpu",kernelFunc:rm},im=yc((e=>1/Math.sqrt(e))),om=nc(t.bV0,im),um={kernelName:t.bV0,backendName:"cpu",kernelFunc:om};function lm(e,n,s,r,a,i,o,u,l,c){const h=[r/a,a],p=e.values,d=n.values;if(0===r)return(0,t.f3b)(s,n.dtype);const f=(0,t.f3b)(h,n.dtype);"string"==typeof l||"number"==typeof l?f.values.fill(l):"boolean"==typeof l&&f.values.fill(+l);for(let e=0;e<i;e++){const t=[];let i=0;for(let n=0;n<o;n++){const s=p[e*o+n];t.push(s),i+=s*u[n]}if(i<0||i>=r/a)throw new Error(`Invalid indices: ${t} does not index into ${s}`);for(let t=0;t<a;t++)c?f.values[i*a+t]+=d[e*a+t]:f.values[i*a+t]=0===n.rank?d[0]:d[e*a+t]}return f}const cm={kernelName:t.xQA,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{indices:a,updates:i}=n,{shape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=t.Wap.calculateShapes(i,a,o),d=lm(s.bufferSync(a),s.bufferSync(i),o,p,c,l,u,h,0,!0);return s.makeTensorInfo(o,d.dtype,d.values)}};function hm(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function pm(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const dm={kernelName:t.nr8,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{sortedSequence:a,values:i}=n,{side:o}=r,u=function(e,n,s,r,a,i){const o=t.D5U.getArrayFromDType("int32",s*a);for(let t=0;t<s;++t){const s=e.slice(t*r,(t+1)*r),u=t*a;for(let e=0;e<a;++e)o[u+e]="left"===i?hm(s,n[e+u]):pm(s,n[e+u])}return o}(s.data.get(a.dataId).values,s.data.get(i.dataId).values,a.shape[0],a.shape[1],i.shape[1],o);return s.makeTensorInfo(i.shape,"int32",u)}},fm={kernelName:t.PhF,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s}=e,{condition:r,t:a,e:i}=n;Zl([r,a,i],"select");const o=r.shape.length,u=s.data.get(r.dataId).values,l=s.data.get(a.dataId).values,c=s.data.get(i.dataId).values,h=(0,t.x8V)(a.dtype,i.dtype),p=t.D5U.makeZerosTypedArray(t.D5U.sizeFromShape(a.shape),h);let d=0;const f=0===o||o>1||1===a.shape.length?1:t.D5U.sizeFromShape(a.shape.slice(1));for(let e=0;e<u.length;e++)for(let t=0;t<f;t++)1===u[e]?p[d++]=l[e]:p[d++]=c[e];return s.makeTensorInfo(a.shape,h,p)}},mm=t.Wap.SELU_SCALEALPHA,gm=t.Wap.SELU_SCALE,ym=tc(t.oFR,(e=>e>=0?gm*e:mm*(Math.exp(e)-1))),bm={kernelName:t.oFR,backendName:"cpu",kernelFunc:ym},xm=tc(t.i5y,(e=>e<0?-1:e>0?1:0)),wm={kernelName:t.i5y,backendName:"cpu",kernelFunc:xm},vm=tc(t.RQH,(e=>Math.sin(e))),km={kernelName:t.RQH,backendName:"cpu",kernelFunc:vm},Im=tc(t.wYB,(e=>Math.sinh(e))),Sm={kernelName:t.wYB,backendName:"cpu",kernelFunc:Im},Nm=Math.log(1.1920928955078125e-7)+2,Tm=tc(t.MRv,(e=>{const t=e>-Nm,n=e<Nm,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),Cm={kernelName:t.MRv,backendName:"cpu",kernelFunc:Tm},$m={kernelName:t.TQc,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{blockShape:i,paddings:o}=r;Zl([a],"spaceToBatchND");const u=t.D5U.sizeFromShape(i),l=[[0,0]];l.push(...o);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);const c=Df.kernelFunc({inputs:{x:a},backend:s,attrs:{paddings:l,constantValue:0}}),h=t.Wap.getReshaped(c.shape,i,u,!1),p=t.Wap.getPermuted(h.length,i.length,!1),d=t.Wap.getReshapedPermuted(c.shape,i,u,!1),f=Mc({inputs:{x:c},backend:s,attrs:{shape:h}}),m=Kc({inputs:{x:f},backend:s,attrs:{perm:p}}),g=Mc({inputs:{x:m},backend:s,attrs:{shape:d}});return s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(m),g}};function Em(e,n,s,r,a,i,o){const u=n[0],l=i[0],c=new Array(l),h=new Array(u),p=n[1];if(0===l){if(0!==u)throw new Error(t.Wap.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[t.D5U.getArrayFromDType(s,0),[0,p],t.D5U.getArrayFromDType(a,0),c,h]}let d=!0,f=0;const m=new Array(l).fill(0);for(let n=0;n<u;++n){const s=e[n*p];if(s<0)throw new Error(t.Wap.getSparseFillEmptyRowsNegativeIndexErrorMessage(n,s));if(s>=l)throw new Error(t.Wap.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(n,s,l));++m[s],d=d&&s>=f,f=s}let g=!0;for(let e=0;e<l;++e){const t=0===m[e];c[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&d){const t=e,n=r;for(let e=0;e<u;++e)h[e]=e;return[t,[u,p],n,c,h]}{const n=m[l-1],i=t.D5U.getArrayFromDType(s,n*p),d=t.D5U.getArrayFromDType(a,n),f=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*p],s=f[n],a=(0===n?0:m[n-1])+s;f[n]++;for(let n=0;n<p;++n)i[a*p+n]=e[t*p+n];d[a]=r[t],h[t]=a}for(let e=0;e<l;++e)if(0===f[e]){const t=0===e?0:m[e-1];i[t*p+0]=e;for(let e=1;e<p;++e)i[t*p+e]=0;d[t]=o}return[i,[n,p],d,c,h]}}const Am={kernelName:t.O3z,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,u=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=Em(o,s.shape,s.dtype,u,r.dtype,l,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function Dm(e,n,s,r,a){const i=t.D5U.sizeFromShape(r),o=n[0],u=a.length,l=[];let c=1,h=-1;for(let e=0;e<u;++e){const n=a[e];if(-1===n){if(-1!==h)throw new Error(t.Wap.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,l.push(1)}else{if(n<0)throw new Error(t.Wap.getSparseReshapeNegativeOutputDimErrorMessage(e,n));c*=n,l.push(n)}}if(-1!==h){if(c<=0)throw new Error(t.Wap.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(i/c);if(c*e!==i)throw new Error(t.Wap.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[h]=e}if(t.D5U.sizeFromShape(l)!==i)throw new Error(t.Wap.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const p=r.length,d=[];if(p>0){d[p-1]=1;for(let e=p-2;e>=0;--e)d[e]=d[e+1]*r[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=t.D5U.getArrayFromDType(s,o*u);for(let t=0;t<o;++t){let n=0;for(let s=0;s<p;++s)n+=e[t*p+s]*d[s];for(let e=0;e<u;++e)m[t*u+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[o,u],l]}const Rm={kernelName:t.nhH,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,h]=Dm(o,s.shape,s.dtype,i,u);return[n.makeTensorInfo(c,s.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function _m(e,n,s,r,a,i=!1,o=0){const u=r.length,l=[n[0],e.length/n[0]],c=l[1],h=u>0?a[u-1]+1:0;if(h<0)throw new Error(t.Wap.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=n.slice();p[0]=h;const d=p.reduce(((e,t)=>e*t),1),f=t.D5U.getArrayFromDType(s,d);if(0===u)return h>0&&f.fill(o),[f,p];if(h<=0)throw new Error(t.Wap.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,y=0,b=a[m];for(;;){let n=0;if(g<u){if(n=a[g],b===n){++g;continue}if(b>=n)throw new Error(t.Wap.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=h)throw new Error(t.Wap.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,h));b>y&&f.fill(o,y*c,b*c);for(let n=m;n<g;++n){const s=r[n];if(s<0||s>=l[0])throw new Error(t.Wap.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,r[n],l[0]));for(let t=0;t<c;t++)f[b*c+t]+=e[s*c+t]}if(i)for(let e=0;e<c;e++)f[b*c+e]/=g-m;if(m=g,++g,y=b+1,b=n,g>u)break}return y<h&&f.fill(o,y*c,h*c),[f,p]}const Fm={kernelName:t.w3H,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,[l,c]=_m(i,s.shape,s.dtype,o,u,!0);return n.makeTensorInfo(c,s.dtype,l)}},Om={kernelName:t.ZjV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,[l,c]=_m(i,s.shape,s.dtype,o,u);return n.makeTensorInfo(c,s.dtype,l)}},Mm={kernelName:t.D2d,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=n,{outputShape:u}=r,{sliceRank:l,numUpdates:c,sliceSize:h,strides:p,outputSize:d}=t.Wap.calculateShapes(i,a,u),f=!1,m=s.bufferSync(a);let g;switch(i.dtype){case"bool":g=lm(m,s.bufferSync(i),u,d,h,c,l,p,Boolean(s.data.get(o.dataId).values[0]),f);break;case"float32":case"int32":g=lm(m,s.bufferSync(i),u,d,h,c,l,p,s.data.get(o.dataId).values[0],f);break;case"string":g=lm(m,s.bufferSync(i),u,d,h,c,l,p,t.D5U.decodeString(s.data.get(o.dataId).values[0]),f);break;default:throw new Error(`Unsupported type ${i.dtype}`)}return s.makeTensorInfo(u,g.dtype,g.values)}},Lm={kernelName:t.L8s,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{numOrSizeSplits:i,axis:o}=r,u=t.D5U.parseAxisParam(o,a.shape)[0],l=t.Wap.prepareSplitSize(a,i,u),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return l.map((e=>{const t=[...h];t[u]=e;const n=vh({inputs:{x:a},backend:s,attrs:{begin:c,size:t}});return c[u]+=e,n}))}},Bm=yc((e=>Math.sqrt(e))),zm=tc(t.FKq,(e=>Math.sqrt(e))),Um={kernelName:t.FKq,backendName:"cpu",kernelFunc:zm},Wm={kernelName:t.bK0,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Zl(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Pm=lc(((e,t)=>{const n=e-t;return n*n})),Vm=Ac(t._tC,Pm),Gm={kernelName:t._tC,backendName:"cpu",kernelFunc:Vm},Hm=tc(t.h8e,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),jm={kernelName:t.h8e,backendName:"cpu",kernelFunc:Hm};function Xm(e,n,s,r){const a=(0,t.f3b)(e,n.dtype);for(let e=0;e<a.size;e++){const t=a.indexToLoc(e),i=new Array(t.length);for(let e=0;e<i.length;e++)i[e]=t[e]*s[e]+r[e];a.set(n.get(...i),...t)}return a}const qm={kernelName:t.jQk,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{begin:i,end:o,strides:u,beginMask:l,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=r;Zl(a,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:w,strides:v}=t.kuN.sliceInfo(a.shape,i,o,u,l,c,h,p,d);let k;if(g)k=Mc({inputs:{x:a},backend:s,attrs:{shape:m}});else if(y||b){t.D5U.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=t.kuN.computeOutShape(x,w,v),n=vh({inputs:{x:a},backend:s,attrs:{begin:x,size:e}});k=Mc({inputs:{x:n},backend:s,attrs:{shape:m}}),s.disposeIntermediateTensorInfo(n)}else{const e=Xm(f,s.bufferSync(a),v,x);k=s.makeTensorInfo(m,e.dtype,e.values)}return k}};class Km{constructor(e,n,s,r,a,i){this.separator=t.D5U.encodeString(e),this.nGramWidths=n,this.leftPad=t.D5U.encodeString(s),this.rightPad=t.D5U.encodeString(r),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),u=Math.max(0,o-i),l=Math.max(0,o-(r-(i+1))),c=a-(u+l),h=t+(u>0?0:i-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=l*this.rightPad.length,p+=(u+l+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,n){const s=e.length,r=n.length;if(r>0){let e=n[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let t=1;t<r;++t){let r=n[t]>=e;if(r=r&&n[t]<=s,!r)throw new Error(`Invalid split value ${n[t]}, must be in [${e}, ${s}]`);e=n[t]}if(e!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${e}`)}const a=r-1,i=t.D5U.getArrayFromDType("int32",r);if(0===s||0===r){const e=new Array(s);for(let e=0;e<=a;++e)i[e]=0;return[e,i]}i[0]=0;for(let e=1;e<=a;++e){const t=n[e]-n[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(t,e)})),this.preserveShort&&t>0&&0===s&&(s=1),i[e]=i[e-1]+s}const o=new Array(i[a]);for(let t=0;t<a;++t){const s=n[t];let r=i[t];if(this.nGramWidths.forEach((a=>{const i=n[t+1]-n[t],u=this.getNumNGrams(i,a);this.createNGrams(e,s,o,r,u,a),r+=u})),this.preserveShort&&r===i[t]){const a=n[t+1]-n[t];if(0===a)continue;const i=a+2*this.padWidth,u=1;this.createNGrams(e,s,o,r,u,i)}}return[o,i]}}function Ym(e,t,n,s,r,a,i,o){return new Km(n,s,r,a,i,o).compute(e,t)}const Qm={kernelName:t._JP,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=Ym(p,d,r,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function Zm(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function Jm(e,n,s){const r=e.length,a=[];let i=0,o=0;const u=new Array(r);for(let t=0;t<r;++t){const r=a.length;Zm(e[t],n,s,a);const l=a.length-r;u[t]=l,i+=l,o=Math.max(o,l)}const l=t.D5U.getArrayFromDType("int32",2*i),c=new Array(i),h=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<u[e];++t)l[2*p]=e,l[2*p+1]=t,c[p]=a[p],++p;return[l,c,h]}const eg={kernelName:t.s1s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values[0],[l,c,h]=Jm(o,u,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function tg(e,n){const s=t.D5U.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)s[r]=t.D5U.fingerPrint64(e[r]).modulo(n).getLowBitsUnsigned();return s}const ng={kernelName:t.XkS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=tg(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},sg=tc(t.sEM,(e=>Math.tan(e))),rg={kernelName:t.sEM,backendName:"cpu",kernelFunc:sg},ag=tc(t.MIZ,(e=>Math.tanh(e))),ig={kernelName:t.MIZ,backendName:"cpu",kernelFunc:ag};function og(e,n){const s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=e.shape[t]*n[t];const r=(0,t.f3b)(s,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const ug={kernelName:t.n9L,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;Zl(r,"tile");const i=og(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},lg=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function cg(e,n,s=0,r=e.length-1){for(;r>s;){if(r-s>600){const t=r-s+1,a=n-s+1,i=Math.log(t),o=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*o*(t-o)/t)*Math.sign(a-t/2);cg(e,n,Math.max(s,Math.floor(n-a*o/t+u)),Math.min(r,Math.floor(n+(t-a)*o/t+u)))}const a=e[n];let i=s,o=r;for(t.D5U.swap(e,s,n),lg(e[r],a)>0&&t.D5U.swap(e,s,r);i<o;){for(t.D5U.swap(e,i,o),i++,o--;lg(e[i],a)<0;)i+=1;for(;lg(e[o],a)>0;)o-=1}0===lg(e[s],a)?t.D5U.swap(e,s,o):(o+=1,t.D5U.swap(e,o,r)),o<=n&&(s=o+1),n<=o&&(r=o-1)}}function hg(e,n,s,r,a){const i=n[n.length-1],[o,u]=[e.length/i,i],l=t.D5U.getTypedArrayFromDType(s,o*r),c=t.D5U.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*u,s=e.subarray(n,n+u);let i=new Array(s.length);s.forEach(((e,t)=>i[t]={value:e,index:t})),r<i.length&&(cg(i,r),i=i.slice(0,r)),a&&i.sort(lg);const o=t*r,h=l.subarray(o,o+r),p=c.subarray(o,o+r);for(let e=0;e<r;e++)h[e]=i[e].value,p[e]=i[e].index}const h=n.slice();return h[h.length-1]=r,[(0,t.f3b)(h,s,l),(0,t.f3b)(h,"int32",c)]}const pg={kernelName:t.cWu,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;Zl(r,"topk");const o=n.data.get(r.dataId).values,[u,l]=hg(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},dg={kernelName:t.wx7,backendName:"cpu",kernelFunc:function(e){const{inputs:n,attrs:s,backend:r}=e,{image:a,transforms:i}=n,{interpolation:o,fillMode:u,fillValue:l,outputShape:c}=s,[h,p,d,f]=a.shape,[m,g]=null!=c?c:[p,d],y=[h,m,g,f],b=t.D5U.computeStrides(a.shape),x=b[0],w=b[1],v=b[2],k=t.D5U.computeStrides(y),I=k[0],S=k[1],N=k[2],T=t.D5U.getTypedArrayFromDType(a.dtype,t.D5U.sizeFromShape(y));T.fill(l);const C=r.data.get(a.dataId).values,$=r.data.get(i.dataId).values;for(let e=0;e<h;++e){const t=1===i.shape[0]?$:$.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let r=0;r<f;++r){let a;const i=t[6]*s+t[7]*n+1;if(0===i)continue;const c=(t[0]*s+t[1]*n+t[2])/i,h=(t[3]*s+t[4]*n+t[5])/i,f=fg(c,d,u),m=fg(h,p,u);switch(o){case"nearest":a=gg(C,p,d,x,w,v,e,m,f,r,l);break;case"bilinear":a=yg(C,p,d,x,w,v,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}T[e*I+n*S+s*N+r]=a}return r.makeTensorInfo(y,a.dtype,T)}return{dataId:r.write(T,y,a.dtype),shape:a.shape,dtype:a.dtype}}};function fg(e,n,s){switch(s){case"reflect":return function(e,n){let s=e;if(s<0)if(n<=1)s=0;else{const e=2*n;s<e&&(s=e*Math.trunc(-s/e)+s),s=s<-n?s+e:-s-1}else if(s>n-1)if(n<=1)s=0;else{const e=2*n;s-=e*Math.trunc(s/e),s>=n&&(s=e-s-1)}return t.D5U.clamp(0,s,n-1)}(e,n);case"wrap":return function(e,n){let s=e;if(s<0)if(n<=1)s=0;else{const e=n-1;s+=n*(Math.trunc(-s/e)+1)}else if(s>n-1)if(n<=1)s=0;else{const e=n-1;s-=n*Math.trunc(s/e)}return t.D5U.clamp(0,s,n-1)}(e,n);case"nearest":return function(e,n){return t.D5U.clamp(0,e,n-1)}(e,n);default:return function(e,t){return e}(e)}}function mg(e,t,n,s,r,a,i,o,u,l,c){return 0<=o&&o<t&&0<=u&&u<n?e[i*s+o*r+u*a+l]:c}function gg(e,t,n,s,r,a,i,o,u,l,c){return mg(e,t,n,s,r,a,i,Math.round(o),Math.round(u),l,c)}function yg(e,t,n,s,r,a,i,o,u,l,c){const h=Math.floor(o),p=Math.floor(u),d=h+1,f=p+1;return(d-o)*((f-u)*mg(e,t,n,s,r,a,i,h,p,l,c)+(u-p)*mg(e,t,n,s,r,a,i,h,f,l,c))+(o-h)*((f-u)*mg(e,t,n,s,r,a,i,d,p,l,c)+(u-p)*mg(e,t,n,s,r,a,i,d,f,l,c))}function bg(e,n,s,r){const a=t.D5U.parseAxisParam(n,s)[0],i=[1,s[0],1];for(let e=0;e<a;e++)i[0]*=s[e];i[1]=s[a];for(let e=a+1;e<s.length;e++)i[2]*=s[e];const o={},u=new Int32Array(s[a]),l=new t.YDk(i,r,e),c=[],h=1===i[0]&&1===i[2];for(let t=0;t<s[a];t++){let n;if(h)n=e[t].toString();else{const e=[];for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==o[n])u[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,u[t]=e,c.push(t)}}const p=i.slice();p[1]=Object.keys(o).length;const d=new t.YDk(p,r);c.forEach(((e,t)=>{for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)d.set(l.get(n,e,s),n,t,s)}));const f=s.slice();return f[a]=p[1],{outputValues:d.values,outputShape:f,indices:u}}const xg={kernelName:t.kpP,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;Zl(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=bg(i,r,a.shape,a.dtype);return[s.makeTensorInfo(u,a.dtype,o),s.makeTensorInfo([l.length],"int32",l)]}},wg={kernelName:t.ToN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],u=new Array(i-1);let l=0;for(let e=0;e<i;e++)e!==a&&(u[l++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=vh({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=Mc({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return p}},vg={kernelName:t.Qvg,backendName:"cpu",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,segmentIds:i}=n,{numSegments:o}=r;Zl(a,"unsortedSegmentSum");const u=[],l=[],c=a.shape.length-i.shape.length;let h=i;for(let e=0;e<c;++e){const t=Dp({inputs:{input:h},backend:s,attrs:{dim:e+1}});h=t,l.push(t)}for(let e=0;e<o;++e){const n=t.D5U.createScalarValue(e,"int32"),r=s.makeTensorInfo([],"int32",n),i=bp({inputs:{a:r,b:h},backend:s}),o=$c({inputs:{x:i},backend:s,attrs:{dtype:"float32"}}),c=hp({inputs:{a:o,b:a},backend:s}),p=dp({inputs:{x:c},backend:s,attrs:{axis:0,keepDims:!1}});u.push(p),l.push(r),l.push(i),l.push(o),l.push(c),l.push(p)}const p=Ef({inputs:u,backend:s,attrs:{axis:0}});return l.forEach((e=>s.disposeIntermediateTensorInfo(e))),p}},kg=[Uc,Pc,Gc,jc,Oc,Xc,Qc,Zc,Jc,eh,nh,rh,ih,lh,hh,mh,gh,yh,bh,zc,xh,Ih,Th,Ch,Ec,Ah,Rh,Ic,_h,Bh,Uh,Wh,Ph,Vh,Gh,Hh,Xh,Kh,Yh,Qh,Zh,Jh,ep,np,sp,rp,ap,ip,op,up,mp,rc,gp,xp,Cp,Ap,Rp,Op,jp,qp,Kp,Zp,td,nd,sd,ad,od,cd,dd,ic,fd,Mh,gd,bd,wd,uc,Id,Td,$d,Dd,_d,Md,Bd,Wd,Pd,Vd,jd,Kd,Yd,Qd,Zd,Jd,ef,tf,nf,af,of,cf,df,pp,mf,yf,xf,vf,Sf,Nf,$f,Af,Df,Ff,pc,Mf,zf,Wf,Xf,Kf,Tc,Bp,Qf,fc,gc,Lc,Zf,Jf,em,tm,nm,sm,am,um,cm,dm,fm,bm,wc,wm,km,Sm,kh,pf,Cm,$m,Am,Rm,Fm,Om,Mm,Lm,Um,Wm,Gm,jm,qm,Qm,eg,ng,Pp,fp,rg,ig,ug,pg,dg,Yc,xg,wg,vg,Cf];for(const e of kg)(0,t.wCN)(e);const Ig={},Sg={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ng(e,n){if(!(e in Ig)||null!=n){const s=function(e,n){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const s=null==n?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):n;return s.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete Ig[e]}),!1),(0,t.OBj)().getBool("SOFTWARE_WEBGL_ENABLED")&&(Sg.failIfMajorPerformanceCaveat=!1),1===e?s.getContext("webgl",Sg)||s.getContext("experimental-webgl",Sg):s.getContext("webgl2",Sg)}(e,n);if(null===s)return console.log("Could not get context for WebGL version",e),null;Ig[e]=s}const s=Ig[e];return null==s||s.isContextLost()?(delete Ig[e],Ng(e)):(s.disable(s.DEPTH_TEST),s.disable(s.STENCIL_TEST),s.disable(s.BLEND),s.disable(s.DITHER),s.disable(s.POLYGON_OFFSET_FILL),s.disable(s.SAMPLE_COVERAGE),s.enable(s.SCISSOR_TEST),s.enable(s.CULL_FACE),s.cullFace(s.BACK),Ig[e])}var Tg,Cg,$g;function Eg(e,t){return[t,e]}function Ag(e){const n=t.D5U.sizeFromShape(e),s=Math.ceil(n/4);return t.D5U.sizeToSquarishShape(s)}function Dg(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Rg(e,n){const s=e;let r,a,i,o,u,l,c,h,p,d;return 2===(0,t.OBj)().getNumber("WEBGL_VERSION")?(r=s.R32F,a=s.R16F,i=s.RGBA16F,o=s.RGBA32F,u=s.RED,c=4,h=1,p=s.HALF_FLOAT,d=s.FLOAT,l=s.RGBA8):(r=e.RGBA,a=e.RGBA,i=e.RGBA,o=s.RGBA,u=e.RGBA,c=4,h=4,p=null!=n?n.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function _g(e,n){const s=n();return(0,t.OBj)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),s}function Fg(e){return!!((0,t.OBj)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Og(e,t){return Gg(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Tg||(Tg={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(Cg||(Cg={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}($g||($g={}));const Mg=/ERROR: [0-9]+:([0-9]+):/g;function Lg(e,n){const s=Mg.exec(n);if(null==s)return console.log(`Couldn't parse line number in error: ${n}`),void console.log(e);const r=+s[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map(((e,n)=>t.D5U.rightPad((n+1).toString(),i)+e));let u=0;for(let e=0;e<o.length;e++)u=Math.max(o[e].length,u);const l=o.slice(0,r-1),c=o.slice(r-1,r),h=o.slice(r);console.log(l.join("\n")),console.log(n.split("\n")[0]),console.log(`%c ${t.D5U.rightPad(c[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}function Bg(e,t){if(_g(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function zg(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(_g(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),_g(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),_g(e,(()=>e.enableVertexAttribArray(o))),!0)}function Ug(e,t,n,s){_g(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),_g(e,(()=>e.activeTexture(e.TEXTURE0+n))),_g(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),_g(e,(()=>e.uniform1i(n,s)))}function Wg(e,t,n){_g(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),_g(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Pg(e,t){_g(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),_g(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function Vg(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Gg(e,t,n){const s=_g(e,(()=>t()));if(null==s)throw new Error(n);return s}function Hg(e,n=2){return t.D5U.sizeFromShape(e.slice(0,e.length-n))}function jg(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Xg(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Hg(e),...jg(e)]),t}function qg(e){return e%2==0}function Kg(e,n){if(e=e.slice(-2),n=n.slice(-2),t.D5U.arraysEqual(e,n))return!0;if(!e.length||!n.length)return!0;if(0===e[0]||0===e[1]||0===n[0]||0===n[1])return!0;if(e.length!==n.length){const t=e.slice(-1)[0],s=n.slice(-1)[0];if(t===s)return!0;if(qg(t)&&qg(s)&&(1===e[0]||1===n[0]))return!0}return e[1]===n[1]&&qg(e[0])&&qg(n[0])}let Yg,Qg;function Zg(e,t){return null!=e.getExtension(t)}function Jg(e){try{if(null!=Ng(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function ey(e){const t=Rg(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function ty(e,n){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&t.D5U.assert("complex64"!==e.dtype,(()=>`${n} does not support complex64 tensors in the WebGL backend.`))}))}const ny=(0,t.OBj)();function sy(){let e,n,s,r,a,i,o,u,l,c;return 2===(0,t.OBj)().getNumber("WEBGL_VERSION")?(e="#version 300 es",n="in",s="out",r="in",a="texture",i="outputColor",o="out vec4 outputColor;",u=(0,t.OBj)().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",n="attribute",s="varying",r="varying",a="texture2D",i="gl_FragColor",o="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:n,varyingVs:s,varyingFs:r,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function ry(e,n,s="index"){const r=t.D5U.computeStrides(n);return r.map(((t,n)=>`int ${e[n]} = ${s} / ${t}; ${n===r.length-1?`int ${e[n+1]} = ${s} - ${e[n]} * ${t}`:`index -= ${e[n]} * ${t}`};`)).join("")}function ay(e,n,s="index"){const r=t.D5U.computeStrides(n);return r.map(((t,n)=>`int ${e[n]} = ${s} / outShapeStrides[${n}]; ${n===r.length-1?`int ${e[n+1]} = ${s} - ${e[n]} * outShapeStrides[${n}]`:`index -= ${e[n]} * outShapeStrides[${n}]`};`)).join("")}function iy(e){const n=t.D5U.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${n[0]} + coords.y * ${n[1]} + coords.z;\n  }\n`}ny.registerFlag("HAS_WEBGL",(()=>ny.getNumber("WEBGL_VERSION")>0)),ny.registerFlag("WEBGL_VERSION",(()=>Jg(2)?2:Jg(1)?1:0)),ny.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),ny.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===ny.get("WEBGL_VERSION"))),ny.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),ny.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),ny.registerFlag("WEBGL_PACK",(()=>ny.getBool("HAS_WEBGL"))),ny.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_CLIP",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_PACK_REDUCE",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_LAZILY_UNPACK",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_CONV_IM2COL",(()=>ny.getBool("WEBGL_PACK"))),ny.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==Yg){const t=Ng(e);Yg=t.getParameter(t.MAX_TEXTURE_SIZE)}return Yg}(ny.getNumber("WEBGL_VERSION")))),ny.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Qg){const t=Ng(e);Qg=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Qg)}(ny.getNumber("WEBGL_VERSION")))),ny.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=ny.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Ng(e);return t=Zg(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Zg(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),ny.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>ny.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!t.C2$.isMobile())),ny.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=Ng(e);if(1===e){if(!Zg(t,"OES_texture_float"))return!1}else if(!Zg(t,"EXT_color_buffer_float"))return!1;return ey(t)}(ny.getNumber("WEBGL_VERSION")))),ny.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!ny.getBool("WEBGL_FORCE_F16_TEXTURES")&&ny.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),ny.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=Ng(e);if(1!==e){if(Zg(t,"EXT_color_buffer_float"))return ey(t);const e="EXT_color_buffer_half_float";if(Zg(t,e)){const n=t.getExtension(e);return function(e,t){const n=Rg(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!Zg(t,"OES_texture_float")&&!!Zg(t,"WEBGL_color_buffer_float")&&ey(t)}(ny.getNumber("WEBGL_VERSION")))),ny.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=ny.getNumber("WEBGL_VERSION"))&&null!=Ng(e).fenceSync;var e})),ny.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>ny.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),ny.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),ny.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>t.C2$.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),ny.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),ny.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),ny.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),ny.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),ny.registerFlag("WEBGL_EXP_CONV",(()=>!1)),ny.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>ny.getBool("IS_TEST"))),ny.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),ny.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),ny.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),ny.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const oy="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:uy}=t.Wap;function ly(e,n,s){const r=[];if(e.forEach((e=>{const n=t.D5U.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${n>1?`[${n}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),s.enableShapeUniforms){const{uniformShape:t}=xy(s.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),s.enableShapeUniforms){switch(n.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}s.customUniforms&&s.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=r.join("\n"),i=e.map((e=>function(e,n,s=!1,r){let a="";a+=s?hy(e,r):cy(e,r);const i=e.shapeInfo.logicalShape,o=n.logicalShape;return i.length<=o.length&&(a+=s?function(e,n){const s=e.name,r=s.charAt(0).toUpperCase()+s.slice(1),a="get"+r+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=n.logicalShape.length,u=uy(e.shapeInfo.logicalShape,n.logicalShape),l=by(o),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&u.length>=1?"coords = 0;":u.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let d="";d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+c]}`)).join(", ");let f="return outputValue;";const m=1===t.D5U.sizeFromShape(e.shapeInfo.logicalShape),g=1===t.D5U.sizeFromShape(n.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=i-2,t=i-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${r}(${d});\n      ${f}\n    }\n  `}(e,n):function(e,n){const s=e.name,r=s.charAt(0).toUpperCase()+s.slice(1),a="get"+r+"AtOutCoords",i=n.texShape,o=e.shapeInfo.texShape,u=e.shapeInfo.logicalShape.length,l=n.logicalShape.length;if(!e.shapeInfo.isUniform&&u===l&&null==e.shapeInfo.flatOffset&&t.D5U.arraysEqual(o,i))return`\n      float ${a}() {\n        return sampleTexture(${s}, resultUV);\n      }\n    `;const c=by(l),h=uy(e.shapeInfo.logicalShape,n.logicalShape),p=l-u;let d;const f=["x","y","z","w","u","v"];d=0===u?"":l<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";return m=l<2&&u>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+p]}`)).join(", "),`\n    float ${a}() {\n      ${c} coords = getOutputCoords();\n      ${d}\n      return get${r}(${m});\n    }\n  `}(e,n)),a}(e,n,s.packedInputs,s.enableShapeUniforms))).join("\n"),o=n.texShape,u=sy(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${py}\n    ${dy}\n    ${fy}\n  `}(u);return n.isPacked?(c=function(e,n,s){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,n,s);case 2:return function(e,n,s){const r=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];if(t.D5U.arraysEqual(e,n))return s?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return s?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,n,s);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,n,s);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",u="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,n,s)}}(n.logicalShape,o,s.enableShapeUniforms),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,n,s){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,n,s);case 2:return function(e,n,s){return t.D5U.arraysEqual(e,n)?s?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `:1===e[1]?s?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.x * ${n[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?s?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.x * ${n[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:s?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,n,s);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${ay(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=ry(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,n,s);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${ay(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=ry(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,n,s);case 5:return function(e,t){const n=ry(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,n);case 6:return function(e,t){const n=ry(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,n);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(n.logicalShape,o,s.enableShapeUniforms),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),s.packedInputs&&(p+=my),[p,l,h,a,c,i,s.userCode].join("\n")}function cy(e,n=!1){const s=e.shapeInfo.logicalShape;switch(s.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=gy(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,u]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${u}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,n);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${yy(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=gy(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,n);case 2:return function(e,n){const s=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape;if(null!=i&&t.D5U.arraysEqual(s,i)){if(n)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=i[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${i[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:u}=t.D5U.squeezeShape(s),l=o;if(l.length<s.length){const t=["row","col"];return`\n      ${cy(wy(e,l),n)}\n      float ${a}(int row, int col) {\n        return ${a}(${vy(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${s[1]}, 1)));\n        ${yy(e)}\n      }\n    `;const c=i[0],h=i[1],p=gy(r);return 1===h?n?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${s[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `:1===c?n?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${s[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${h}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `:n?`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${s[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${c}, ${h}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,n);case 3:return function(e,n){const s=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=s[1]*s[2],o=s[2],{newShape:u,keptDims:l}=t.D5U.squeezeShape(s),c=u;if(c.length<s.length){const t=["row","col","depth"];return`\n        ${cy(wy(e,c),n)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${vy(t,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${i}, ${o}, 1)));\n        ${yy(e)}\n      }\n    `;const h=e.shapeInfo.texShape,p=h[0],d=h[1],f=e.shapeInfo.flatOffset;if(d===i&&null==f)return n?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(d===o&&null==f)return n?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${s[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const m=gy(r);return n?`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${m};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${i} + col * ${o} + depth + ${m};\n        vec2 uv = uvFromFlat(${p}, ${d}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,n);case 4:return function(e,n){const s=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=s[3],o=s[2]*i,u=s[1]*o,{newShape:l,keptDims:c}=t.D5U.squeezeShape(s);if(l.length<s.length){const t=["row","col","depth","depth2"];return`\n      ${cy(wy(e,l),n)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${vy(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${o}, ${i}, 1)));\n        ${yy(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1],m=`int stride2 = ${r}Shape[3];`,g=`int stride1 = ${r}Shape[2] * stride2;`,y=`int stride0 = ${r}Shape[1] * stride1;`;if(f===u&&null==h)return n?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(f===i&&null==h)return n?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s[1]*s[2]}, ${s[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const b=gy(r);return n?`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${g}\n      ${y}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${b});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${o} +\n          depth * ${i} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${f}, index + ${b});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,n);case 5:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[4],i=n[3]*a,o=n[2]*i,u=n[1]*o,{newShape:l,keptDims:c}=t.D5U.squeezeShape(n);if(l.length<n.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${cy(wy(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${vy(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${o}, ${i}, ${a})) +\n          depth3;\n        ${yy(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===u&&null==h)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]},\n               ${n[2]*n[3]}, ${n[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${o} + depth * ${i} +\n          depth2 * ${a} + depth3 + ${gy(s)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(e);case 6:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),{newShape:a,keptDims:i}=t.D5U.squeezeShape(n);if(a.length<n.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${cy(wy(e,a))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${vy(t,i)});\n      }\n    `}const o=n[5],u=n[4]*o,l=n[3]*u,c=n[2]*l,h=n[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${c}, ${l}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${yy(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,f=d[0],m=d[1];if(m===h&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(m===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]*n[4]},\n               ${n[2]*n[3]*n[4]},\n               ${n[3]*n[4]},\n               ${n[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${c} + depth * ${l} +\n          depth2 * ${u} + depth3 * ${o} + depth4 + ${gy(s)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(e);default:throw new Error(`${s.length}-D input sampling is not yet supported`)}}function hy(e,n){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${sy().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=sy();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,n);case 2:return function(e,n){const s=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,o=i[0],u=i[1],l=sy();if(null!=i&&t.D5U.arraysEqual(s,i))return n?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${o}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(n)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const c=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(s[1]/2)}, ${c[0]}, ${c[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,n);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${hy(wy(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${vy(a,s)});\n        }\n      `}const o=sy();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const u=i[0],l=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,n);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=sy();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=u[0],c=u[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=a[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,n)}}const py="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",dy="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fy="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",my="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function gy(e){return`offset${e}`}function yy(e){const n=e.name,s=t.D5U.sizeFromShape(e.shapeInfo.logicalShape);return s<2?`return ${n};`:`\n    for (int i = 0; i < ${s}; i++) {\n      if (i == index) {\n        return ${n}[i];\n      }\n    }\n  `}function by(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function xy(e,n,s){const{newShape:r,keptDims:a}=t.D5U.squeezeShape(n),i=n.length,o=e&&3===i&&1===n[0],u=o?n.slice(1):r,l=!e&&i>1&&!t.D5U.arraysEqual(n,s)&&r.length<i||o;return{useSqueezeShape:l,uniformShape:l?u:n,keptDims:a}}function wy(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function vy(e,t){return t.map((t=>e[t])).join(", ")}function ky(e,n,s){const r={},a={},i={},o=[];let u,l,c,h=null,p=null;p=e.getUniformLocation(s,"NAN",!1),1===(0,t.OBj)().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(s,"INFINITY",!1));const d=!1;for(let t=0;t<n.variableNames.length;t++){const o=n.variableNames[t];r[o]=e.getUniformLocation(s,o,d),r[`offset${o}`]=e.getUniformLocation(s,`offset${o}`,d),n.enableShapeUniforms&&(a[`${o}Shape`]=e.getUniformLocation(s,`${o}Shape`,d),i[`${o}TexShape`]=e.getUniformLocation(s,`${o}TexShape`,d))}return n.enableShapeUniforms&&(u=e.getUniformLocation(s,"outShape",d),c=e.getUniformLocation(s,"outShapeStrides",d),l=e.getUniformLocation(s,"outTexShape",d)),n.customUniforms&&n.customUniforms.forEach(((t,n)=>{o[n]=e.getUniformLocation(s,t.name,d)})),{uniformLocations:r,customUniformLocations:o,infLoc:h,nanLoc:p,inShapesLocations:a,inTexShapesLocations:i,outShapeLocation:u,outShapeStridesLocation:c,outTexShapeLocation:l}}function Iy(e,n){if(e.length!==n.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${n.length} inputs`);e.forEach(((e,s)=>{const r=e.logicalShape,a=n[s],i=a.shape;if(!t.D5U.arraysEqual(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!t.D5U.arraysEqual(o,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${u} must match`)}))}function Sy(e){return(0,t.OBj)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Ny{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Tg.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=sy();this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?ay(["r","c","d"],e):ry(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Ty{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Tg.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=sy();this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?ay(["r","c","d"],e):ry(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Cy{constructor(e){this.variableNames=["A"],this.outTexUsage=Cg.DOWNLOAD;const t=sy();this.outputShape=e,this.userCode=`\n      ${oy}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class $y{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Cg.DOWNLOAD;const t=sy();this.outputShape=e,this.userCode=`\n      ${oy}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const Ey={R:0,G:1,B:2,A:3};class Ay{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=sy();this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${Ey[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iy(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class Dy{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=sy();this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iy(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function Ry(e,n,s,r,a,i){!function(e,n){const s=(0,t.OBj)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||n<=0)throw new Error(`Requested texture size [${e}x${n}] is invalid.`);if(e>s||n>s)throw new Error(`Requested texture size [${e}x${n}] greater than WebGL maximum on this browser / GPU [${s}x${s}].`)}(n,s);const o=function(e){return Gg(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),u=e.TEXTURE_2D;return _g(e,(()=>e.bindTexture(u,o))),_g(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),_g(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),_g(e,(()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST))),_g(e,(()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,t.OBj)().getNumber("WEBGL_VERSION")?_g(e,(()=>e.texImage2D(u,0,r,n,s,0,a,i,null))):_g(e,(()=>e.texStorage2D(u,1,r,n,s))),_g(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[s,n]}}function _y(e){return e.internalFormatFloat}function Fy(e){return e.internalFormatHalfFloat}function Oy(e){return e.downloadTextureFormat}function My(e){return e.internalFormatPackedFloat}function Ly(e){return e.internalFormatPackedHalfFloat}class By{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const n=(0,t.OBj)().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){Ig[e]=t}(n,e)):this.gl=Ng(n),e=this.gl,2===(0,t.OBj)().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>_g(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>_g(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>_g(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>_g(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>_g(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>_g(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>_g(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>_g(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,t.OBj)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",n="OES_texture_half_float";if(this.textureFloatExtension=Og(this.gl,e),Zg(this.gl,n))this.textureHalfFloatExtension=Og(this.gl,n);else if((0,t.OBj)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),Zg(this.gl,r))this.colorBufferHalfFloatExtension=Og(this.gl,r);else if((0,t.OBj)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",Zg(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!Zg(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(e){return function(e,t){const n=Gg(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return _g(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),_g(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=Gg(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return _g(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),_g(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return Gg(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Rg(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,t.OBj)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;_g(e,(()=>e.finish())),_g(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),_g(e,(()=>e.deleteFramebuffer(this.framebuffer))),_g(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),_g(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),_g(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=Eg(t,n);return Ry(e,r,a,_y(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=Eg(t,n);return Ry(e,r,a,Fy(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=Eg(t,n);return Ry(e,r,a,Oy(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,n){this.throwIfDisposed(),function(e,n,s){_g(e,(()=>e.bindTexture(e.TEXTURE_2D,n))),s.data instanceof Uint8Array?2===(0,t.OBj)().getNumber("WEBGL_VERSION")?_g(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,s.width,s.height,e.RGBA,e.UNSIGNED_BYTE,s.data))):_g(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,s.width,s.height,0,e.RGBA,e.UNSIGNED_BYTE,s.data))):2===(0,t.OBj)().getNumber("WEBGL_VERSION")?_g(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,s))):_g(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,s))),_g(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,n)}uploadDenseMatrixToTexture(e,n,s,r){this.throwIfDisposed(),function(e,n,s,r,a,i){let o,u,l;_g(e,(()=>e.bindTexture(e.TEXTURE_2D,n))),a instanceof Uint8Array?(o=new Uint8Array(s*r*4),u=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(s*r*4),u=e.FLOAT,l=i.internalFormatPackedFloat),o.set(a),2===(0,t.OBj)().getNumber("WEBGL_VERSION")?_g(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,s,r,e.RGBA,u,o))):_g(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,s,r,0,e.RGBA,u,o))),_g(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,n,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=Dg(t,n);return Ry(e,r,a,Ly(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=Dg(t,n);return Ry(e,r,a,My(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Pg(this.gl,this.framebuffer),this.outputTexture=null),_g(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=Eg(t,n),i=new Uint8Array(t*n*4);return _g(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const u=e,l=new Float32Array(function(e,t){const[n,s]=Dg(e,t);return n*s*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();_g(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return _g(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),_g(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),_g(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let n,s;if((0,t.OBj)().getBool("WEBGL_FENCE_API_ENABLED")){const t=e,r=t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),s=()=>{const e=t.clientWaitSync(r,0,0);return e===t.ALREADY_SIGNALED||e===t.CONDITION_SATISFIED},n=r}else(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(n=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(n,(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:n,isFencePassed:s}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return _g(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const n=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=sy();return function(e,t){const n=Gg(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(_g(e,(()=>e.shaderSource(n,t))),_g(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(n));const s=function(e){return Gg(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(n);let r;return _g(n,(()=>n.attachShader(s,this.vertexShader))),_g(n,(()=>n.attachShader(s,e))),function(e,n){if(_g(e,(()=>e.linkProgram(n))),!(0,t.OBj)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(n,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}(n,s),r=Object.assign(s,{vao:this.createVertexArray()}),this.bindVertexArray(r.vao),_g(n,(()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),console.assert(function(e,t,n){return _g(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),zg(e,t,"clipSpacePos",n,3,20,0)&&zg(e,t,"uv",n,2,20,12)}(n,r,this.vertexBuffer),"gpgpu_util.bindVertexProgramAttributeStreams not fully successful."),this.debug&&Bg(n,r),this.setProgram(r),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(_g(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&(this.bindVertexArray(this.program.vao),this.debug&&Bg(this.gl,this.program)),_g(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Gg(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),_g(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),Ug(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=Dg(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Bg(this.gl,this.program),Vg(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}_g(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),_g(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Og(this.gl,2===(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),n=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,n),n}endQuery(){if(2===(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await t.D5U.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,n){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:n}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in(0,t.OBj)().platform&&(s=(0,t.OBj)().platform.setTimeoutCustom.bind((0,t.OBj)().platform)),t.D5U.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,s)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Wg(this.gl,e,this.framebuffer),this.debug&&Vg(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Wg(this.gl,this.outputTexture,this.framebuffer),this.debug&&Vg(this.gl)):Pg(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;Wg(s,e,this.framebuffer),this.debug&&Vg(s),this.outputTexture=e,_g(s,(()=>s.viewport(0,0,t,n))),_g(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),_g(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:zy,bincountImpl:Uy,bincountReduceImpl:Wy,castImpl:Py,ceilImpl:Vy,concatImpl:Gy,equalImpl:Hy,expImpl:jy,expm1Impl:Xy,floorImpl:qy,gatherNdImpl:Ky,gatherV2Impl:Yy,greaterImpl:Qy,greaterEqualImpl:Zy,lessImpl:Jy,lessEqualImpl:eb,linSpaceImpl:tb,logImpl:nb,maxImpl:sb,maximumImpl:rb,minimumImpl:ab,multiplyImpl:ib,negImpl:ob,notEqualImpl:ub,prodImpl:lb,raggedGatherImpl:cb,raggedRangeImpl:hb,raggedTensorToTensorImpl:pb,rangeImpl:db,rsqrtImpl:fb,scatterImpl:mb,sigmoidImpl:gb,simpleAbsImpl:yb,sliceImpl:bb,sparseFillEmptyRowsImpl:xb,sparseReshapeImpl:wb,sparseSegmentReductionImpl:vb,sqrtImpl:kb,stridedSliceImpl:Ib,stringNGramsImpl:Sb,stringSplitImpl:Nb,stringToHashBucketFastImpl:Tb,subImpl:Cb,tileImpl:$b,topKImpl:Eb,transposeImpl:Ab,uniqueImpl:Db}=e;function Rb(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function _b(e,t){return 1===t?[e]:Rb(e,t)}class Fb{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Sy(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=_b("rc",this.rank),t=by(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Ob{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${s[r]}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}(["r","c","d"],"inputShape"):ry(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iy(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Mb{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=Bb(t,n),r=zb(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=Lb(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===$g.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===$g.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===$g.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===$g.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===$g.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,n,s,r){if(null==this.freeTextures)return;const a=Bb(s,r),i=zb(n,a,r);i in this.freeTextures||(this.freeTextures[i]=[]);const o=Lb(n,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=(0,t.OBj)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[i],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Lb(e,t,n,s,r){const a=function(e,t){switch(e){case $g.PACKED_2X2_FLOAT32:return My(t);case $g.PACKED_2X2_FLOAT16:return Ly(t);case $g.UNPACKED_FLOAT32:return _y(t);case $g.UNPACKED_FLOAT16:return Fy(t);case $g.PACKED_4X1_UNSIGNED_BYTE:return Oy(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=Dg(e[0],e[1]);i=t*n}else{const[t,n]=Eg(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function Bb(e,n){if(e===Cg.UPLOAD)return $g.PACKED_2X2_FLOAT32;if(e===Cg.RENDER||null==e)return function(e){return(0,t.OBj)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?$g.PACKED_2X2_FLOAT32:$g.UNPACKED_FLOAT32:e?$g.PACKED_2X2_FLOAT16:$g.UNPACKED_FLOAT16}(n);if(e===Cg.DOWNLOAD||e===Cg.PIXELS)return $g.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function zb(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Ub{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Wb="if (isnan(x)) return x;",Pb="return abs(x);",Vb=Wb+"\n  return (x < 0.0) ? 0.0 : x;\n",Gb=Wb+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Hb="return x;";class jb{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Xb{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length);const t=e.length,n=_b("rc",t),s=by(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const qb=t.GDt.ZA,Kb={},Yb=(0,t.OBj)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Qb extends t.Zuw{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,t.OBj)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let n;if(null!=e){if(e instanceof By)n=e;else{const s=Ng((0,t.OBj)().getNumber("WEBGL_VERSION"),e);n=new By(s)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=Ng((0,t.OBj)().getNumber("WEBGL_VERSION"));n=new By(e),this.binaryCache=((s=(0,t.OBj)().getNumber("WEBGL_VERSION"))in Kb||(Kb[s]={}),Kb[s]),this.gpgpuCreatedLocally=!0}var s;this.gpgpu=n,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Mb(this.gpgpu),this.numMBBeforeWarning=null==(0,t.OBj)().global.screen?1024:(0,t.OBj)().global.screen.height*(0,t.OBj)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new t.JLz(this,(0,t.SRH)())}nextDataId(){return Qb.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,r]},o.texShape=[s,r];const u=Xg(t),l=new Ay(u,!1,a),c=this.runWebGLProgram(l,[i],n,[[s,r]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,n,s){if(((0,t.OBj)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,t.OBj)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===s&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:n,dtype:s,values:e,usage:Cg.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,n,s,r,a){if((0,t.OBj)().getBool("DEBUG")&&this.checkNumericalProblems(n),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:s,dtype:r,values:n,usage:Cg.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const n=this.texData.get(e),{values:s,dtype:r,complexTensorInfos:a,slice:i,shape:o,isPacked:u}=n;if(null!=i){let t;t=u?new jb(o,Hb):new Ub(o,Hb);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=s)return this.convertAndCacheOnCPU(e);if("string"===r)return s;const l=null!=this.activeTimers;let c,h;if(l&&(c=t.D5U.now()),"complex64"===r){const e=this.readSync(a.real.dataId),n=this.readSync(a.imag.dataId);h=t.Wap.mergeRealAndImagArrays(e,n)}else h=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=t.D5U.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,complexTensorInfos:o,isPacked:u}=n;if(null!=a){let t;t=u?new jb(r,Hb):new Ub(r,Hb);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:i}],i),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=s)return this.convertAndCacheOnCPU(e);if((0,t.OBj)().getBool("DEBUG")&&!(0,t.OBj)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,t.OBj)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==i&&(0,t.OBj)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(t.texture.texture,...Ag(r))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),n=e[0],s=e[1];c=t.Wap.mergeRealAndImagArrays(n,s)}else if(null==h)c=this.getValuesFromTexture(e);else{const e=t.D5U.sizeFromShape(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=h){const e=this.gpgpu.gl;_g(e,(()=>e.deleteBuffer(h)))}const p=this.convertAndCacheOnCPU(e,c),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,t.SRH)().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,n={}){const s=this.texData.get(e),{values:r,shape:a,slice:i,dtype:o,isPacked:u,texture:l}=s;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let t;t=u?new jb(a,Hb):new Ub(a,Hb);const s=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:o}],o),r=this.readToGPU(s,n);return this.disposeIntermediateTensorInfo(s),r}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const c=this.decode(e,n.customTexShape),h=(0,t.SRH)().makeTensorFromTensorInfo(c),p=this.texData.get(c.dataId);return Object.assign({tensorRef:h},p.texture)}bufferSync(e){const n=this.readSync(e.dataId);if("string"===e.dtype)try{const s=n.map((e=>t.D5U.decodeString(e)));return(0,t.f3b)(e.shape,e.dtype,s)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,t.f3b)(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let n=0;n<e.length;n++){const s=e[n];if(!Fg(s)){if((0,t.OBj)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${s} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:n,dtype:s,isPacked:r}=this.texData.get(e),a=t.D5U.sizeFromShape(n);if((0,t.OBj)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const t=this.decode(e),s=this.texData.get(t.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...Ag(n)).subarray(0,a);return this.disposeIntermediateTensorInfo(t),r}const i=(0,t.OBj)().getBool("WEBGL_PACK")&&!0===r,o=i?Xg(n):n,u=i?new $y(o):new Cy(o),l=this.runWebGLProgram(u,[{shape:o,dtype:s,dataId:e}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}timerAvailable(){return(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const n=this.activeTimers,s=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=s,r=!0):this.activeTimers.push(s),this.activeTimers=s,e();const a=t.D5U.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=t.D5U.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=n,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=t.D5U.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:t.D5U.now(),endMs:null}}endTimer(e){return(0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=t.D5U.now(),e)}async getQueryTime(e){if((0,t.OBj)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const n=e;return n.endMs-n.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,n=Yb){return(0,t.OBj)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&t.D5U.sizeFromShape(e.shape)<n))}getGPGPUContext(){return this.gpgpu}where(e){t.Wap.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const n=e.dataSync();return qb(e.shape,n)}packedUnaryOp(e,n,s){const r=new jb(e.shape,n),a=this.compileAndRun(r,[e],s);return(0,t.SRH)().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=yb(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,t.OBj)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Pb,e.dtype);const n=new Ub(e.shape,Pb),s=this.compileAndRun(n,[e]);return(0,t.SRH)().makeTensorFromTensorInfo(s)}makeTensorInfo(e,n,s){let r;if("string"===n&&null!=s&&s.length>0&&t.D5U.isString(s[0])){const a=s.map((e=>t.D5U.encodeString(e)));r=this.write(a,e,n)}else r=this.write(s,e,n);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:n}}makeOutput(e,n,s){return(0,t.SRH)().makeTensorFromTensorInfo(this.makeTensorInfo(e,n,s),this)}unpackTensor(e){const t=new Xb(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Fb(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Hg(e.shape),...jg(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Hg(t),...jg(t)],a=new Ob(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,n){const s=this.texData.get(e),{isPacked:r,shape:a,dtype:i}=s;if(null!=n){const e=t.D5U.sizeFromShape(a),s=n[0]*n[1]*4;t.D5U.assert(e<=s,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=Xg(a);let u;u=r?new Ty(o):new Ny(o);const l=[null!=n?n:Ag(o)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(u,[{shape:o,dtype:i,dataId:e}],i,l,!0,n).dataId}}runWebGLProgram(e,n,s,r,a=!1,i){const o=this.makeTensorInfo(e.outputShape,s),u=this.texData.get(o.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===Tg.DENSE){const t=null!=i?i:Ag(e.outputShape);u.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===t.D5U.sizeFromShape(o.shape))return u.values=t.D5U.getTypedArrayFromDType(o.dtype,0),o;const l=[],c=n.map((n=>{if("complex64"===n.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let s=this.texData.get(n.dataId);if(null==s.texture){if(!e.packedInputs&&t.D5U.sizeFromShape(n.shape)<=(0,t.OBj)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:n.shape,texData:null,isUniform:!0,uniformValues:s.values};e.packedInputs&&(s.isPacked=!0,s.shape=n.shape)}if(this.uploadToGPU(n.dataId),!!s.isPacked!=!!e.packedInputs)n=s.isPacked?this.unpackTensor(n):this.packTensor(n),l.push(n),s=this.texData.get(n.dataId);else if(s.isPacked&&!Kg(s.shape,n.shape)){const e=n,t=n.shape;n.shape=s.shape,n=this.packedReshape(n,t),l.push(n),s=this.texData.get(n.dataId),e.shape=t}return{shape:n.shape,texData:s,isUniform:!1}}));this.uploadToGPU(o.dataId);const h={shape:o.shape,texData:u,isUniform:!1},p=function(e,n,s){let r="";n.concat(s).forEach((n=>{const a=null!=n.texData&&null!=n.texData.slice&&n.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!n.isUniform){const i=n.texData.texShape,{useSqueezeShape:o,uniformShape:u,keptDims:l}=xy(e.packedInputs,n.shape,i);let c="",h="",p="";if(1===u.length&&e.packedInputs){const e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];c=`${e[0]>1}_${e[1]>1}`}else if(2!==u.length||e.packedInputs){if(u.length>2&&!e.packedInputs){const e=t.D5U.computeStrides(u);p=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else h=`${u[0]>1}_${u[1]>1}`;const d=n.shape.length,f=2===u.length&&t.D5U.arraysEqual(n.shape,i),m=1===t.D5U.sizeFromShape(n.shape),g=t.Wap.getBroadcastDims(n.shape,s.shape),y=!e.packedInputs&&d===s.shape.length&&t.D5U.arraysEqual(i,s.texData.texShape),b=e.packedInputs||u.length>2?"":`${i[0]>1}_${i[1]>1}`;r+=`${d}_${y}_${o?l:""}_${u.length}_${m}_${g}_${f}_${c}_${h}_${p}_${b}_${a}`}else{const e=n.isUniform?"uniform":n.texData.texShape;r+=`${n.shape}_${e}_${a}`}}));const a=e.userCode;let i=e.constructor.name;return i+="_"+r+"_"+a+`${(0,t.OBj)().getNumber("WEBGL_VERSION")}`,i}(e,c,h),d=this.getAndSaveBinary(p,(()=>function(e,n,s,r){const a=s.map(((e,t)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:n.variableNames[t],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=ly(a,o,n),l=function(e,n){const s=Gg(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(_g(e,(()=>e.shaderSource(s,n))),_g(e,(()=>e.compileShader(s))),(0,t.OBj)().get("ENGINE_COMPILE_ONLY"))return s;if(!1===e.getShaderParameter(s,e.COMPILE_STATUS))throw Lg(n,e.getShaderInfoLog(s)),new Error("Failed to compile fragment shader.");return s}(e.gl,u),c=e.createProgram(l);return(0,t.OBj)().get("ENGINE_COMPILE_ONLY")?{program:n,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:i,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:n,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:i,outShapeInfo:o},ky(e,n,c))}(this.gpgpu,e,c,h))),f=null!=this.activeTimers;let m;f&&(m=this.startTimer()),(0,t.OBj)().get("ENGINE_COMPILE_ONLY")||function(e,n,s,r,a){n.program.enableShapeUniforms||(Iy(n.inShapeInfos,s),Iy([n.outShapeInfo],[r]));const i=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,o[0],o[1]):e.setOutputMatrixTexture(i.texture,o[0],o[1]),e.setProgram(n.webGLProgram),1===(0,t.OBj)().getNumber("WEBGL_VERSION")&&null!==n.infLoc&&e.gl.uniform1f(n.infLoc,1/0),null!==n.nanLoc&&e.gl.uniform1f(n.nanLoc,NaN),s.forEach(((s,r)=>{const a=n.program.variableNames[r],i=n.uniformLocations[a],o=n.uniformLocations[`offset${a}`],u=n.inShapesLocations[`${a}Shape`],l=n.inTexShapesLocations[`${a}TexShape`];if(u){const{uniformShape:t}=xy(n.program.packedInputs,s.shape,s.texData.texShape);switch(t.length){case 1:e.gl.uniform1iv(u,new Int32Array(t));break;case 2:e.gl.uniform2iv(u,new Int32Array(t));break;case 3:e.gl.uniform3iv(u,new Int32Array(t));break;case 4:e.gl.uniform4iv(u,new Int32Array(t))}}if(l&&e.gl.uniform2i(l,s.texData.texShape[0],s.texData.texShape[1]),null!=i)if(s.isUniform)if(t.D5U.sizeFromShape(s.shape)<2)e.gl.uniform1f(i,s.uniformValues[0]);else{let t=s.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=s.texData.slice&&null!=o&&e.gl.uniform1i(o,s.texData.slice.flatOffset),e.setInputMatrixTexture(s.texData.texture.texture,i,r)}));const u=n.outShapeLocation;if(u)switch(r.shape.length){case 1:e.gl.uniform1iv(u,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(u,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(u,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(u,new Int32Array(r.shape))}if(n.outShapeStridesLocation){const s=t.D5U.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(n.outShapeStridesLocation,new Int32Array(s));break;case 3:e.gl.uniform2iv(n.outShapeStridesLocation,new Int32Array(s));break;case 4:e.gl.uniform3iv(n.outShapeStridesLocation,new Int32Array(s))}}n.outTexShapeLocation&&e.gl.uniform2i(n.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),n.program.customUniforms&&a&&n.program.customUniforms.forEach(((t,s)=>{const r=n.customUniformLocations[s],i=a[s];if("float"===t.type)e.gl.uniform1fv(r,i);else if("vec2"===t.type)e.gl.uniform2fv(r,i);else if("vec3"===t.type)e.gl.uniform3fv(r,i);else if("vec4"===t.type)e.gl.uniform4fv(r,i);else if("int"===t.type)e.gl.uniform1iv(r,i);else if("ivec2"===t.type)e.gl.uniform2iv(r,i);else if("ivec3"===t.type)e.gl.uniform3iv(r,i);else{if("ivec4"!==t.type)throw Error(`uniform type ${t.type} is not supported yet.`);e.gl.uniform4iv(r,i)}})),e.executeProgram()}(this.gpgpu,d,c,h,r),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),f&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const g=(0,t.OBj)().get("WEBGL_FLUSH_THRESHOLD");if(g>0){const e=t.D5U.now();e-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,t.OBj)().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,t.OBj)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,t.lub)((()=>{if(!(0,t.OBj)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,t.OBj)().getBool("DEBUG");(0,t.OBj)().set("DEBUG",!1);const n=this.abs((0,t.iD$)(1e-8)).dataSync()[0];if((0,t.OBj)().set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const n=this.texData.get(e),{shape:s,dtype:r,values:a,texture:i,usage:o,isPacked:u}=n;if(null!=i)return;const l=null!=this.activeTimers;let c;l&&(c=t.D5U.now());let h=n.texShape;if(null==h&&(h=function(e,n=!1){let s=(0,t.OBj)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=(0,t.OBj)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&(0,t.OBj)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=s/2),n&&(s*=2,r*=2,1===(e=e.map(((n,s)=>s>=e.length-2?t.D5U.nearestLargerEven(e[s]):e[s]))).length&&(e=[2,e[0]])),2!==e.length){const n=t.D5U.squeezeShape(e);e=n.newShape}let a=t.D5U.sizeFromShape(e),i=null;e.length<=1&&a<=s?i=[1,a]:2===e.length&&e[0]<=s&&e[1]<=s?i=e:3===e.length&&e[0]*e[1]<=s&&e[2]<=s?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=s&&e[1]*e[2]<=s?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=s&&e[3]<=s?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=s&&e[1]*e[2]*e[3]<=s&&(i=[e[0],e[1]*e[2]*e[3]]);const o=null!=i&&Math.max(...i)>r&&Math.min(...i)<=(n?2:1)&&Math.min(...i)>0;if(null==i||o)if(n){const n=Hg(e);let s=2,r=2;e.length&&([s,r]=jg(e)),a=n*(s/2)*(r/2),i=t.D5U.sizeToSquarishShape(a).map((e=>2*e))}else i=t.D5U.sizeToSquarishShape(a);return i}(s,u),n.texShape=h),null!=a){const e=Xg(s);let i,o=h[1],p=h[0];const d=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!u&&d||([o,p]=Dg(h[0],h[1])),i=u?new Dy(e,d):new Ay(e,d);const f=d?[p,o]:h,m=this.makeTensorInfo(f,r),g=this.texData.get(m.dataId);g.usage=d?Cg.PIXELS:Cg.UPLOAD,g.texShape=f,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),o,p,a);const y=[[p,o]],b=!0,x=this.runWebGLProgram(i,[m],r,y,b),w=this.texData.get(x.dataId);n.texShape=w.texShape,n.isPacked=w.isPacked,n.usage=w.usage,(0,t.OBj)().get("ENGINE_COMPILE_ONLY")?this.disposeData(x.dataId):(n.texture=w.texture,n.values=null,this.texData.delete(x.dataId)),this.disposeIntermediateTensorInfo(m),l&&(this.uploadWaitMs+=t.D5U.now()-c)}else{const e=this.acquireTexture(h,o,r,u);n.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,n){return e[0]*e[1]*t.D5U.bytesPerElement(n)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,t.glt)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw Lg(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,inShapesLocations:a,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:u,outTexShapeLocation:l}=ky(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.inShapesLocations=a,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}createTensorFromTexture(e,n,s){const{texture:r,height:a,width:i,channels:o}=e,u=(0,t.SRH)().backend;if(!u.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=u.writeTexture(r,n,s,a,i,o);return(0,t.SRH)().makeTensorFromDataId(l,n,s,u)}}Qb.nextDataId=0,t.C2$.isBrowser()&&(0,t.jqO)("webgl",(()=>new Qb),2);const Zb="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class Jb{constructor(e,n,s){this.variableNames=["A","B"],this.outputShape=t.Wap.assertAndGetBroadcastShape(n,s),this.enableShapeUniforms=Sy(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const ex="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class tx{constructor(e,n,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.Wap.assertAndGetBroadcastShape(n,s);const a=this.outputShape.length;this.enableShapeUniforms=Sy(a);let i="";if(r)if(0===a||1===t.D5U.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${by(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?i+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=_b("coords",a);this.enableShapeUniforms?i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function nx(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const sx={kernelName:t.iJz,backendName:"webgl",kernelFunc:nx};function rx(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=nx({inputs:{x:s},backend:n}),u=nx({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:u},a}const ax={kernelName:t.Zz9,backendName:"webgl",kernelFunc:rx},ix="return (a < 0.) ? b * a : a;",ox="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",ux={kernelName:t.J$2,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{alpha:i}=r,o=s.makeTensorInfo([],"float32",t.D5U.createScalarValue(i,"float32")),u=(0,t.OBj)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tx(ox,a.shape,o.shape):new Jb(ix,a.shape,o.shape),l=s.runWebGLProgram(u,[a,o],"float32");return s.disposeIntermediateTensorInfo(o),l}},lx="return (a < 0.) ? b * a : a;",cx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",hx={kernelName:t.o0g,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{x:r,alpha:a}=n,i=(0,t.OBj)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tx(cx,r.shape,a.shape):new Jb(lx,r.shape,a.shape);return s.runWebGLProgram(i,[r,a],"float32")}},px="if (isnan(x)) return x;";function dx({opSnippet:e,packedOpSnippet:n,cpuKernelImpl:s,dtype:r}){return({inputs:a,backend:i})=>{const{x:o}=a,u=i,l=r||o.dtype;if(u.shouldExecuteOnCPU([o])&&null!=s){const e=u.texData.get(o.dataId),t=s(e.values,l);return u.makeTensorInfo(o.shape,l,t)}let c;return c=(0,t.OBj)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new jb(o.shape,n):new Ub(o.shape,e),u.runWebGLProgram(c,[o],l)}}function fx({opSnippet:e,packedOpSnippet:n,checkOutOfBounds:s=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:i}){return({inputs:o,backend:u})=>{const{a:l,b:c}=o,h=u;if(r&&"complex64"===l.dtype){const n=h.texData.get(l.dataId),s=h.texData.get(c.dataId),[r,a]=[[n.complexTensorInfos.real,s.complexTensorInfos.real],[n.complexTensorInfos.imag,s.complexTensorInfos.imag]].map((n=>{const[s,r]=n,a={dataId:s.dataId,dtype:s.dtype,shape:l.shape},i={dataId:r.dataId,dtype:r.dtype,shape:c.shape},o=new Jb(e,l.shape,c.shape);return h.runWebGLProgram(o,[a,i],(0,t.x8V)(s.dtype,r.dtype))})),i=rx({inputs:{real:r,imag:a},backend:h});return h.disposeIntermediateTensorInfo(r),h.disposeIntermediateTensorInfo(a),i}const p=i||(0,t.x8V)(l.dtype,c.dtype);if(("string"===l.dtype||"string"===c.dtype||h.shouldExecuteOnCPU([l,c]))&&null!=a){const e=h.texData.get(l.dataId).values,n=h.texData.get(c.dataId).values,s="string"===l.dtype?t.Wap.fromUint8ToStringArray(e):e,r="string"===l.dtype?t.Wap.fromUint8ToStringArray(n):n,[i,o]=a(l.shape,c.shape,s,r,p),u=h.makeTensorInfo(o,p);return h.texData.get(u.dataId).values=i,u}let d;return d=(0,t.OBj)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new tx(n,l.shape,c.shape,s):new Jb(e,l.shape,c.shape),h.runWebGLProgram(d,[l,c],p)}}function mx(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":Vb;if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":Gb;if("prelu"===e)return t?cx:lx;if("leakyrelu"===e)return t?ox:ix;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class gx{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Sy(this.outputShape.length);const l=s?e[1]:e[2],c=Math.ceil(l/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class yx{constructor(e,n,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=t.Wap.assertAndGetBroadcastShape(n,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const bx="return a * b;";function xx(e){const{inputs:n,backend:s}=e,{a:r,b:a}=n,i=t.Wap.upcastType(r.dtype,a.dtype);if("complex64"===r.dtype){const e=s.texData.get(r.dataId),t=s.texData.get(a.dataId),n=new yx("return areal * breal - aimag * bimag;",r.shape,a.shape),i=new yx("return areal * bimag + aimag * breal;",r.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],u=s.runWebGLProgram(n,o,"float32"),l=s.runWebGLProgram(i,o,"float32"),c=rx({inputs:{real:u,imag:l},backend:s});return s.disposeIntermediateTensorInfo(u),s.disposeIntermediateTensorInfo(l),c}if(s.shouldExecuteOnCPU([r,a])){const e=s.texData.get(r.dataId),t=s.texData.get(a.dataId),[n,o]=ib(r.shape,a.shape,e.values,t.values,i),u=s.makeTensorInfo(o,i);return s.texData.get(u.dataId).values=n,u}let o;return o=(0,t.OBj)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tx(bx,r.shape,a.shape):new Jb(bx,r.shape,a.shape),s.runWebGLProgram(o,[r,a],i)}const wx={kernelName:t.wYn,backendName:"webgl",kernelFunc:xx};function vx(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{shape:i}=r,o=s,u=t.D5U.sizeFromShape(a.shape),l=t.D5U.inferFromImplicitShape(i,u),c=t.D5U.sizeFromShape(l);t.D5U.assert(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const h=o.texData.get(a.dataId);return!h.isPacked||Kg(a.shape,l)||null!==h.texture&&Kg(h.shape,l)?(o.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const s=[Hg(e.shape),...jg(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[Hg(t),...jg(t)],i=new Ob(a,s),o=[s],u=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(a,l,o)}const kx={kernelName:t.HZH,backendName:"webgl",kernelFunc:vx};class Ix{constructor(e,n){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:a,outSize:i}=e;this.outputShape=[r,i];const o=4*Math.floor(s/4),u=s%4;let l="sumValue += dot(values, ones);";if(null!=n){const e=1/n;l=`sumValue += dot(values * ${t.D5U.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Sx{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function Nx(e,n,s,r){const a=function(e){const n=[];for(;0===n.length||1!==n[n.length-1].outSize;){const s=n.length?n[n.length-1].outSize:e[1],r=t.Wap.computeOptimalWindowSize(s);n.push({inSize:s,windowSize:r,outSize:Math.ceil(s/r)})}return n}(e.shape);let i=e;for(let t=0;t<a.length;t++){const{inSize:o,windowSize:u,outSize:l}=a[t];let c,h;c="mean"===s?0===t?new Ix({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new Ix({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new Sx({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},s),h=i,i=r.runWebGLProgram(c,[i],n),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return i}class Tx{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=by(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class Cx{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=by(this.rank),r=Rb("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function $x(e,n,s){const r=(0,t.OBj)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Cx(e.shape,n):new Tx(e.shape,n);return s.runWebGLProgram(r,[e],e.dtype)}function Ex(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r;return function(e,n,s,r){const a=n,i=e.shape.length,o=t.D5U.parseAxisParam(a,e.shape);let u=o;const l=t.Wap.getAxesPermutation(u,i),c=null!=l;let h=e;c&&(h=$x(e,l,r),u=t.Wap.getInnerMostAxes(u.length,i)),t.Wap.assertAxesAreInnerMostDims("sum",u,i);const[p,d]=t.Wap.computeOutAndReduceShapes(h.shape,u);let f=p;s&&(f=t.Wap.expandShapeToKeepDim(p,o));const m=t.D5U.sizeFromShape(d),g=vx({inputs:{x:h},attrs:{shape:[t.D5U.sizeFromShape(e.shape)/m,m]},backend:r}),y=Nx(g,(0,t.z4k)(e.dtype),"sum",r),b=vx({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),c&&r.disposeIntermediateTensorInfo(h),b}(a,i,o,s)}const Ax={kernelName:t.GBy,backendName:"webgl",kernelFunc:Ex};function Dx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,u=new Array(o);for(let e=0;e<u.length;e++)u[e]=r.shape[a[e]];let l;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=Ab(e,r.shape,r.dtype,a,u);l=i.makeTensorInfo(u,r.dtype),i.texData.get(l.dataId).values=t}else l=$x(r,a,i);return l}const Rx={kernelName:t.G3Y,backendName:"webgl",kernelFunc:Dx};function _x({a:e,b:n,transposeA:s,transposeB:r,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:l=null}){const c=e.shape.length,h=n.shape.length,p=s?e.shape[c-2]:e.shape[c-1],d=r?n.shape[h-1]:n.shape[h-2],f=s?e.shape[c-1]:e.shape[c-2],m=r?n.shape[h-2]:n.shape[h-1],g=e.shape.slice(0,-2),y=n.shape.slice(0,-2),b=t.D5U.sizeFromShape(g),x=t.D5U.sizeFromShape(y),w=t.Jyw.assertAndGetBroadcastShape(e.shape.slice(0,-2),n.shape.slice(0,-2)).concat([f,m]);t.D5U.assert(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${n.shape} and transposeA=${s} and transposeB=${r} must match.`));const v=s?[b,p,f]:[b,f,p],k=r?[x,m,d]:[x,d,m],I=vx({inputs:{x:e},backend:a,attrs:{shape:v}}),S=vx({inputs:{x:n},backend:a,attrs:{shape:k}}),N=[I,S],T=Math.max(b,x),C=s?I.shape[1]:I.shape[2],$=null!=i,E=null!=o,A="leakyrelu"===l,D=null!=l?mx(l,!0):null;let R;if((1===f||1===m)&&C>1e3&&!1===($||E||A||null!=D)){let e=I,t=S;s&&(e=Dx({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),N.push(e)),r&&(t=Dx({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),N.push(t));const n=1===m;let i=e;1!==m&&(i=vx({inputs:{x:e},backend:a,attrs:{shape:[T,C,1]}}),N.push(i));const o=1===m?2:1;let u=t;n&&(u=vx({inputs:{x:t},backend:a,attrs:{shape:[T,1,C]}}),N.push(u));const l=xx({inputs:{a:i,b:u},backend:a});R=Ex({inputs:{x:l},backend:a,attrs:{axis:o,keepDims:!0}}),N.push(l)}else{const l=(0,t.x8V)(e.dtype,n.dtype),c=new gx(v,k,[T,f,m],s,r,$,D,E,A),h=[I,S];if(null!=i&&h.push(i),E&&h.push(o),A){const e=a.makeTensorInfo([],"float32",t.D5U.createScalarValue(u,"float32"));h.push(e),N.push(e)}R=a.runWebGLProgram(c,h,l)}const _=vx({inputs:{x:R},backend:a,attrs:{shape:w}});N.push(R);for(const e of N)a.disposeIntermediateTensorInfo(e);return _}const Fx={kernelName:t.usg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=s;return _x({a:r,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},Ox="return abs(x);",Mx={kernelName:t.SYM,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{x:r}=n;if(s.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=s.texData.get(r.dataId),t=yb(e.values);return s.makeTensorInfo(r.shape,r.dtype,t)}let a;return a=(0,t.OBj)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new jb(r.shape,Ox):new Ub(r.shape,Ox),s.runWebGLProgram(a,[r],r.dtype)}},Lx=dx({opSnippet:Wb+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Bx={kernelName:t.VGw,backendName:"webgl",kernelFunc:Lx},zx=dx({opSnippet:Wb+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Ux={kernelName:t.SpW,backendName:"webgl",kernelFunc:zx},Wx="return a + b;",Px=fx({opSnippet:Wx,packedOpSnippet:Wx,supportsComplex:!0,cpuKernelImpl:zy}),Vx={kernelName:t.mm_,backendName:"webgl",kernelFunc:Px};class Gx{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class Hx{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const jx={kernelName:t.Xze,backendName:"webgl",kernelFunc:function e(n){const{inputs:s,backend:r}=n,a=s;if(1===a.length)return nx({inputs:{x:a[0]},backend:r});if(a.length>(0,t.OBj)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:r}),s=e({inputs:a.slice(t),backend:r});return e({inputs:[n,s],backend:r})}const i=a.map((e=>e.dtype)).reduce(((e,n)=>(0,t.x8V)(e,n))),o=a.map((e=>e.shape)),u=(0,t.OBj)().getBool("WEBGL_PACK")?new Hx(a[0].shape,o):new Gx(a[0].shape,o);return r.runWebGLProgram(u,a,i)}},Xx={kernelName:t.oT6,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r,u=a.shape.length,l=t.D5U.parseAxisParam(i,a.shape);let c=l;const h=t.Wap.getAxesPermutation(c,u);let p=a;null!=h&&(p=Dx({inputs:{x:a},backend:s,attrs:{perm:h}}),c=t.Wap.getInnerMostAxes(c.length,u)),t.Wap.assertAxesAreInnerMostDims("all",c,u);const[d,f]=t.Wap.computeOutAndReduceShapes(p.shape,c),m=vx({inputs:{x:p},backend:s,attrs:{shape:[-1,t.D5U.sizeFromShape(f)]}}),g=Nx(m,m.dtype,"all",s);let y;return y=vx(o?{inputs:{x:g},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(d,l)}}:{inputs:{x:g},backend:s,attrs:{shape:d}}),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),null!=h&&s.disposeIntermediateTensorInfo(p),y}},qx={kernelName:t.IKK,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r,u=a.shape.length,l=t.D5U.parseAxisParam(i,a.shape);let c=l;const h=t.Wap.getAxesPermutation(c,u);let p=a;null!=h&&(p=Dx({inputs:{x:a},backend:s,attrs:{perm:h}}),c=t.Wap.getInnerMostAxes(c.length,u)),t.Wap.assertAxesAreInnerMostDims("any",c,u);const[d,f]=t.Wap.computeOutAndReduceShapes(p.shape,c),m=vx({inputs:{x:p},backend:s,attrs:{shape:[-1,t.D5U.sizeFromShape(f)]}}),g=Nx(m,m.dtype,"any",s);let y;return y=vx(o?{inputs:{x:g},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(d,l)}}:{inputs:{x:g},backend:s,attrs:{shape:d}}),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),null!=h&&s.disposeIntermediateTensorInfo(p),y}};class Kx{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Yx{constructor(e,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,t.D5U.assert(e.length>2,(()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],i=Math.ceil(a/n);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,u=o.length,l=by(u),c=_b("coords",u);let h,p;if(1===i){p=u+1;const e=by(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else p=u,h=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=_b("sourceLocR",p-1).concat("inIdx.r"),y=_b("sourceLocG",p-1).concat("inIdx.g"),b=_b("sourceLocB",p-1).concat("inIdx.b"),x=_b("sourceLocA",p-1).concat("inIdx.a"),w="max"===s?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,I=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${o[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${o[u-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${n};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${n}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Qx(e,n,s,r=null){let a=n.shape[0],i=n.shape[1];null!=r&&(a=r.shape[0],i=r.shape[1]);const o=t.Wap.computeOptimalWindowSize(i),u={windowSize:o,inSize:i,batchSize:a,outSize:Math.ceil(i/o)},l=new Kx(u,s,null==r),c=[n];null!=r&&c.push(r);const h=e.runWebGLProgram(l,c,"int32");if(1===h.shape[1])return h;const p=Qx(e,n,s,h);return e.disposeIntermediateTensorInfo(h),p}function Zx(e,n,s,r=null){const a=null!=r?r.shape:n.shape,i=a[a.length-1],o=t.Wap.computeOptimalWindowSize(i),u=new Yx(a,o,s,null==r),l=null==r?[n]:[n,r],c=e.runWebGLProgram(u,l,"int32");if(c.shape.length===n.shape.length){const t=Zx(e,n,s,c);return e.disposeIntermediateTensorInfo(c),t}return c}function Jx(e,n,s,r){const a=[s];if(t.Wap.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,n.shape.length),!(0,t.OBj)().getBool("WEBGL_PACK_REDUCE")||n.shape.length<=2){const s=[],i=e.texData.get(n.dataId);let o=n;null!==i&&i.isPacked&&(o=e.unpackTensor(n),s.push(o));const[u,l]=t.Wap.computeOutAndReduceShapes(o.shape,a),c=t.D5U.sizeFromShape(l),h=vx({inputs:{x:o},backend:e,attrs:{shape:[-1,c]}});s.push(h);const p=Qx(e,h,r);s.push(p);const d=vx({inputs:{x:p},backend:e,attrs:{shape:u}});return s.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return Zx(e,n,r)}const ew={kernelName:t.sJF,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i}=r;let o=t.D5U.parseAxisParam(i,a.shape);const u=t.Wap.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=Dx({inputs:{x:a},backend:s,attrs:{perm:u}}),c.push(l),o=t.Wap.getInnerMostAxes(o.length,l.shape.length)),t.Wap.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const h=Jx(s,l,o[0],"max");return c.forEach((e=>s.disposeIntermediateTensorInfo(e))),h}},tw={kernelName:t.aJk,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i}=r;let o=t.D5U.parseAxisParam(i,a.shape);const u=t.Wap.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=Dx({inputs:{x:a},backend:s,attrs:{perm:u}}),c.push(l),o=t.Wap.getInnerMostAxes(o.length,l.shape.length)),t.Wap.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const h=Jx(s,l,o[0],"min");return c.forEach((e=>s.disposeIntermediateTensorInfo(e))),h}},nw=dx({opSnippet:Wb+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),sw={kernelName:t.M2y,backendName:"webgl",kernelFunc:nw},rw=dx({opSnippet:Wb+"return log(x + sqrt(x * x + 1.0));"}),aw={kernelName:t.qw7,backendName:"webgl",kernelFunc:rw},iw=dx({opSnippet:Wb+"\n  return atan(x);\n"}),ow={kernelName:t.jMg,backendName:"webgl",kernelFunc:iw},uw=fx({opSnippet:Zb+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+ex+"\n  return result;\n"}),lw={kernelName:t.QCc,backendName:"webgl",kernelFunc:uw},cw=dx({opSnippet:Wb+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),hw={kernelName:t.Oyi,backendName:"webgl",kernelFunc:cw};class pw{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class dw{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const fw={kernelName:t.JhU,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n;ty(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=t.Wap.computePool2DInfo(a.shape,i,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&t.D5U.arraysEqual(c.inShape,c.outShape))return nx({inputs:{x:a},backend:s});const h=new pw(c,"avg",!1);return s.runWebGLProgram(h,[a],"float32")}},mw={kernelName:t._k9,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=r,h=t.Wap.computePool3DInfo(a.shape,i,o,[1,1,1],u,l,c),p=new dw(h,"avg",!1);return s.runWebGLProgram(p,[a],"float32")}};class gw{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=o-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yw{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const bw={kernelName:t.IMb,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i}=n,o=i,{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=t.Wap.computePool3DInfo(o.shape,u,l,[1,1,1],c,h),d=new yw(p);return s.runWebGLProgram(d,[a],o.dtype)}},xw={kernelName:t.ROF,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i}=n,o=i;ty([a,i],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,h=t.Wap.computePool2DInfo(o.shape,u,l,1,c),p=new gw(h);return s.runWebGLProgram(p,[a],o.dtype)}},ww={kernelName:t.XLW,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return _x({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class vw{constructor(e,n,s,r,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],t.Wap.assertAndGetBroadcastShape(e,n),t.Wap.assertAndGetBroadcastShape(e,s);let o="0.0";null!=r&&(t.Wap.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let u="1.0";null!=a&&(t.Wap.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class kw{constructor(e,n,s,r,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],t.Wap.assertAndGetBroadcastShape(e,n),t.Wap.assertAndGetBroadcastShape(e,s);let o="vec4(0.0)";null!=r&&(t.Wap.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=a&&(t.Wap.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Iw={kernelName:t.sHE,backendName:"webgl",kernelFunc:({inputs:e,backend:n,attrs:s})=>{const{x:r,mean:a,variance:i,offset:o,scale:u}=e;t.D5U.assert(a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),t.D5U.assert(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),t.D5U.assert(null==u||a.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=s;null==l&&(l=.001);const c=[r,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=u&&(p=u.shape,c.push(u));const d=(0,t.OBj)().getBool("WEBGL_PACK_NORMALIZATION")?new kw(r.shape,a.shape,i.shape,h,p,l):new vw(r.shape,a.shape,i.shape,h,p,l);return n.runWebGLProgram(d,c,c[0].dtype)}};class Sw{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=by(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return Nw.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${Nw[t]} = start[${t}] + coords.${Nw[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const Nw=["x","y","z","w","u","v"];class Tw{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=by(this.rank),n=_b("coords",this.rank),s=_b("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function Cw(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{begin:i,size:o}=r,[u,l]=t.kuN.parseSliceParams(a,i,o);if(t.kuN.assertParamsValid(a,u,l),0===t.D5U.sizeFromShape(l))return s.makeTensorInfo(l,a.dtype,[]);if(s.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=s.texData.get(a.dataId),t=bb(e.values,u,l,a.shape,a.dtype);return s.makeTensorInfo(l,a.dtype,t)}const{isPacked:c}=s.texData.get(a.dataId),h=t.kuN.isSliceContinous(a.shape,u,l);if(c||!h){const e=(0,t.OBj)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tw(l):new Sw(l),n=[u];return s.runWebGLProgram(e,[a],a.dtype,n)}return s.uploadToGPU(a.dataId),function(e,n,s,r){const a=r.texData.get(e.dataId),i=r.makeTensorInfo(s,e.dtype),o=r.texData.get(i.dataId);Object.assign(o,a),o.refCount=1,o.shape=s,o.dtype=e.dtype;let u=t.kuN.computeFlatOffset(n,t.D5U.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),o.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,l+1),i}(a,u,l,s)}const $w={kernelName:t.p2w,backendName:"webgl",kernelFunc:Cw},Ew={kernelName:t.zws,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{blockShape:i,crops:o}=r;t.D5U.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const u=i.reduce(((e,t)=>e*t)),l=t.Wap.getReshaped(a.shape,i,u),c=t.Wap.getPermuted(l.length,i.length),h=t.Wap.getReshapedPermuted(a.shape,i,u),p=t.Wap.getSliceBeginCoords(o,i.length),d=t.Wap.getSliceSize(h,o,i.length),f=[],m=vx({inputs:{x:a},backend:s,attrs:{shape:l}}),g=Dx({inputs:{x:m},backend:s,attrs:{perm:c}}),y=vx({inputs:{x:g},backend:s,attrs:{shape:h}}),b=Cw({inputs:{x:y},backend:s,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>s.disposeIntermediateTensorInfo(e))),b}},Aw={kernelName:t.zvY,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),u=n.readSync(a.dataId),l=Uy(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,l)}},Dw={kernelName:t.eEB,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{s0:r,s1:a}=n,i=s.readSync(r.dataId),o=s.readSync(a.dataId),u=t.Wap.assertAndGetBroadcastShape(Array.from(i),Array.from(o));return s.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},Rw=fx({opSnippet:"return float(a != b);",cpuKernelImpl:ub,dtype:"bool"}),_w={kernelName:t.yQU,backendName:"webgl",kernelFunc:Rw};function Fw(e){const{inputs:t,backend:n}=e,{input:s}=t;return nx({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const Ow={kernelName:t.xJR,backendName:"webgl",kernelFunc:Fw},Mw={kernelName:t.RFZ,backendName:"webgl",kernelFunc:function e(n){const{inputs:s,backend:r,attrs:a}=n,{x:i}=s,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return nx({inputs:{x:i},backend:r});const n=t.lls(i.shape),s=e({inputs:{x:i},backend:r,attrs:{dtype:"float32"}}),a=rx({inputs:{real:s,imag:n},backend:r});return n.dispose(),r.disposeIntermediateTensorInfo(s),a}if("complex64"===i.dtype){const t=Fw({inputs:{input:i},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!t.D5U.hasEncodingLoss(i.dtype,o)){const e=nx({inputs:{x:i},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([i])){const e=r.texData.get(i.dataId).values,[t,n,s]=Py(e,i.shape,i.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return function(e,t){const n=new Ub(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(i,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",t.D5U.getTypedArrayFromDType("bool",1)),n=Rw({inputs:{a:i,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),n}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},Lw="return ceil(x);",Bw=dx({opSnippet:Lw,packedOpSnippet:Lw,cpuKernelImpl:Vy}),zw={kernelName:t.gJX,backendName:"webgl",kernelFunc:Bw};class Uw{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Ww{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Pw={kernelName:t.xnO,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{clipValueMin:i,clipValueMax:o}=r;let u;u=(0,t.OBj)().getBool("WEBGL_PACK_CLIP")?new Ww(a.shape):new Uw(a.shape);const l=[[i],[o]];return s.runWebGLProgram(u,[a],a.dtype,l)}};class Vw{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Gw(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Hw={kernelName:t.yj2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new Vw(s.shape),i=[Gw(s,r.complexTensorInfos.real),Gw(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class jw{constructor(e){this.outputShape=[],this.outputShape=t.Wap.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const n=new Array(e.length-1);n[0]=e[0][1];for(let t=1;t<n.length;t++)n[t]=n[t-1]+e[t][1];const s=[`if (yC < ${n[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<n.length;e++){const t=n[e-1];s.push(`else if (yC < ${n[e]}) setOutput(getT${e}(yR, yC-${t}));`)}const r=n.length,a=n[n.length-1];s.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class Xw{constructor(e,n){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=t.Wap.computeOutShape(e,n);const s=this.outputShape,r=s.length,a=by(r),i=_b("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const u=new Array(e.length-1);u[0]=e[0][n];for(let t=1;t<u.length;t++)u[t]=u[t-1]+e[t][n];const l=o[n],c=o.slice(-2),h=o.join();let p=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let e=1;e<u.length;e++){const t=u[e-1];p+=`\n        if (${l} < ${u[e]}  && ${l} >= ${u[e-1]}) {\n          return getChannel(\n            getT${e}(${qw(o,l,t)}),\n            vec2(${qw(c,l,t)}));\n        }`}const d=u.length,f=u[u.length-1];p+=`\n        return getChannel(\n          getT${d}(${qw(o,l,f)}),\n          vec2(${qw(c,l,f)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[r-1]} = ${i[r-1]} + 1;\n        if (${i[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[r-2]} = ${i[r-2]} + 1;\n        if (${i[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[r-1]} = ${i[r-1]} - 1;\n        if (${i[r-2]} < ${s[r-2]} &&\n            ${i[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function qw(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function Kw(e){const{inputs:t,backend:n}=e,{input:s}=t;return nx({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const Yw={kernelName:t.J_u,backendName:"webgl",kernelFunc:Kw};function Qw(e,n,s){const r=e[0].dtype;if("complex64"===r){const t=e.map((e=>Fw({inputs:{input:e},backend:s}))),r=e.map((e=>Kw({inputs:{input:e},backend:s}))),a=Qw(t,n,s),i=Qw(r,n,s),o=rx({inputs:{real:a,imag:i},backend:s});return t.forEach((e=>s.disposeIntermediateTensorInfo(e))),r.forEach((e=>s.disposeIntermediateTensorInfo(e))),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}let a=s.shouldExecuteOnCPU(e);if("string"===r&&(a=!0),a){const a=e.map((e=>{const r=t.D5U.sizeFromShape(e.shape.slice(n));return vx({inputs:{x:e},backend:s,attrs:{shape:[-1,r]}})})),i=a.map((e=>({vals:s.readSync(e.dataId),shape:e.shape}))),o=t.Wap.computeOutShape(a.map((e=>e.shape)),1),u=1===a[0].shape[0],l=Gy(i,o,r,u),c=t.Wap.computeOutShape(e.map((e=>e.shape)),n),h=s.makeTensorInfo(c,r,l);return a.forEach((e=>s.disposeIntermediateTensorInfo(e))),h}const i=e.filter((e=>t.D5U.sizeFromShape(e.shape)>0)),o=(0,t.OBj)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&i[0].shape.length>1;if(1===i.length){const t=o?new Ub(e[0].shape,Hb):new jb(e[0].shape,Hb);return s.runWebGLProgram(t,e,r)}const u=(0,t.OBj)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(i.length>u){const e=[];for(let t=0;t<i.length;t+=u){const r=i.slice(t,t+u);e.push(Qw(r,n,s))}const t=Qw(e,n,s);for(const t of e)s.disposeIntermediateTensorInfo(t);return t}if(o){const e=new Xw(i.map((e=>e.shape)),n);return s.runWebGLProgram(e,i,r)}const{tensors2D:l,outShape:c}=function(e,n,s){const r=t.Wap.computeOutShape(e.map((e=>e.shape)),n);return{tensors2D:e.map((e=>vx({inputs:{x:e},attrs:{shape:[-1,t.D5U.sizeFromShape(e.shape.slice(n))]},backend:s}))),outShape:r}}(i,n,s),h=new jw(l.map((e=>e.shape))),p=s.runWebGLProgram(h,l,r);l.forEach((e=>s.disposeIntermediateTensorInfo(e)));const d=vx({inputs:{x:p},attrs:{shape:c},backend:s});return s.disposeIntermediateTensorInfo(p),d}function Zw(e){const{inputs:n,backend:s,attrs:r}=e,{axis:a}=r,i=t.D5U.parseAxisParam(a,n[0].shape)[0],o=n.map((e=>e.shape));t.Wap.assertParamsConsistent(o,i);const u=t.Wap.computeOutShape(n.map((e=>e.shape)),i);if(0===t.D5U.sizeFromShape(u))return s.makeTensorInfo(u,n[0].dtype,[]);const l=n.filter((e=>t.D5U.sizeFromShape(e.shape)>0));return 1===l.length?nx({inputs:{x:l[0]},backend:s}):Qw(l,i,s)}const Jw={kernelName:t.Eh3,backendName:"webgl",kernelFunc:Zw};class ev{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class tv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nv{constructor(e,n=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sy(this.outputShape.length);const i=e.padInfo.left,o=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,h=c;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<c;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let n=0;n<(h+1)/2;n++){const s=2*n;if(p+=`\n           xC = xCCorner + ${s*u};\n           `,1===o){if(s<c&&(i%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${s}Ready == 0) {\n                   xTexelC${s} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${s}.zw = vec2(0.0);\n                   }\n                   xTexelC${s}Ready = 1;\n                 }\n               `,p+=1===u&&s>0?`\n                 xC${s} = vec4(xTexelC${s-2}.zw, xTexelC${s}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${s} = vec4(previous.zw, xTexelC${s}.xy);\n                   } else {\n                     xC${s} = vec4(0.0, 0.0, xTexelC${s}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${s}Ready == 0) {\n                   xTexelC${s} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${s}.zw = vec2(0.0);\n                   }\n                   xTexelC${s}Ready = 1;\n                 }\n\n                 xC${s} = xTexelC${s};\n                 `,s+1<c)){const e=i%2==0?t.D5U.nearestLargerEven(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${s+1}Ready == 0) {\n                     xTexelC${s+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${s+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${s+1}Ready = 1;\n                   }\n                   `,p+=u>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${s+1} = vec4(previous.zw, xTexelC${s+1}.xy);\n                     } else {\n                      xC${s+1} = vec4(0.0, 0.0, xTexelC${s+1}.xy);\n                     }\n                     `:`\n                     xC${s+1} = vec4(xTexelC${s}.zw, xTexelC${s+1}.xy);\n                     `):p+=1===e?`\n                     xC${s+1} = xTexelC${s};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${s+1}Ready == 0) {\n                       xTexelC${s+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${s+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${s+1}Ready = 1;\n                     }\n\n                     xC${s+1} = xTexelC${s+1};\n                     `}}else s<c&&(i%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${s}Ready == 0) {\n                   xTexelC${s} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${s}.zw = vec2(0.0);\n                   }\n                   xTexelC${s}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${s+1}Ready == 0) {\n                   xTexelC${s+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${s+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${s+1}Ready = 1;\n                 }\n\n                 xC${s} = vec4(xTexelC${s}.zw, xTexelC${s+1}.zw);\n               `,s+1<c&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${s+1} = vec4(xTexelC${s+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${s}Ready == 0) {\n                   xTexelC${s} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${s}.zw = vec2(0.0);\n                   }\n                   xTexelC${s}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${s+1}Ready == 0) {\n                   xTexelC${s+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${s+1}.zw = vec2(0.);\n                   }\n                   xTexelC${s+1}Ready = 1;\n                 }\n\n                 xC${s} = vec4(\n                   xTexelC${s}.xy, xTexelC${s+1}.xy);\n               `,s+1<c&&(p+=`\n                   xC${s+1} = vec4(xTexelC${s}.zw, xTexelC${s+1}.zw);\n                 `)));s<c&&(p+=`\n             wTexel = getW(r, ${s}, d1, d2);\n             dotProd += xC${s}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${s}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,s+1<c&&(p+=`\n               wTexel = getW(r, ${s+1}, d1, d2);\n               dotProd += xC${s+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${s+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let d="",f="";s&&(d=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const m=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}class sv{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Sy(this.outputShape.length);const{dataFormat:n}=t,s=sy(),r="channelsLast"===n,a=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${s.output} = result;\n      }\n    `}}function rv(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function av({x:e,filter:n,convInfo:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape,c=r.texData.get(e.dataId),h=s.inChannels,p=l[0]*l[1]*l[2],d=s.outChannels,f="channelsLast"===s.dataFormat;let m;const g=[];if(null!=i){const e=rv(i.shape,f);null!=e&&(i=vx({inputs:{x:i},backend:r,attrs:{shape:e}}),g.push(i))}if(null!=a){const e=rv(a.shape,f);null!=e&&(a=vx({inputs:{x:a},backend:r,attrs:{shape:e}}),g.push(a))}if((1!==p&&1!==d||!(h>1e3))&&c.isPacked&&f&&null!=c.texture&&l[2]%2!=0&&t.D5U.arraysEqual(c.shape.slice(-3),l.slice(-3))){const h=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,h,s.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,t.D5U.assert(Kg(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const f=vx({inputs:{x:n},backend:r,attrs:{shape:[1,s.inChannels,s.outChannels]}});g.push(f);const y=_x({a:p,b:f,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o}),b=r.texData.get(y.dataId);t.D5U.assert(b.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,b.shape=s.outShape,m=nx({inputs:{x:y},backend:r}),m.shape=s.outShape,g.push(y)}else{const t=s.outHeight*s.outWidth,l=vx({inputs:{x:e},backend:r,attrs:{shape:f?[s.batchSize,t,s.inChannels]:[s.batchSize,s.inChannels,t]}}),c=vx({inputs:{x:n},backend:r,attrs:{shape:[1,s.inChannels,s.outChannels]}}),h=_x({a:f?l:c,b:f?c:l,transposeA:!f,transposeB:!1,backend:r,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o});m=vx({inputs:{x:h},backend:r,attrs:{shape:s.outShape}}),g.push(l),g.push(c),g.push(h)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}function iv({x:e,filter:n,convInfo:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const{filterWidth:l,filterHeight:c,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=s,m="channelsLast"===f,g=l*c*h,y=d*p,b=[s.batchSize,g,y],x=[];if(null!=i){const e=rv(i.shape,m);null!=e&&(i=vx({inputs:{x:i},backend:r,attrs:{shape:e}}),x.push(i))}if(null!=a){const e=rv(a.shape,m);null!=e&&(a=vx({inputs:{x:a},backend:r,attrs:{shape:e}}),x.push(a))}const w=vx({inputs:{x:n},backend:r,attrs:{shape:[1,g,t.D5U.sizeFromShape(n.shape)/g]}});x.push(w);const v=new sv(b,s),k=[e.shape,[s.padInfo.top,s.padInfo.left],[s.strideHeight,s.strideWidth],[s.dilationHeight,s.dilationWidth],[s.inChannels],[s.filterWidth*s.inChannels],[s.outWidth]],I=r.runWebGLProgram(v,[e],"float32",k),S=vx({inputs:{x:I},backend:r,attrs:{shape:b}});x.push(I),x.push(S);const N=null!=a,T=null!=i,C="leakyrelu"===u,$=u?mx(u,!0):null,E=new gx(m?S.shape:w.shape,m?w.shape:S.shape,m?[s.batchSize,y,s.outChannels]:[s.batchSize,s.outChannels,y],!0,!1,N,$,T,C),A=m?[S,w]:[w,S];if(a&&A.push(a),T&&A.push(i),C){const e=r.makeTensorInfo([],"float32",t.D5U.createScalarValue(o,"float32"));A.push(e),x.push(e)}const D=r.runWebGLProgram(E,A,"float32"),R=vx({inputs:{x:D},backend:r,attrs:{shape:s.outShape}});x.push(D);for(const e of x)r.disposeIntermediateTensorInfo(e);return R}const ov={kernelName:t.mhS,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dataFormat:l,dilations:c,dimRoundingMode:h}=r,p=t.Wap.convertConv2DDataFormat(l),d=t.Wap.computeConv2DInfo(a.shape,i.shape,o,c,u,h,!1,p);let f;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===p&&(0,t.OBj)().getBool("WEBGL_EXP_CONV")){const e=new nv(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];f=s.runWebGLProgram(e,[a,i],"float32",t)}else if((0,t.OBj)().getBool("WEBGL_CONV_IM2COL"))f=iv({x:a,filter:i,convInfo:d,backend:s});else{const e=new ev(d);f=s.runWebGLProgram(e,[a,i],"float32")}else f=av({x:a,filter:i,convInfo:d,backend:s});const m=vx({inputs:{x:f},backend:s,attrs:{shape:d.outShape}});return s.disposeIntermediateTensorInfo(f),m}};class uv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const pv={kernelName:t.wUP,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,dy:i}=n,{strides:o,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:h}=r,p=t.Wap.convertConv2DDataFormat(l),d=t.Wap.computeConv2DInfo(a.shape,h,o,1,u,c,!1,p),f=new uv(d);return s.runWebGLProgram(f,[a,i],"float32")}},dv={kernelName:t.wm,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,filter:i}=n,{inputShape:o,strides:u,pad:l,dataFormat:c,dimRoundingMode:h}=r,p=t.Wap.convertConv2DDataFormat(c),d=t.Wap.computeConv2DInfo(o,i.shape,u,1,l,h,!1,p),f=new lv(d);return s.runWebGLProgram(f,[a,i],"float32")}},fv={kernelName:t.x12,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dilations:l}=r,c=t.Wap.computeConv3DInfo(a.shape,i.shape,o,l,u),h=new tv(c);return s.runWebGLProgram(h,[a,i],"float32")}},mv={kernelName:t.o2y,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,dy:i}=n,{strides:o,pad:u,filterShape:l}=r,c=t.Wap.computeConv3DInfo(a.shape,l,o,1,u),h=new cv(c);return s.runWebGLProgram(h,[a,i],"float32")}},gv={kernelName:t.ik2,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,filter:i}=n,{pad:o,strides:u,inputShape:l}=r,c=t.Wap.computeConv3DInfo(l,i.shape,u,1,o),h=new hv(c);return s.runWebGLProgram(h,[a,i],"float32")}},yv=dx({opSnippet:px+"\n  return cos(x);\n"}),bv={kernelName:t.mc4,backendName:"webgl",kernelFunc:yv},xv=dx({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),wv={kernelName:t.TR1,backendName:"webgl",kernelFunc:xv};class vv{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const kv={kernelName:t.VcC,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=s,c=new vv(r.shape,a.shape,o,u,l);return n.runWebGLProgram(c,[r,a,i],"float32")}};var Iv;!function(e){e.Prod="*",e.Sum="+"}(Iv||(Iv={}));class Sv{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===Iv.Prod?"1.0":"0.0",i=n?a:`getX(${Nv(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=s?"end != "+(o-1):"end != 0",l=s?"end + 1":"end - 1"):(u=s?`end + pow2 < ${o}`:"end >= pow2",l=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${by(r)} coords = getOutputCoords();\n        int end = ${Tv(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${Tv(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${Nv(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function Nv(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Tv(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Cv(e,n,s,r,a,i){const o=n.shape.length,u=t.Wap.getAxesPermutation([r],o);let l=n;null!=u&&(l=Dx({inputs:{x:n},backend:s,attrs:{perm:u}}));const c=t.Wap.getInnerMostAxes(1,o)[0];if(c!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${n.shape.length-1} but got axis=${r}`);const h=l.shape[c];let p=nx({inputs:{x:l},backend:s});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){const n=new Sv(e,l.shape,!1,i),r=[[t]],a=p;p=s.runWebGLProgram(n,[p],p.dtype,r),s.disposeIntermediateTensorInfo(a)}if(a){const t=new Sv(e,l.shape,a,i),n=p;p=s.runWebGLProgram(t,[p],p.dtype),s.disposeIntermediateTensorInfo(n)}if(null!=u){const e=Dx({inputs:{x:p},backend:s,attrs:{perm:t.Wap.getUndoAxesPermutation(u)}});return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(l),e}return p}const $v={kernelName:t.Byc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return Cv(Iv.Prod,r,n,a,i,o)}},Ev={kernelName:t.iHb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return Cv(Iv.Sum,r,n,a,i,o)}},Av={kernelName:t.QRR,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=Uy(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=Wy(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class Dv{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Rv={kernelName:t.T0n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],u=("NHWC"===i?r.shape[1]:r.shape[2])*a,l=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new Dv("NHWC"===i?[o,u,l,c]:[o,c,u,l],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class _v{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sy(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let u="",l="";n&&(u=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class Fv{constructor(e,n=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sy(this.outputShape.length);const i=e.outChannels/e.inChannels,o=e.padInfo.left,u=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,p=h;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<h;e++)d+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;d+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let e=0;e<h;e++)d+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const n=2*e;if(d+=`\n          xC = xCCorner + ${n*l};\n          `,1===u){if(n<h&&(o%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n              `,d+=1===l&&n>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xC${n} = xTexelC${n};\n                `,n+1<h)){const e=o%2==0?t.D5U.nearestLargerEven(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${n+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${n+1}Ready = 1;\n                  }\n                  `,d+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                    } else {\n                     xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                    }\n                    `:`\n                    xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                    `):d+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${n+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${n+1}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${n+1};\n                    `}}else n<h&&(o%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n              `,n+1<h&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\n              `,n+1<h&&(d+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                `)));n<h&&(d+=`\n            wTexel = getW(r, ${n}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,n+1<h&&(d+=`\n              wTexel = getW(r, ${n+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let f="",m="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,m="result = activation(result);");const g=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const Ov={kernelName:t.cie,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=r;let h=l;null==h&&(h=[1,1]),t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const p=t.Wap.computeConv2DInfo(a.shape,i.shape,o,h,u,c,!0);let d;d=(0,t.OBj)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new Fv(p):new _v(p);const f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return s.runWebGLProgram(d,[a,i],"float32",f)}};class Mv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Lv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Bv={kernelName:t.sL$,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,dy:i}=n,{strides:o,dilations:u,pad:l,dimRoundingMode:c,filterShape:h}=r,p=t.Wap.computeConv2DInfo(a.shape,h,o,u,l,c,!0),d=new Mv(p);return s.runWebGLProgram(d,[a,i],"float32")}},zv={kernelName:t.y7R,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,filter:i}=n,{strides:o,dilations:u,pad:l,dimRoundingMode:c,inputShape:h}=r,p=t.Wap.computeConv2DInfo(h,i.shape,o,u,l,c,!0),d=new Lv(p);return s.runWebGLProgram(d,[a,i],"float32")}};class Uv{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Wv={kernelName:t.$w,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{x:r}=n,a=[...r.shape,...r.shape],i=t.D5U.sizeFromShape(r.shape),o=vx({inputs:{x:r},backend:s,attrs:{shape:[i]}}),u=new Uv(i),l=s.runWebGLProgram(u,[o],o.dtype),c=vx({inputs:{x:l},backend:s,attrs:{shape:a}});return s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(l),c}};class Pv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Vv={kernelName:t.p4S,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i}=n,{strides:o,pad:u,dilations:l}=r,c=t.Wap.computeDilation2DInfo(a.shape,i.shape,o,u,"NHWC",l);let h;const p=new Pv(c);h=s.runWebGLProgram(p,[a,i],"float32");const d=vx({inputs:{x:h},backend:s,attrs:{shape:c.outShape}});return s.disposeIntermediateTensorInfo(h),d}},Gv={kernelName:t.$g6,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{equation:a}=r,i=n,{allDims:o,summedDims:u,idDims:l}=t.Wap.decodeEinsumEquation(a,i.length);t.Wap.checkEinsumDimSizes(o.length,l,i);const{path:c,steps:h}=t.Wap.getEinsumComputePath(u,l),p=h.length;let d=null,f=o.length;const m=[];for(let e=0;e<p;++e){for(const n of h[e]){const{permutationIndices:e,expandDims:r}=t.Wap.getEinsumPermutation(f,l[n]);let a;t.Wap.isIdentityPermutation(e)?a=i[n]:(a=Dx({inputs:{x:i[n]},backend:s,attrs:{perm:e}}),m.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);t.D5U.arraysEqual(a.shape,o)||(a=vx({inputs:{x:a},backend:s,attrs:{shape:o}}),m.push(a)),null===d?d=a:(d=xx({inputs:{a,b:d},backend:s}),m.push(d))}e<p-1&&(c[e]>=0&&(d=Ex({inputs:{x:d},backend:s,attrs:{axis:c[e]-(o.length-f),keepDims:!1}}),m.push(d)),f--)}for(const e of m)e!==d&&s.disposeIntermediateTensorInfo(e);return d}},Hv=dx({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),jv={kernelName:t.SX0,backendName:"webgl",kernelFunc:Hv},Xv={kernelName:t.HEU,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:s}=e,{dy:r,y:a}=n,i=(0,t.OBj)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tx("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,a.shape):new Jb("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return s.runWebGLProgram(i,[r,a],r.dtype)}},qv=fx({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Hy}),Kv={kernelName:t.hdR,backendName:"webgl",kernelFunc:qv},Yv=dx({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${t.Wap.ERF_P};\n  float a1 = ${t.Wap.ERF_A1};\n  float a2 = ${t.Wap.ERF_A2};\n  float a3 = ${t.Wap.ERF_A3};\n  float a4 = ${t.Wap.ERF_A4};\n  float a5 = ${t.Wap.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Qv={kernelName:t.Omj,backendName:"webgl",kernelFunc:Yv},Zv=dx({opSnippet:px+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:jy,dtype:"float32"}),Jv={kernelName:t.NEP,backendName:"webgl",kernelFunc:Zv};function ek(e){const{inputs:n,attrs:s,backend:r}=e,{dim:a}=s,{input:i}=n,o=i.shape.length,u=i.shape.slice();let l=a;return a<0&&(t.D5U.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),u.splice(l,0,1),vx({inputs:{x:i},backend:r,attrs:{shape:u}})}const tk={kernelName:t.YFo,backendName:"webgl",kernelFunc:ek},nk="return exp(x) - 1.0;",sk=dx({opSnippet:nk,packedOpSnippet:nk,cpuKernelImpl:Xy}),rk={kernelName:t.Y0y,backendName:"webgl",kernelFunc:sk};class ak{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function ik(e,n,s){const r=s.texData.get(e.dataId),a=t.D5U.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=vx({inputs:{x:e},backend:s,attrs:{shape:[a/i,i]}}),u=o.shape,l=new ak("real",u,n),c=new ak("imag",u,n),h=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],p=s.runWebGLProgram(l,h,"float32"),d=s.runWebGLProgram(c,h,"float32"),f=rx({inputs:{real:p,imag:d},backend:s});s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d);const m=vx({inputs:{x:f},backend:s,attrs:{shape:e.shape}});return s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(f),m}const ok={kernelName:t.vwp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return ik(s,!1,n)}};class uk{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function lk(e){const{backend:n,attrs:s}=e,{shape:r,value:a}=s;let{dtype:i}=s;if(i=i||t.D5U.inferDtype(a),"string"===i){const e=t.D5U.getArrayFromDType(i,t.D5U.sizeFromShape(r));return e.fill(a),n.makeTensorInfo(r,i,e)}{const e=new uk(r,a),t=[[a]];return n.runWebGLProgram(e,[],i,t)}}const ck={kernelName:t.deh,backendName:"webgl",kernelFunc:lk};class hk{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const pk={kernelName:t.Uyb,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new hk(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},dk="return floor(x);",fk=dx({opSnippet:dk,packedOpSnippet:dk,cpuKernelImpl:qy}),mk={kernelName:t.OR,backendName:"webgl",kernelFunc:fk},gk=fx({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),yk={kernelName:t.jeX,backendName:"webgl",kernelFunc:gk};class bk{constructor(e){this.variableNames=["A"];const t=sy(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class xk{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=sy(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const wk={kernelName:t.eBW,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e;let{pixels:a}=n;const{numChannels:i}=r,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,c]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[c,l],p=[c,l,i];if(u||o){const e=(0,t.OBj)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=vk&&e===kk||(kk=e,vk=document.createElement("canvas").getContext("2d",{willReadFrequently:kk})),vk.canvas.width=l,vk.canvas.height=c,vk.drawImage(a,0,0,l,c),a=vk.canvas}const d=s.makeTensorInfo(h,"int32");s.texData.get(d.dataId).usage=Cg.PIXELS,s.gpgpu.uploadPixelDataToTexture(s.getTexture(d.dataId),a);const f=(0,t.OBj)().getBool("WEBGL_PACK")?new xk(p):new bk(p),m=s.runWebGLProgram(f,[d],"int32");return s.disposeData(d.dataId),m}};let vk,kk=(0,t.OBj)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const Ik={kernelName:t._V0,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=n,{strides:l,pad:c,dataFormat:h,dilations:p,dimRoundingMode:d,activation:f,leakyreluAlpha:m}=r,g=t.Wap.convertConv2DDataFormat(h),y=t.Wap.computeConv2DInfo(a.shape,i.shape,l,p,c,d,!1,g);let b;const x=[],w=null!=o,v=null!=u,k="leakyrelu"===f,I=()=>{const e=[a,i],n=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=vx({inputs:{x:e},backend:s,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(w&&e.push(n(o,h)),v&&e.push(n(u,h)),k){const n=s.makeTensorInfo([],"float32",t.D5U.createScalarValue(m,"float32"));e.push(n),x.push(n)}return e};if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if(y.strideWidth<=2&&"channelsLast"===g&&(0,t.OBj)().getBool("WEBGL_EXP_CONV")){const e=f?mx(f,!0):null,t=new nv(y,w,e,v,k),n=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],r=I();b=s.runWebGLProgram(t,r,"float32",n)}else if((0,t.OBj)().getBool("WEBGL_CONV_IM2COL"))b=iv({x:a,filter:i,convInfo:y,backend:s,bias:o,activation:f,preluActivationWeights:u,leakyreluAlpha:m});else{const e=f?mx(f,!1):null,t=new ev(y,w,e,v,k),n=I();b=s.runWebGLProgram(t,n,"float32")}else b=av({x:a,filter:i,convInfo:y,backend:s,bias:o,activation:f,preluActivationWeights:u,leakyreluAlpha:m});const S=vx({inputs:{x:b},backend:s,attrs:{shape:y.outShape}});return x.push(b),x.forEach((e=>s.disposeIntermediateTensorInfo(e))),S}},Sk={kernelName:t.luS,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=n,{strides:l,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r,m=[];let g=h;null==g&&(g=[1,1]),t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const y=t.Wap.computeConv2DInfo(a.shape,i.shape,l,g,c,p,!0),b=(0,t.OBj)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?mx(d,b):null,w=[a,i],v=null!=o,k=null!=u,I="leakyrelu"===d;if(v&&w.push(o),k&&w.push(u),I){const e=s.makeTensorInfo([],"float32",t.D5U.createScalarValue(f,"float32"));w.push(e),m.push(e)}let S;S=b?new Fv(y,v,x,k,I):new _v(y,v,x,k,I);const N=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],T=s.runWebGLProgram(S,w,"float32",N);return m.forEach((e=>s.disposeIntermediateTensorInfo(e))),T}};class Nk{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=by(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const Tk={kernelName:t.q1x,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{params:r,indices:a}=n,i=a.shape,o=i[i.length-1],u=t.D5U.sizeFromShape(r.shape),[l,c,h,p]=t.Wap.prepareAndValidate(r,a),d=vx({inputs:{x:a},backend:s,attrs:{shape:[c,o]}}),f=vx({inputs:{x:r},backend:s,attrs:{shape:[t.D5U.sizeFromShape(r.shape)/h,h]}});if(s.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=s.readSync(a.dataId),t=s.bufferSync(r),n=Ky(e,t,r.dtype,c,o,h,p,r.shape,u);return s.makeTensorInfo(l,r.dtype,n.values)}const m=new Nk(o,p,[c,h],r.shape),g=s.runWebGLProgram(m,[f,d],f.dtype),y=vx({inputs:{x:g},backend:s,attrs:{shape:l}});return s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(g),y}};class Ck{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=by(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function $k(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,indices:i}=n,{axis:o,batchDims:u}=r,l=t.D5U.parseAxisParam(o,a.shape)[0];if((0,t.OBj)().get("DEBUG")){const e=s.readSync(i.dataId),n=a.shape[l];for(let s=0;s<e.length;++s){const r=e[s];t.D5U.assert(r<=n-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${n-1}]`))}}const c=t.Wap.segment_util.collectGatherOpShapeInfo(a,i,l,u),h=t.D5U.sizeFromShape(i.shape),p=[],d=vx({inputs:{x:a},backend:s,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=vx({inputs:{x:i},backend:s,attrs:{shape:[c.batchSize,h/c.batchSize]}});p.push(d),p.push(f);const m=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(s.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=s.bufferSync(f),t=s.bufferSync(d),n=Yy(t,e,m);return p.forEach((e=>s.disposeIntermediateTensorInfo(e))),s.makeTensorInfo(c.outputShape,n.dtype,n.values)}const g=new Ck(d.shape,m),y=s.runWebGLProgram(g,[d,f],d.dtype);p.push(y);const b=vx({inputs:{x:y},backend:s,attrs:{shape:c.outputShape}});return p.forEach((e=>s.disposeIntermediateTensorInfo(e))),b}const Ek={kernelName:t.qi_,backendName:"webgl",kernelFunc:$k},Ak=fx({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Qy,dtype:"bool"}),Dk={kernelName:t.iZT,backendName:"webgl",kernelFunc:Ak},Rk=fx({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Zy}),_k={kernelName:t.Acj,backendName:"webgl",kernelFunc:Rk},Fk={kernelName:t.Qg5,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return ik(s,!0,n)}},Ok=dx({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Mk={kernelName:t.avt,backendName:"webgl",kernelFunc:Ok},Lk=dx({opSnippet:"return float(isinf(x));",dtype:"bool"}),Bk={kernelName:t.iWB,backendName:"webgl",kernelFunc:Lk},zk=dx({opSnippet:"return float(isnan(x));",dtype:"bool"}),Uk={kernelName:t.r7n,backendName:"webgl",kernelFunc:zk},Wk=fx({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Jy,dtype:"bool"}),Pk={kernelName:t.vtC,backendName:"webgl",kernelFunc:Wk},Vk=fx({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:eb,dtype:"bool"}),Gk={kernelName:t.CAk,backendName:"webgl",kernelFunc:Vk},Hk={kernelName:t.e7N,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=tb(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},jk=dx({opSnippet:px+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:nb}),Xk={kernelName:t.ZbH,backendName:"webgl",kernelFunc:jk},qk=dx({opSnippet:px+"\n  return log(1.0 + x);\n"}),Kk={kernelName:t.kU,backendName:"webgl",kernelFunc:qk},Yk=fx({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Qk={kernelName:t.PYm,backendName:"webgl",kernelFunc:Yk},Zk=dx({opSnippet:"return float(!(x >= 1.0));"}),Jk={kernelName:t.VfG,backendName:"webgl",kernelFunc:Zk},eI=fx({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),tI={kernelName:t.MZg,backendName:"webgl",kernelFunc:eI};class nI{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class sI{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const rI={kernelName:t.eZ0,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{depthRadius:i,bias:o,alpha:u,beta:l}=r,c=(0,t.OBj)().getBool("WEBGL_PACK_NORMALIZATION")?new sI(a.shape,i,o,u,l):new nI(a.shape,i,o,u,l);return s.runWebGLProgram(c,[a],a.dtype)}};class aI{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const iI={kernelName:t.Hhh,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=s,h=new aI(r.shape,o,u,l,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function oI(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{reductionIndices:i,keepDims:o}=r,u=a.shape.length,l=t.D5U.parseAxisParam(i,a.shape);let c=l;const h=t.Wap.getAxesPermutation(c,u),p=null!=h,d=s.shouldExecuteOnCPU([a]);let f=a;if(p){if(d){const e=s.texData.get(f.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=a.shape[h[e]];const n=Ab(e,a.shape,a.dtype,h,t);f=s.makeTensorInfo(t,a.dtype),s.texData.get(f.dataId).values=n}else f=$x(a,h,s);c=t.Wap.getInnerMostAxes(c.length,u)}t.Wap.assertAxesAreInnerMostDims("max",c,u);const[m,g]=t.Wap.computeOutAndReduceShapes(f.shape,c);let y,b=m;if(o&&(b=t.Wap.expandShapeToKeepDim(m,l)),d){const e=s.texData.get(f.dataId).values,n=sb(e,t.D5U.sizeFromShape(g),b,a.dtype);y=s.makeTensorInfo(b,a.dtype),s.texData.get(y.dataId).values=n}else y=function(e,n,s,r){const a=t.D5U.sizeFromShape(n),i=vx({inputs:{x:e},attrs:{shape:[t.D5U.sizeFromShape(e.shape)/a,a]},backend:r}),o=Nx(i,e.dtype,"max",r),u=vx({inputs:{x:o},attrs:{shape:s},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),u}(f,g,b,s);return p&&s.disposeIntermediateTensorInfo(f),y}const uI={kernelName:t.YoZ,backendName:"webgl",kernelFunc:oI},lI=fx({opSnippet:Zb+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+ex+"\n  return result;\n",cpuKernelImpl:rb}),cI={kernelName:t.BMI,backendName:"webgl",kernelFunc:lI},hI={kernelName:t.mTV,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n;ty(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=t.Wap.computePool2DInfo(a.shape,i,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&t.D5U.arraysEqual(c.inShape,c.outShape))return nx({inputs:{x:a},backend:s});const h=new pw(c,"max",!1);return s.runWebGLProgram(h,[a],a.dtype)}},pI={kernelName:t.OAf,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{filterSize:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=t.Wap.computePool3DInfo(a.shape,i,o,[1,1,1],u,c,l),p=new dw(h,"max",!1);return s.runWebGLProgram(p,[a],a.dtype)}};class dI{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,u=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fI{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=u-1-e.padInfo.top,p=l-1-e.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const mI={kernelName:t.OU7,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i}=n,o=i,{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=t.Wap.computePool3DInfo(o.shape,u,l,[1,1,1],c,h),d=new dw(p,"max",!0),f=s.runWebGLProgram(d,[o],o.dtype),m=new fI(p),g=s.runWebGLProgram(m,[a,f],o.dtype);return s.disposeIntermediateTensorInfo(f),g}},gI={kernelName:t.OV7,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{dy:a,input:i,output:o}=n,u=i;ty([i,o],"maxPoolGrad");const{filterSize:l,strides:c,pad:h,dimRoundingMode:p}=r,d=t.Wap.computePool2DInfo(u.shape,l,c,1,h,p),f=new pw(d,"max",!0),m=s.runWebGLProgram(f,[u],u.dtype),g=new dI(d),y=s.runWebGLProgram(g,[a,m],u.dtype);return s.disposeIntermediateTensorInfo(m),y}},yI={kernelName:t.vFR,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:s})=>{const{x:r}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=n,l=s;t.D5U.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];t.D5U.assert(t.Wap.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=t.Wap.computePool2DInfo(r.shape,a,i,c,o),[p,d]=function(e,t,n,s){let r=new pw(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new pw(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(r,u,h,l);return[p,d]}},bI={kernelName:t.q2K,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:s})=>{const{x:r}=e,{keepDims:a,axis:i}=n,o=s,u=r.shape.length,l=t.D5U.parseAxisParam(i,r.shape);let c=l;const h=t.Wap.getAxesPermutation(c,u),p=null!=h,d=o.shouldExecuteOnCPU([r]),f=[];let m=r;if(p){if(d){const e=o.texData.get(m.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=r.shape[h[e]];const n=Ab(e,r.shape,r.dtype,h,t);m=o.makeTensorInfo(t,r.dtype),o.texData.get(m.dataId).values=n}else m=$x(r,h,o);f.push(m),c=t.Wap.getInnerMostAxes(c.length,u)}t.Wap.assertAxesAreInnerMostDims("sum",c,u);const[g,y]=t.Wap.computeOutAndReduceShapes(m.shape,c);let b=g;a&&(b=t.Wap.expandShapeToKeepDim(g,l));const x=function(e,n,s,r){const a=t.D5U.sizeFromShape(n),i=vx({inputs:{x:e},attrs:{shape:[t.D5U.sizeFromShape(e.shape)/a,a]},backend:r}),o=Nx(i,"float32","mean",r),u=vx({inputs:{x:o},attrs:{shape:s},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),u}(m,y,b,o);for(const e of f)o.disposeIntermediateTensorInfo(e);return x}},xI={kernelName:t.c17,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r,u=a.shape.length,l=t.D5U.parseAxisParam(i,a.shape);let c=l;const h=t.Wap.getAxesPermutation(c,u);let p=a;null!=h&&(p=Dx({inputs:{x:a},backend:s,attrs:{perm:h}}),c=t.Wap.getInnerMostAxes(c.length,a.shape.length)),t.Wap.assertAxesAreInnerMostDims("min",c,u);const[d,f]=t.Wap.computeOutAndReduceShapes(p.shape,c),m=vx({inputs:{x:p},backend:s,attrs:{shape:[-1,t.D5U.sizeFromShape(f)]}}),g=Nx(m,m.dtype,"min",s);let y;return y=vx(o?{inputs:{x:g},backend:s,attrs:{shape:t.Wap.expandShapeToKeepDim(d,l)}}:{inputs:{x:g},backend:s,attrs:{shape:d}}),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),null!=h&&s.disposeIntermediateTensorInfo(p),y}},wI=fx({opSnippet:Zb+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+ex+"\n  return result;\n",cpuKernelImpl:ab}),vI={kernelName:t.q8u,backendName:"webgl",kernelFunc:wI};class kI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=by(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),u="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class II{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=by(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=_b("rc",s),u=_b("source",s),l=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const SI={kernelName:t.jQs,backendName:"webgl",kernelFunc:({inputs:e,backend:n,attrs:s})=>{const{x:r}=e,{paddings:a,mode:i}=s,o=(0,t.OBj)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new II(r.shape,a,i):new kI(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype)}},NI=fx({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+ex+"\n  return result;\n"}),TI={kernelName:t.Vbg,backendName:"webgl",kernelFunc:NI};class CI{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const $I=fx({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),EI={kernelName:t.oHH,backendName:"webgl",kernelFunc:$I},AI="return a - b;",DI=fx({opSnippet:AI,packedOpSnippet:AI,supportsComplex:!0,cpuKernelImpl:Cb}),RI={kernelName:t.Tr8,backendName:"webgl",kernelFunc:DI};function _I(e){const{inputs:n,backend:s,attrs:r}=e,{logits:a}=n,{dim:i}=r,o=t.D5U.parseAxisParam([i],a.shape),u=oI({inputs:{x:a},backend:s,attrs:{reductionIndices:o,keepDims:!1}}),l=t.Wap.expandShapeToKeepDim(u.shape,o),c=vx({inputs:{x:u},backend:s,attrs:{shape:l}}),h=DI({inputs:{a,b:c},backend:s}),p=Zv({inputs:{x:h},backend:s}),d=Ex({inputs:{x:p},backend:s,attrs:{axis:o,keepDims:!1}}),f=vx({inputs:{x:d},backend:s,attrs:{shape:l}}),m=$I({inputs:{a:p,b:f},backend:s});return s.disposeIntermediateTensorInfo(u),s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(f),m}const FI={kernelName:t.Gcp,backendName:"webgl",kernelFunc:_I},OI={kernelName:t.NZg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,u=o?r:_I({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),l=u.shape[0],c=u.shape[1],h=new CI(l,c,a),p=[[i]],d=n.runWebGLProgram(h,[u],"int32",p);return o||n.disposeIntermediateTensorInfo(u),d}},MI=Wb+"\n  return -x;\n",LI={kernelName:t.kuV,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{x:r}=n;if(s.shouldExecuteOnCPU([r])){const e=s.texData.get(r.dataId),[t,n]=ob(e.values,r.shape,r.dtype);return s.makeTensorInfo(n,r.dtype,t)}let a;return a=(0,t.OBj)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new jb(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Ub(r.shape,MI),s.runWebGLProgram(a,[r],r.dtype)}},BI=t.GDt.GP,zI={kernelName:t.uv1,backendName:"webgl",kernelFunc:function(e){t.Wap.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:s,attrs:r}=e,{boxes:a,scores:i}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:l}=r,c=s.readSync(a.dataId),h=s.readSync(i.dataId),{selectedIndices:p}=BI(c,h,o,u,l);return s.makeTensorInfo([p.length],"int32",new Int32Array(p))}},UI=t.GDt.qP,WI={kernelName:t.cye,backendName:"webgl",kernelFunc:function(e){t.Wap.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:s,attrs:r}=e,{boxes:a,scores:i}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r,h=s.readSync(a.dataId),p=s.readSync(i.dataId),{selectedIndices:d,validOutputs:f}=UI(h,p,o,u,l,c);return[s.makeTensorInfo([d.length],"int32",new Int32Array(d)),s.makeTensorInfo([],"int32",new Int32Array([f]))]}},PI=t.GDt.pA,VI={kernelName:t.W0H,backendName:"webgl",kernelFunc:function(e){t.Wap.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:s,attrs:r}=e,{boxes:a,scores:i}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r,h=s.readSync(a.dataId),p=s.readSync(i.dataId),d=o,f=u,m=l,g=c,{selectedIndices:y,selectedScores:b}=PI(h,p,d,f,m,g);return[s.makeTensorInfo([y.length],"int32",new Int32Array(y)),s.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class GI{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const HI={kernelName:t.we_,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:s,attrs:r}=e,{indices:a}=n,{dtype:i,depth:o,onValue:u,offValue:l}=r,c=t.D5U.sizeFromShape(a.shape),h=new GI(c,o,u,l),p=vx({inputs:{x:a},backend:s,attrs:{shape:[c]}}),d=s.runWebGLProgram(h,[p],i);s.disposeIntermediateTensorInfo(p);const f=vx({inputs:{x:d},backend:s,attrs:{shape:[...a.shape,o]}});return s.disposeIntermediateTensorInfo(d),f}};function jI(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=Fw({inputs:{input:s},backend:n}),t=jI({inputs:{x:e},backend:n}),r=Kw({inputs:{input:s},backend:n}),a=jI({inputs:{x:r},backend:n}),i=rx({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return lk({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const XI={kernelName:t.RuY,backendName:"webgl",kernelFunc:jI},qI={kernelName:t.qWM,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=Fw({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Kw({inputs:{input:r},backend:s}),i=jI({inputs:{x:a},backend:s}),o=rx({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return lk({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},KI={kernelName:t.QiL,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{axis:a}=r;if(1===n.length)return ek({inputs:{input:n[0]},backend:s,attrs:{dim:a}});const i=n[0].shape,o=n[0].dtype;n.forEach((e=>{t.D5U.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),t.D5U.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Zw({inputs:n.map((e=>{const t=ek({inputs:{input:e},backend:s,attrs:{dim:a}});return u.push(t),t})),backend:s,attrs:{axis:a}});return u.forEach((e=>s.disposeIntermediateTensorInfo(e))),l}};class YI{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=by(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class QI{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=by(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=_b("rc",s),u=_b("source",s),l=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${u.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${l}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${l}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const ZI=e=>{const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{paddings:i,constantValue:o}=r;if(0===t.D5U.sizeFromShape(a.shape)){const e=i.map(((e,t)=>e[0]+a.shape[t]+e[1]));return lk({backend:s,attrs:{shape:e,value:o,dtype:a.dtype}})}const u=(0,t.OBj)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new QI(a.shape,i,o):new YI(a.shape,i,o),l=[[o]];return s.runWebGLProgram(u,[a],a.dtype,l)},JI={kernelName:t.lyA,backendName:"webgl",kernelFunc:ZI},eS=fx({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+ex+"\n  return result;\n"}),tS={kernelName:t.pe_,backendName:"webgl",kernelFunc:eS},nS={kernelName:t.DlI,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{axis:i,keepDims:o}=r,u=a.shape.length,l=[],c=t.D5U.parseAxisParam(i,a.shape);let h=c;const p=t.Wap.getAxesPermutation(h,u);let d,f=a;if(null!=p&&(f=Dx({inputs:{x:a},backend:s,attrs:{perm:p}}),h=t.Wap.getInnerMostAxes(h.length,u),l.push(f)),t.Wap.assertAxesAreInnerMostDims("prod",h,u),s.shouldExecuteOnCPU([f])){const e=s.texData.get(f.dataId).values,{outVals:t,outShape:n,outDtype:r}=lb(f.shape,f.dtype,e,h);d=s.makeTensorInfo(n,r,t)}else{const[e,n]=t.Wap.computeOutAndReduceShapes(f.shape,h),r=t.D5U.sizeFromShape(n),i=vx({inputs:{x:f},backend:s,attrs:{shape:[-1,r]}}),o=Nx(i,(0,t.z4k)(a.dtype),"prod",s);d=vx({inputs:{x:o},backend:s,attrs:{shape:e}}),l.push(i),l.push(o)}if(o){l.push(d);const e=t.Wap.expandShapeToKeepDim(d.shape,c);d=vx({inputs:{x:d},backend:s,attrs:{shape:e}})}return l.forEach((e=>s.disposeIntermediateTensorInfo(e))),d}},sS={kernelName:t.dDz,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,u=r.map((e=>n.readSync(e.dataId))),l=r.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[p,d,f]=cb(u,l,c,a.shape,a.dtype,h,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},rS={kernelName:t.CQl,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.readSync(s.dataId),o=n.readSync(r.dataId),u=n.readSync(a.dataId),[l,c]=hb(i,s.shape,s.dtype,o,r.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],s.dtype,c)]}},aS={kernelName:t.BiW,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=s,l=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),p=o.map((e=>n.readSync(e.dataId))),d=o.map((e=>e.shape)),[f,m]=pb(l,r.shape,c,a.shape,a.dtype,h,i.shape,p,d,u);return n.makeTensorInfo(f,a.dtype,m)}},iS=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=db(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},oS={kernelName:t.e6w,backendName:"webgl",kernelFunc:iS},uS=dx({opSnippet:"return 1.0 / x;"}),lS={kernelName:t.$HU,backendName:"webgl",kernelFunc:uS},cS=dx({opSnippet:Wb+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),hS={kernelName:t.qkr,backendName:"webgl",kernelFunc:cS},pS=dx({opSnippet:Wb+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),dS={kernelName:t.SbG,backendName:"webgl",kernelFunc:pS};class fS{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class mS{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const gS={kernelName:t._Yw,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{images:a}=n,{alignCorners:i,halfPixelCenters:o,size:u}=r,[l,c]=u,h=(0,t.OBj)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new mS(a.shape,l,c,i,o):new fS(a.shape,l,c,i,o);return s.runWebGLProgram(h,[a],"float32")}};class yS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const bS={kernelName:t.zbQ,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new yS(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class xS{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class wS{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const vS={kernelName:t.dpD,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{images:a}=n,{alignCorners:i,halfPixelCenters:o,size:u}=r,[l,c]=u,h=(0,t.OBj)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new wS(a.shape,l,c,i,o):new xS(a.shape,l,c,i,o);return s.runWebGLProgram(h,[a],a.dtype)}};class kS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const IS={kernelName:t.Hmb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new kS(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class SS{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=by(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class NS{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=_b("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=by(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const TS={kernelName:t.mKl,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{dims:i}=r,o=a.shape.length,u=t.D5U.parseAxisParam(i,a.shape);if(0===o)return nx({inputs:{x:a},backend:s});const l=(0,t.OBj)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new NS(a.shape,u):new SS(a.shape,u);return s.runWebGLProgram(l,[a],a.dtype)}};class CS{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const $S={kernelName:t.b9H,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:s})=>{const{image:r}=e,{radians:a,fillValue:i,center:o}=n,u=s,l=new CS(r.shape,i),[c,h]=t.Wap.getImageCenter(o,r.shape[1],r.shape[2]),p=[[c,h,Math.sin(a),Math.cos(a)]];return u.runWebGLProgram(l,[r],r.dtype,p)}},ES=dx({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),AS={kernelName:t.e07,backendName:"webgl",kernelFunc:ES},DS=dx({opSnippet:"return inversesqrt(x);",cpuKernelImpl:fb}),RS={kernelName:t.bV0,backendName:"webgl",kernelFunc:DS};class _S{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=by(r.length),u=by(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const FS={kernelName:t.xQA,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{indices:a,updates:i}=n,{shape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=t.Wap.calculateShapes(i,a,o),d=[p/c,c];if(0===p)return s.makeTensorInfo(o,a.dtype);const f=vx({inputs:{x:a},backend:s,attrs:{shape:[l,u]}}),m=vx({inputs:{x:i},backend:s,attrs:{shape:[l,c]}}),g=s.makeTensorInfo([],"float32",new Float32Array([0])),y=new _S(l,u,f.shape.length,m.shape.length,h,d),b=s.runWebGLProgram(y,[m,f,g],m.dtype),x=vx({inputs:{x:b},backend:s,attrs:{shape:o}});return s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(g),x}};class OS{constructor(e,n,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,s];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(n+1))}; ++i) { if (left >= right) break;`,i=2===(0,t.OBj)().getNumber("WEBGL_VERSION")?"while (left < right) {":a,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const MS={kernelName:t.nr8,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new OS(r.shape[0],r.shape[1],a.shape[1],i),u=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",u)}};class LS{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=by(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const BS={kernelName:t.PhF,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s}=e,{condition:r,t:a,e:i}=n,o=new LS(r.shape.length,a.shape,a.shape.length);return s.runWebGLProgram(o,[r,a,i],(0,t.x8V)(a.dtype,i.dtype))}},zS=dx({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${t.Wap.SELU_SCALEALPHA};\n  float scale = ${t.Wap.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),US={kernelName:t.oFR,backendName:"webgl",kernelFunc:zS},WS=dx({opSnippet:px+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:gb}),PS={kernelName:t.a5O,backendName:"webgl",kernelFunc:WS},VS=dx({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),GS={kernelName:t.i5y,backendName:"webgl",kernelFunc:VS},HS=dx({opSnippet:px+"\n  return sin(x);\n"}),jS={kernelName:t.RQH,backendName:"webgl",kernelFunc:HS},XS=dx({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),qS={kernelName:t.wYB,backendName:"webgl",kernelFunc:XS},KS=dx({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),YS={kernelName:t.MRv,backendName:"webgl",kernelFunc:KS},QS={kernelName:t.TQc,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{blockShape:i,paddings:o}=r;t.D5U.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const u=i.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);const c=[],h=ZI({inputs:{x:a},backend:s,attrs:{paddings:l,constantValue:0}}),p=t.Wap.getReshaped(h.shape,i,u,!1),d=t.Wap.getPermuted(p.length,i.length,!1),f=t.Wap.getReshapedPermuted(h.shape,i,u,!1),m=vx({inputs:{x:h},backend:s,attrs:{shape:p}}),g=Dx({inputs:{x:m},backend:s,attrs:{perm:d}}),y=vx({inputs:{x:g},backend:s,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>s.disposeIntermediateTensorInfo(e))),y}},ZS={kernelName:t.O3z,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),u=n.readSync(r.dataId),l=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=xb(o,s.shape,s.dtype,u,r.dtype,l,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},JS={kernelName:t.nhH,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,h]=wb(o,s.shape,s.dtype,i,u);return[n.makeTensorInfo(c,s.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},eN={kernelName:t.w3H,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),u=n.readSync(a.dataId),[l,c]=vb(i,s.shape,s.dtype,o,u,!0);return n.makeTensorInfo(c,s.dtype,l)}},tN={kernelName:t.ZjV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),u=n.readSync(a.dataId),[l,c]=vb(i,s.shape,s.dtype,o,u);return n.makeTensorInfo(c,s.dtype,l)}},nN={kernelName:t.D2d,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=n,{outputShape:u}=r,{sliceRank:l,numUpdates:c,sliceSize:h,strides:p,outputSize:d}=t.Wap.calculateShapes(i,a,u);if("string"===i.dtype){const e=s.bufferSync(a),n=s.bufferSync(i),r=t.D5U.decodeString(s.readSync(o.dataId)[0]),f=mb(e,n,u,d,h,c,l,p,r,!1);return s.makeTensorInfo(u,f.dtype,f.values)}const f=new _S(c,l,a.shape.length,i.shape.length,p,[d,1],!1),m=s.runWebGLProgram(f,[i,a,o],i.dtype),g=vx({inputs:{x:m},backend:s,attrs:{shape:u}});return s.disposeIntermediateTensorInfo(m),g}},sN={kernelName:t.L8s,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{numOrSizeSplits:i,axis:o}=r,u=t.D5U.parseAxisParam(o,a.shape)[0],l=t.Wap.prepareSplitSize(a,i,u),c=a.shape.length,h=new Array(c).fill(0),p=a.shape.slice();return l.map((e=>{const t=[...p];t[u]=e;const n=Cw({inputs:{x:a},backend:s,attrs:{begin:h,size:t}});return h[u]+=e,n}))}},rN="return sqrt(x);",aN=dx({opSnippet:rN,packedOpSnippet:rN,cpuKernelImpl:kb}),iN={kernelName:t.FKq,backendName:"webgl",kernelFunc:aN},oN=dx({opSnippet:"return x * x;"}),uN={kernelName:t.bK0,backendName:"webgl",kernelFunc:oN},lN="return (a - b) * (a - b);",cN=fx({opSnippet:lN,packedOpSnippet:lN}),hN={kernelName:t._tC,backendName:"webgl",kernelFunc:cN},pN={kernelName:t.h8e,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=Wb+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new Ub(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class dN{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=by(n.length),a=by(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const fN={kernelName:t.jQk,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{begin:i,end:o,strides:u,beginMask:l,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=r,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:w,strides:v}=t.kuN.sliceInfo(a.shape,i,o,u,l,c,h,p,d);let k;if(g)k=vx({inputs:{x:a},backend:s,attrs:{shape:m}});else if(y||b){t.D5U.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=t.kuN.computeOutShape(x,w,v),n=Cw({inputs:{x:a},backend:s,attrs:{begin:x,size:e}});k=vx({inputs:{x:n},backend:s,attrs:{shape:m}}),s.disposeIntermediateTensorInfo(n)}else if(s.shouldExecuteOnCPU([a])){const e=s.readSync(a.dataId),n=(0,t.f3b)(a.shape,a.dtype,e),r=Ib(f,n,v,x);k=s.makeTensorInfo(m,a.dtype,r.values)}else{const e=new dN(x,v,f);k=s.runWebGLProgram(e,[a],a.dtype)}const I=vx({inputs:{x:k},backend:s,attrs:{shape:m}});return s.disposeIntermediateTensorInfo(k),I}},mN={kernelName:t._JP,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=Sb(p,d,r,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},gN={kernelName:t.s1s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),u=n.readSync(i.dataId)[0],[l,c,h]=Nb(o,u,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},yN={kernelName:t.XkS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=Tb(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},bN=dx({opSnippet:"return tan(x);"}),xN={kernelName:t.sEM,backendName:"webgl",kernelFunc:bN},wN=dx({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),vN={kernelName:t.MIZ,backendName:"webgl",kernelFunc:wN};class kN{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=by(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function IN(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{reps:i}=r;if("string"===a.dtype||a.shape.length>5){const e=s.readSync(a.dataId),n="string"===a.dtype?e.map((e=>t.D5U.decodeString(e))):e,r=(0,t.f3b)(a.shape,a.dtype,n),o=$b(r,i);return s.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new kN(a.shape,i);return s.runWebGLProgram(o,[a],a.dtype)}const SN={kernelName:t.n9L,backendName:"webgl",kernelFunc:IN};class NN{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class TN{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function CN(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function $N(e){let t=1;for(;t<e;)t*=2;return t}const EN={kernelName:t.cWu,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{k:i,sorted:o}=r,u=(0,t.OBj)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=(0,t.OBj)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=a.shape,h=c[c.length-1];if(s.shouldExecuteOnCPU([a])||h<u||i>l){const e=s.readSync(a.dataId),[t,n]=Eb(e,c,a.dtype,i,o);return[s.makeTensorInfo(t.shape,t.dtype,t.values),s.makeTensorInfo(n.shape,n.dtype,n.values)]}if(0===i)return c[c.length-1]=0,[s.makeTensorInfo(c,a.dtype,[]),s.makeTensorInfo(c,"int32",[])];if(1===h)return[a,lk({attrs:{shape:c,dtype:"int32",value:0},backend:s})];const p=s.texData.get(a.dataId),d=null!==p&&p.isPacked,f=d?s.unpackTensor(a):a,m=t.D5U.sizeFromShape(c)/h,g=vx({inputs:{x:f},attrs:{shape:[m,h]},backend:s});d&&CN(s,f);const y=$N(i),b=$N(h);let x=null;const w=()=>null===x?[g,g]:[g,x],v=(e,t,n)=>{const r=w(),a=new NN(n),i=[[h],[null===x?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=x;x=s.runWebGLProgram(a,r,"int32",i),CN(s,o)};for(let e=1;e<y;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)v(t,n,[m,b])}for(let e=b;e>y;e/=2){const t=w(),n=new TN([m,e/2]),r=[[h],[null===x?1:0],[y]],a=x;x=s.runWebGLProgram(n,t,"int32",r),CN(s,a);const i=y/2,o=2*i;for(let e=i;e>=1;e/=2)v(o,e,x.shape)}let k=x;x=Cw({inputs:{x},backend:s,attrs:{begin:0,size:[m,i]}}),CN(s,k);let I=$k({inputs:{x:g,indices:x},backend:s,attrs:{axis:1,batchDims:1}});CN(s,g);const S=c.slice(0,-1);S.push(i),k=x,x=vx({inputs:{x},attrs:{shape:S},backend:s}),CN(s,k);const N=I;return I=vx({inputs:{x:I},attrs:{shape:S},backend:s}),CN(s,N),[I,x]}};class AN{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const DN={kernelName:t.wx7,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=s,[c,h,p,d]=r.shape,[f,m]=null!=l?l:[h,p],g=new AN(h,p,i,o,u,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}},RN={kernelName:t.kpP,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;ty(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=Db(i,r,a.shape,a.dtype);return[s.makeTensorInfo(u,a.dtype,o),s.makeTensorInfo([l.length],"int32",l)]}},_N={kernelName:t.ToN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,u=r.shape[a],l=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(l[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[a]=e;const t=Cw({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=vx({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class FN{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const ON=[Fx,Mx,Bx,Ux,Vx,jx,Xx,qx,ew,tw,sw,aw,ow,lw,hw,fw,mw,bw,xw,ww,Iw,Ew,Aw,Dw,Mw,zw,Pw,ax,Hw,Jw,ov,pv,dv,fv,mv,gv,bv,wv,kv,$v,Ev,Av,Rv,Ov,Bv,zv,Wv,Vv,Gv,jv,Xv,Kv,Qv,Jv,tk,rk,ok,ck,pk,mk,yk,wk,Ik,Sk,Tk,Ek,Dk,_k,sx,Fk,Yw,Mk,Bk,Uk,ux,Pk,Gk,Hk,Xk,Kk,Qk,Jk,tI,rI,iI,uI,cI,hI,pI,mI,gI,yI,bI,xI,vI,SI,TI,OI,wx,LI,zI,WI,VI,_w,HI,qI,KI,JI,tS,hx,nS,sS,rS,aS,oS,Ow,EI,lS,hS,dS,kx,gS,bS,vS,IS,TS,$S,AS,RS,FS,MS,BS,US,PS,GS,jS,qS,$w,FI,YS,QS,ZS,JS,eN,tN,nN,sN,iN,uN,hN,pN,fN,mN,gN,yN,RI,Ax,xN,vN,SN,EN,DN,Rx,RN,_N,{kernelName:t.Qvg,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:s,attrs:r}=e,{x:a,segmentIds:i}=n,{numSegments:o}=r,u=a.shape.length,l=[];let c=0;const h=t.Wap.getAxesPermutation([c],u);let p=a;null!=h&&(p=Dx({inputs:{x:a},backend:s,attrs:{perm:h}}),l.push(p),c=t.Wap.getInnerMostAxes(1,u)[0]);const d=t.Wap.segment_util.computeOutShape(p.shape,c,o),f=t.D5U.sizeFromShape([p.shape[c]]),m=vx({inputs:{x:p},backend:s,attrs:{shape:[-1,f]}});l.push(m);const g=(0,t.z4k)(a.dtype),y=(e,n,r,a,i)=>{const o=e.shape[0],u=e.shape[1],c=t.Wap.segment_util.segOpComputeOptimalWindowSize(u,i),h=new FN({windowSize:c,inSize:u,batchSize:o,numSegments:i},n),p=s.compileAndRun(h,[e,r],a);if(l.push(p),p.shape[1]===i)return p;const d=iS({backend:s,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),f=IN({inputs:{x:d},backend:s,attrs:{reps:[u/c]}});return l.push(d),l.push(f),y(p,n,f,a,i)},b=vx({inputs:{x:y(m,"unsortedSegmentSum",i,g,o)},backend:s,attrs:{shape:d}});let x=b;if(null!=h){l.push(b);const e=t.Wap.getUndoAxesPermutation(h);x=Dx({inputs:{x},backend:s,attrs:{perm:e}})}return l.forEach((e=>s.disposeIntermediateTensorInfo(e))),x}},XI];for(const e of ON)(0,t.wCN)(e);t.jTM,kl.gJ;const MN=window.devicePixelRatio;var LN=document.getElementById("draw_btn"),BN=document.getElementById("erase_btn"),zN=document.getElementById("clear_btn"),UN=document.getElementById("compute_btn"),WN=document.getElementById("result_div"),PN=document.getElementById("paint");PN.width=800*MN,PN.height=800*MN;var VN=PN.getContext("2d",{willReadFrequently:!0});function GN(){VN.clearRect(0,0,800,800),VN.beginPath();for(var e=1;e<28;e++)VN.moveTo(0,Math.ceil(800*e/28)+.5),VN.lineTo(800,Math.ceil(800*e/28)+.5),VN.stroke();for(e=1;e<28;e++)VN.moveTo(Math.ceil(800*e/28)+.5,0),VN.lineTo(Math.ceil(800*e/28)+.5,800),VN.stroke();VN.closePath()}VN.scale(MN,MN),VN.lineWidth=1,VN.fillStyle="rgba(0, 0, 0, 0.1)",VN.strokeStyle="rgba(0, 0, 0, 1)";var HN=!1;function jN(){for(var e=[],t=0;t<28;t++){for(var n=[],s=0;s<28;s++)n.push([VN.getImageData(100*(2*s+1)*MN/7,100*(2*t+1)*MN/7,1,1).data[3]/255]);e.push(n)}return e}PN.addEventListener("mousedown",(()=>{HN=!0}),!1),PN.addEventListener("mouseup",(()=>{HN=!1}),!1),PN.addEventListener("mousemove",(e=>{if(HN){var t=e.offsetX,n=e.offsetY,s=200*Math.floor(7*(t+10)/200)/7,r=200*Math.floor(7*(n+10)/200)/7;VN.fillRect(s,r,200/7,200/7)}})),PN.addEventListener("click",(e=>{var t=e.offsetX,n=e.offsetY,s=200*Math.floor(7*(t+10)/200)/7,r=200*Math.floor(7*(n+10)/200)/7;VN.fillRect(s,r,200/7,200/7)})),LN.addEventListener("click",(()=>{VN.fillStyle="rgba(0, 0, 0, 0.1)"})),BN.addEventListener("click",(()=>{VN.fillStyle="rgba(255, 255, 255, 0.3)"})),zN.addEventListener("click",(()=>{GN()})),document.body.appendChild(PN),GN(),UN.addEventListener("click",(()=>{u.e(886).then(u.bind(u,4891)).then((e=>{var n=Array.from(e.default.execute(t.XeE([jN()])).dataSync());WN.innerText="RESULT: "+n.indexOf(Math.max(...n)).toString()}))}))})()})();